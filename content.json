{"pages":[{"title":"","text":"google-site-verification: google54e17a966e7cdc95.html","link":"/google54e17a966e7cdc95.html"}],"posts":[{"title":"AppleScriptでVimの保存時のファイル更新を取得してブラウザを更新する","text":"概要Vimでファイルを保存した時にファイルをブラウザで開いている場合(HTMLを書いている場合など)、いちいちブラウザにフォーカスを当てて、ブラウザ再読み込みを行うのは面倒くさいので、 ブラウザにフォーカスを当てる command + rイベントを発行 フォーカスをターミナルに戻す の動作を自動化する Vimで使用するコマンドを実装する /Users/daiki/.vim/pluginにchrome.vimを配置 ディレクトリがない場合は作成する 以下のコードをchrome.vimに書き込んで保存 chrome.vim 123command! -bar ChromeReload silent !osascript $HOME/bin/chrome_reload.scpt &amp;&amp; osascript $HOME/bin/terminal_focus.scptcommand! -bar ChromeStartObserve ChromeStopObserve | autocmd BufWritePost &lt;buffer&gt; ChromeReloadcommand! -bar ChromeStopObserve autocmd! BufWritePost &lt;buffer&gt; ブラウザにフォーカスを当ててリロードするコマンドを実装 /Users/daiki/binにchrome_reload.scptを配置 ディレクトリがない場合は作成する 以下のコードをchrome_reload.scptに書き込んで保存カスタマイズ 1行目:tell application &quot;safari&quot; to activateのsafariの部分を別のブラウザの名前に変更すると開くブラウザを変更できる chrome_reload.scpt 12tell application &quot;safari&quot; to activatetell application &quot;System Events&quot; to keystroke &quot;r&quot; using {command down} ターミナルにフォーカスを戻すコマンド /Users/daiki/binにterminal_focus.scptを配置 ディレクトリがない場合は作成する 以下のコードをterminal_focus.scptに書き込んで保存カスタマイズ &quot;Terminal&quot;の部分を書き換えると別アプリにフォーカスを当てられる terminal_focus.scpt 1tell application &quot;Terminal&quot; to activate Vimで使用するにはvimを開いて、ブラウザで更新したいファイルに対して以下のコマンドを打つ :ChromeReload:１回ブラウザをリロードする :ChromeStartObserve:Vimで保存するたびにブラウザをリロードする :ChromeStopObserve:ChromeStartObserveの保存時の自動リロードを停止する 参考https://lukesilvia.hatenablog.com/entry/20101023/p2","link":"/2021/02/21/AppleScript%E3%81%A7Vim%E3%81%AE%E4%BF%9D%E5%AD%98%E6%99%82%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%9B%B4%E6%96%B0%E3%82%92%E5%8F%96%E5%BE%97%E3%81%97%E3%81%A6%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B/"},{"title":"Ctrl+cとEscの違い","text":"Ctrl+cはEscと同じ挙動をしない場合がある例えば、矩形選択モードctrl + vでマルチカーソル処理を行おうとした時に、入力内容を確定するために、インサートモードを抜けるが、その時の挙動がCtrl + cとEscでは、違ったものになる Ctrl + c : 最初の１行しか入力内容が反映されない Esc : 期待通りの選択している全ての行に入力値が反映される 対策 キーマップを書き換えてCtrl + cをEscと同じ扱いにする 1imap &lt;C-c&gt; &lt;Esc&gt; Ctrl + [を使う 素直にEscを使用する","link":"/2021/02/14/Ctrl-c%E3%81%A8Esc%E3%81%AE%E9%81%95%E3%81%84/"},{"title":"GitHubでブログを作成する(Hexo)","text":"環境 Macbook Air 2020 M1 Big Sur 11.0.1 前準備 node.jsをインストールする Hexoをインストールする 1. node.jsをインストールする123git clone https://github.com/creationix/nvm ~/.nvmsource ~/.nvm/nvm.shnvm install 10.16.3 2. Hexoをインストールするnode.jsに付属してくる、nmpを使用する 1npm install -g hexo 3. HexoにGit操作用ツールを追加hexoでdeployするときにgitを使用する 1npm install hexo-deployer-git --save GitHubでブログ用のリポジトリを作成するリポジトリ名はなんでも良いわけではなく、特定の記述規則に従う必要がある 123username.github.iousername = GitHubのユーザー名 作成したリポジトリをCloneして移動12git clone [リポジトリ]cd [リポジトリ] Hexoでプロジェクトを作成ここで作成するプロジェクトは後で消去するので（必要なのは作成されるフォルダの中のファイル)、適当でOK 1hexo init [プロジェクト名] ファイル名の中身をCloneしたリポジトリに移動させる123mv ./&lt;任意のプロジェクト名&gt;/* ./mv ./&lt;任意のプロジェクト名&gt;/.* ./rm -r &lt;任意のプロジェクト名&gt; Hexoプロジェクトの設定を書き換える書き換え対象ファイル1_config.yml 書き換える設定 language: -&gt; language: ja url: -&gt; url: https://.github.io/ 「deploy:」 以下を書き換え&amp;追記 書き換え前12deploy: type: '' 書き換え後12345deploy: type: git repo: https://github.com/&lt;username&gt;/&lt;username&gt;.github.io branch: master message: コミット時のメッセージ","link":"/2021/01/25/GitHub%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/"},{"title":"HTMLの概要","text":"HTMLの特徴全てのコードはタグで囲まれている 123&lt;body&gt; &lt;title&gt;タイトル&lt;/title&gt;&lt;/body&gt; HTMLのサンプルサイトサンプルサイト タグ基本1- &lt;html&gt;&lt;/html&gt; : HTMLの内容 文章関係12345- &lt;body&gt;&lt;/body&gt; : 文章の本文- &lt;div&gt;&lt;/div&gt; : division(領域)画面上の領域を分ける- &lt;h~&gt;&lt;/h~&gt; : Header(タイトル)~部分は数字が入り、数字によってタイトルのサイズが変わる- &lt;p&gt;&lt;/p&gt; : Paragraf(段落)- &lt;a href=&quot;xxx&quot;&gt;&lt;/a&gt; : リンク レイアウト関係1234567- &lt;head&gt;&lt;/head&gt; : レイアウトの記述- &lt;title&gt;&lt;/title&gt; : ブラウザのタブに表示される名前- &lt;style&gt;&lt;/style&gt; : 文字やレイアウトの装飾を指定する部分 - body{} : &lt;body&gt;&lt;/body&gt;に対するレイアウト設定 - div{} : &lt;div&gt;&lt;/div&gt;に対するレイアウト設定 - a:link,a:visited : リンクに対する書式設定 - @media : メディアクエリー（デバイスによって切り替える)レスポンシブデザインのための記述 メタ123- &lt;meta charset=&quot;&quot;/&gt; : 文字コードの指定- &lt;meta http-equiv=&quot;&quot; content=&quot;&quot;/&gt; : ページの種類の指定 - &lt;meta name=&quot;&quot;content=&quot;&quot;/&gt; :","link":"/2021/02/05/HTML%E3%81%AE%E6%A6%82%E8%A6%81/"},{"title":"Markdownで改行を入れる","text":"改行の入れ方3パターン1. 半角空白を２つ入れて改行する この改行の入れ方の場合、ブロックは別れない HTMLで言うところの、&lt;br&gt;タグと同じ123123 2. 改行を１つ入れる ブロックが別れる HTMLで言うところの、&lt;p&gt;タグと同じ12345123 3. &lt;br&gt;タグを入れる HTMLのタグと同じ11&lt;br&gt;2&lt;br&gt;3&lt;br&gt;","link":"/2021/02/14/Markdown%E3%81%A7%E6%94%B9%E8%A1%8C%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B/"},{"title":"Swiftで迷路を解く","text":"目的 Swiftの勉強 制作時間 4時間 コードimport UIKitvar targetMaze = [ [&quot;#&quot;,&quot;S&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot; &quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot;#&quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;G&quot;,&quot;#&quot;,&quot;#&quot;]]enum MapType:String{ case Start = &quot;S&quot; case Goal = &quot;G&quot; case Wall = &quot;#&quot; case Root = &quot;+&quot;}struct Vec2:Equatable{ var X:Int = 0 var Y:Int = 0}struct Direction{ var Now:Vec2 var Up:Vec2? var Down:Vec2? var Right:Vec2? var Left:Vec2?}func CheckRoad(maze:[[String]],pos:Vec2?,beforPos:Vec2,maxPos:Vec2,checkType:MapType)-&gt; Direction?{ if(pos == nil) { return nil } // 上,右,下,左 var retPos:Direction = Direction(Now:pos!,Up:nil,Down: nil,Right: nil,Left: nil) // 上下左右の座標を取得 let minusY = retPos.Now.Y - 1 let plusY = retPos.Now.Y + 1 let minusX = retPos.Now.X - 1 let plusX = retPos.Now.X + 1 // マップ内かチェック if(minusY &gt;= 0){ retPos.Down = Vec2() } if(plusY &lt; maxPos.Y){ retPos.Up = Vec2() } if(minusX &gt;= 0){ retPos.Left = Vec2() } if(plusX &lt; maxPos.X){ retPos.Right = Vec2() } // 壁があるかチェック if(retPos.Down == Vec2() &amp;&amp; (maze[minusY][retPos.Now.X] != checkType.rawValue) &amp;&amp; beforPos != Vec2(X: retPos.Now.X, Y: minusY)) { retPos.Down = Vec2(X:retPos.Now.X,Y:minusY) } else{ retPos.Down = nil } if(retPos.Up == Vec2() &amp;&amp; (maze[plusY][retPos.Now.X] != checkType.rawValue) &amp;&amp; beforPos != Vec2(X: retPos.Now.X, Y: plusY)) { retPos.Up = Vec2(X:retPos.Now.X,Y:plusY) }else{ retPos.Up = nil } if(retPos.Left == Vec2() &amp;&amp; (maze[retPos.Now.Y][minusX] != checkType.rawValue) &amp;&amp; beforPos != Vec2(X: minusX, Y: retPos.Now.Y)) { retPos.Left = Vec2(X:minusX,Y:retPos.Now.Y) }else{ retPos.Left = nil } if(retPos.Right == Vec2() &amp;&amp; (maze[retPos.Now.Y][plusX] != checkType.rawValue) &amp;&amp; beforPos != Vec2(X: plusX, Y: retPos.Now.Y)) { retPos.Right = Vec2(X:plusX,Y:retPos.Now.Y) }else{ retPos.Right = nil } return retPos}// 指定したターゲットの位置を返す// 見つからなかった場合は、nilが返えってくるfunc serchTargetPoint(maze:[[String]],targetMapType:MapType)-&gt;Vec2?{ var retPos:Vec2? = nil let mazeYCount = maze.count - 1 let mazeXCount = maze[0].count - 1 for Y in 0...mazeYCount { for X in 0...mazeXCount{ let checkValue = maze[Y][X] if(checkValue == targetMapType.rawValue) { retPos = Vec2(X:X,Y:Y) } } } return retPos}func printMaze(maze:[[String]]){ let mazeYCount = maze.count - 1 let mazeXCount = maze[0].count - 1 for Y in 0...mazeYCount { print(&quot;\\n&quot;) for X in 0...mazeXCount{ print(maze[Y][X], terminator: &quot;&quot;) } } print(&quot;\\n&quot;)}printMaze(maze:targetMaze)let SPos = serchTargetPoint(maze:targetMaze,targetMapType:MapType.Start)let GPos = serchTargetPoint(maze:targetMaze,targetMapType:MapType.Goal)print(SPos ?? &quot;スタートなし&quot;)print(GPos ?? &quot;ゴールなし&quot;)let mazeYCount = targetMaze.count - 1let mazeXCount = targetMaze[0].count - 1let maxPos = Vec2(X: mazeYCount, Y: mazeXCount)var RootList:Array&lt;Direction&gt; = Array&lt;Direction&gt;()RootList.append (CheckRoad(maze:targetMaze,pos: SPos,beforPos: Vec2(X: 0,Y: 0),maxPos: maxPos,checkType: MapType.Wall)!)var BlackList:Array&lt;Vec2&gt; = Array&lt;Vec2&gt;()while true { let direction = CheckRoad(maze:targetMaze,pos: RootList.last?.Up ?? nil,beforPos: RootList.last?.Now ?? Vec2(),maxPos: maxPos,checkType: MapType.Wall) var checkFlag:Bool = false for black in BlackList { if(black == direction?.Now ?? Vec2()) { checkFlag = true } } if(GPos == direction?.Now ?? Vec2()) { break } if(direction != nil &amp;&amp; !checkFlag) { RootList.append(direction!) }else { let direction = CheckRoad(maze:targetMaze,pos: RootList.last?.Right ?? nil,beforPos: RootList.last?.Now ?? Vec2(),maxPos: maxPos,checkType: MapType.Wall) var checkFlag:Bool = false for black in BlackList { if(black == direction?.Now ?? Vec2()) { checkFlag = true } } if(GPos == direction?.Now ?? Vec2()) { break } if(direction != nil &amp;&amp; !checkFlag) { RootList.append(direction!) }else { let direction = CheckRoad(maze:targetMaze,pos: RootList.last?.Down ?? nil,beforPos: RootList.last?.Now ?? Vec2(),maxPos: maxPos,checkType: MapType.Wall) var checkFlag:Bool = false for black in BlackList { if(black == direction?.Now ?? Vec2()) { checkFlag = true } } if(GPos == direction?.Now ?? Vec2()) { break } if(direction != nil &amp;&amp; !checkFlag) { RootList.append(direction!) }else { let direction = CheckRoad(maze:targetMaze,pos: RootList.last?.Left ?? nil,beforPos: RootList.last?.Now ?? Vec2(),maxPos: maxPos,checkType: MapType.Wall) var checkFlag:Bool = false for black in BlackList { if(black == direction?.Now ?? Vec2()) { checkFlag = true } } if(GPos == direction?.Now ?? Vec2()) { break } if(direction != nil &amp;&amp; !checkFlag) { RootList.append(direction!) }else { BlackList.append(RootList.last?.Now ?? Vec2()) if(RootList.count &gt; 0) { RootList.removeLast() }else { break } } } } }}for root in RootList{ print(root.Now) targetMaze[root.Now.Y][root.Now.X] = MapType.Root.rawValue}printMaze(maze:targetMaze) 感想 Enumのコードに値をセットできるので、コードが読みやすい ちょこちょこ出てくる制約に最初はイライラするが、書いているとなれる 制約があるおかげで、コードに統一感が出る","link":"/2021/02/20/Swift%E3%81%A7%E8%BF%B7%E8%B7%AF%E3%82%92%E8%A7%A3%E3%81%8F/"},{"title":"VimにPluginマネージャー「Vundle」を入れる","text":"環境 Mac MacBook Air (M1, 2020) OS Big Sur v11.0.1 VIM - Vi IMproved 8.2 (2019 Dec 12, compiled Oct 29 2020 23:33:57) 手順1. ホームディレクトリにフォルダを作る1mkdir -p ~/.vim/bundle/Vundle.vim 2. GitHubからダウンロード1git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim 3. .vimrcにの先頭に設定を記述123456789101112131415set nocompatiblefiletype offset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()Plugin 'VundleVim/Vundle.vim'&quot; 導入したいプラグインを以下に列挙&quot; Plugin '[Github Author]/[Github repo]' の形式で記入Plugin 'airblade/vim-gitgutter'call vundle#end()filetype plugin indent on&quot; その他のカスタム設定を以下に書く 4. vimを開いた状態でコマンドを打ってインストール1:PluginInstall","link":"/2021/02/17/Vim%E3%81%ABPlugin%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A3%E3%83%BC%E3%80%8CVundle%E3%80%8D%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B/"},{"title":"XCodeでSwiftの練習","text":"1. AppStoreでXCodeをダウンロード AppStoreの検索欄に「XCode」と入力して検索 2. インストールしたXCodeを起動3. Playgroundファイルを作成 File -&gt; New -&gt; Playground… 以前のバージョンのXCodeではトップウィンドウにPlaygourndファイルの作成ボタンがあったが、今はなくなっている 4. 特別な理由が無い限りは、デフォルトの設定のまま作成 Mac -&gt; Blank で作成 再生ボタンの意味 下の再生ボタンは記述してあるコード全てを再生する 今青いカーソルがある部分まで再生される","link":"/2021/01/25/XCode%E3%81%A7Swift%E3%81%AE%E7%B7%B4%E7%BF%92/"},{"title":"XcodeでVimキーバインドを使う「XVim2」","text":"目次 証明書の発行 XVim2のインストール XcodeにXVim2を読み込ませる .xvimrcでカスタマイズ 参考 1. 証明書の発行 アプリケーションのKeychain Access(キーチェーンアクセス)を起動 Keychain Accessウィンドウの左側のデフォルトチェーン内のログインを選択 画面上部のメニューバーから、キーチェーンアクセス-&gt;証明書アシスタント-&gt;証明書を作成を選択 以下と同じ情報を設定して、作成ボタンを押下 名前 : XcodeSigner 固有名のタイプ : 自己署名ルート 証明書のタイプ : コード署名 作成時の警告が出るが、続けるを選択 以下の画像のような画面が表示されれば証明書の発行は成功 2. XVim2のインストールこの作業では、任意の場所にリポジトリをクローンして作業を行ますが、今回はDesktopで作業することとして解説します。 Xcodeのパスの確認インストール作業を行う前に、Xcodeが配置されているファイルパスの確認をします。 以下のコマンドで、/Applications/Xcode.app/Contents/Developerというパスが表示されればOKです。それ以外のパスが表示されてしまった場合は、以下コマンドで、パスを設定してください。 1xcode-select -p それ以外のパスが表示されてしまった場合は、以下コマンドで、パスを設定してください。 1xcode-select -s /Applications/Xcode.app/Contents/Developer インストール注意 : この作業を行うときは、Xcodeを完全に落として(タスクキル)から行ってください ディレクトリを移動 1cd ~/Desktop リポジトリをクローン 1git clone https://github.com/XVimProject/XVim2.git クローンしてきたリポジトリのディレクトリに移動 1cd XVim2/ makeコマンドでプラグインをビルド 1make 出力がたくさん流れたあと、に以下のような文字が表示されれば成功 1** BUILD SUCCEEDED ** 3. XcodeにXVim2を読み込ませる Xcodeを起動すると、以下の画像のようなウィンドウが表示されるので、Load Bundleを選択する 上部メニューバーのEditメニューの一番下にXVimが表示されて入れば導入成功 間違えて、Skip Bundleを選択してしまった場合一度XCodeを閉じて(タスクキル)して、以下コマンドをターミナルで実行してから再度XCodeを実行するとまた確認ウィンドウが表示さる X.X = 自分が使っているXcodeのバージョン 1defaults delete com.apple.dt.Xcode DVTPlugInManagerNonApplePlugIns-Xcod-X.X 4. .xvimrcでカスタマイズホームディレクトリ直下に.xvimrcファイルを作成して、.vimrcと同じように記述していく 1vim ~/.xvimrc 5. 参考 https://github.com/XVimProject/XVim2 https://zenn.dev/ryo_kawamata/articles/intoroduce-xvim2 https://qiita.com/ks-cap/items/91fb8578bbb930141a60","link":"/2021/02/28/Xcode%E3%81%A7Vim%E3%82%AD%E3%83%BC%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86%E3%80%8CXVim2%E3%80%8D/"},{"title":"iframeのaline属性について","text":"alineとは iframe(インラインフレーム)に並ぶテキスト位置を指定できる iframe(インラインフレーム)をフロートさせられる フロート : 左右どちらかに寄せて、後続のテキストを回り込ませる 指定可能文字列 left : 左に配置して、後続の内容を右側に回り込ませる right: 右に配置して、後続の内容を左側に回り込ませる1&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DrDm7uO4Fu0&quot; align =&quot;right&quot;&gt;&lt;/iframe&gt;","link":"/2021/02/12/iframe%E3%81%AEaline%E5%B1%9E%E6%80%A7%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"formについて","text":"参考基本的なフォーム form(入力・送信フォーム)タグ どこに、どうやって送信するかを記述するタグ このタグセクションの中には、何を送信するかを示す 1&lt;form&gt;&lt;/form&gt; input(入力)タグ formタグの「何を」送信するかを記述するためのタグ formタグで囲む必要があるのは、入力した値を送信したい場合 必ずformタグに記述する必要はない type属性を指定することで、入力インターフェイスを変更できる type属性の種類type属性の値 type=”hidden” 画面上は表示されない隠しデータを指定する type=”text” 一行テキストボックスを作成する（初期値） type=”search” 検索テキストの入力欄を作成するHTML5から追加 type=”tel” 電話番号の入力欄を作成するHTML5から追加 type=”url” URLの入力欄を作成するHTML5から追加 type=”email” メールアドレスの入力欄を作成するHTML5から追加 type=”password” パスワード入力欄を作成する type=”datetime” UTC（協定世界時）による日時の入力欄を作成するHTML5から追加 type=”date” 日付の入力欄を作成するHTML5から追加 type=”month” 月の入力欄を作成するHTML5から追加 type=”week” 週の入力欄を作成するHTML5から追加 type=”time” 時間の入力欄を作成するHTML5から追加 type=”datetime-local” UTC（協定世界時）によらないローカル日時の入力欄を作成するHTML5から追加 type=”number” 数値の入力欄を作成するHTML5から追加 type=”range” レンジの入力欄を作成するHTML5から追加 type=”color” 色の入力欄を作成するHTML5から追加 type=”checkbox” チェックボックスを作成する type=”radio” ラジオボタンを作成する type=”file” サーバーへファイルを送信する type=”submit” 送信ボタンを作成する type=”image” 画像ボタンを作成する type=”reset” リセットボタンを作成する type=”button” 汎用ボタンを作成する 123&lt;form&gt; &lt;input type=&quot;text&quot;&gt;&lt;/form&gt; ボタンにアクションを設定する action属性を設定することで、ボタンを押した時の挙動を指定できる この例の場合、ボタンを押すとactionで指定しているURLを開く 123&lt;form action=&quot;http://www.google.co.jp&quot;&gt; &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt; テキストをデフォルトで設定しておく 入力された状態でデフォルト設定 valueタグを使用する1&lt;input type=&quot;text&quot; value=&quot;デフォルト&quot;&gt; ガイドラインとして表示する placeholderタグを使用する1&lt;input type=&quot;text&quot; placeholder=&quot;デフォルト&quot;&gt; チェックボックスをデフォルトでチェックした状態にする checked属性を使う1&lt;input type=&quot;checkbox&quot; checked&gt; ボタンの表示名を変える value属性を設定する 1&lt;input type=&quot;button&quot; value=&quot;これはボタンです&quot;&gt; 複数のラジオボタンの連携 name属性をつけることで、グルーピングができる 1231&lt;input type=&quot;radio&quot; name=&quot;test&quot;&gt;2&lt;input type=&quot;radio&quot; name=&quot;test&quot;&gt;3&lt;input type=&quot;radio&quot; name=&quot;test&quot;&gt; ラジオボタンをデフォルトでチェックした状態にする checked属性を使う1&lt;input type=&quot;checkbox&quot; checked&gt; ドロップダウンを生成する &lt;select&gt;&lt;/select&gt;タグを使用して、その中のセクションに&lt;option&gt;&lt;/option&gt;タグで項目を記述する123456&lt;select&gt; &lt;option&gt;塩ラーメン&lt;/option&gt; &lt;option&gt;味噌ラーメン&lt;/option&gt; &lt;option&gt;醤油ラーメン&lt;/option&gt; &lt;option&gt;豚骨ラーメン&lt;/option&gt;&lt;/select&gt; ドロップダウンのデフォルト選択項目を指定する デフォルトで選択させた状態にしたい&lt;option&gt;タグに、selected属性を付与する 123456&lt;select&gt; &lt;option&gt;塩ラーメン&lt;/option&gt; &lt;option&gt;味噌ラーメン&lt;/option&gt; &lt;option selected&gt;醤油ラーメン&lt;/option&gt; &lt;option&gt;豚骨ラーメン&lt;/option&gt;&lt;/select&gt;","link":"/2021/02/10/form%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"div属性について","text":"dev(devision)要素について dev要素は、複数のブロックに対して、レイアウトを適応させることができる \\&lt;dev\\&gt;\\&lt;/dev\\&gt;で囲んだブロック全体にレイアウトが適応させる 基本的な概念は内部CSSのclassやidと同じ 1234567891011121314151617181920212223242526&lt;html&gt; &lt;head&gt; &lt;style&gt; .A{ background:pink; } #B{ background:yellow; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!--classを使用--&gt; &lt;div class=&quot;A&quot;&gt; &lt;h1&gt;これは見出しです&lt;/p&gt; &lt;p&gt;これは見出しに対する本文です&lt;/p&gt; &lt;/div&gt; &lt;!--idを使用--&gt; &lt;div id=&quot;B&quot;&gt; &lt;h1&gt;これは見出し2です&lt;/p&gt; &lt;p&gt;これは見出し2に対する本文です&lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;","link":"/2021/02/23/div%E5%B1%9E%E6%80%A7%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"Floatレイアウトについて","text":"","link":"/2021/02/26/Float%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"vimのカレントファイルをブラウザで開く","text":"openコマンドを使う vimでは%でカレントファイルのパスを取得できる !はOS用のコマンド(echoやpwdなど)の先頭につけることでvimエディタ上からOS用コマンドを実行することができる openはファイルのデフォルトで開くソフトに設定されているソフトで開かれる 1:!open % 入力の手間を減らす これまでのコマンドをショートカットキーで呼び出せるように.vimrcに追記する 12345&quot; スペースキーをショートカットのトリガーとして認識するように設定let mapleader = &quot;\\&lt;Space&gt;&quot; &quot; スペースキー + o で実行できるnnoremap &lt;Leader&gt;o :!open %&lt;CR&gt; フォーカスを戻す(Mac) openコマンドを使うとフォーカスがブラウザになってしまうので、AppleScriptを使ってフォーカスをVim(iTerm)に戻す terminal_focusの対象アプリを変更すればiTerm以外のソフトにも対応可能 ~/.vim/plugin/BrowserOpen.vim 1command! -bar BrowserOpen !open % | osascript $HOME/bin/terminal_focus.scpt ~/bin/terminal_focus.scpt 1tell application &quot;iTerm&quot; to activate ~/.vimrc 12345&quot; スペースキーをショートカットのトリガーとして認識するように設定let mapleader = &quot;\\&lt;Space&gt;&quot; &quot; スペースキー + o で実行できるnnoremap &lt;Leader&gt;o :BrowserOpen&lt;CR&gt;","link":"/2021/02/22/vim%E3%81%AE%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7%E9%96%8B%E3%81%8F/"},{"title":"iframeについて","text":"ページ上に複数のページから読み込んだページを表示するiframeタグを使用する iframe = Inline Frame(行内フレーム)1&lt;iframe src=&quot;table.html&quot;&gt;&lt;/iframe&gt; Youtubeの動画を埋め込む youtubeで埋め込みたい動画を選択 動画の再生画面から、埋め込みコードを取得 埋め込みコードはiframeで記述してあるので、そのままコピペする 取得した埋め込みコード例 1&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/y4noU6qgJlc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;","link":"/2021/02/11/iframe%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【Android Studio】Materila Designを使用して見た目をリッチにする","text":"参考資料 参考ドキュメントhttps://material.io/designhttps://github.com/material-components/material-components-android スタートガイドhttps://github.com/material-components/material-components-android/blob/master/docs/getting-started.md 手順 build.gradle(Project:プロジェクト名)にgoogle()が含まれているかチェック 12345allprojects { repositories { google() &lt;- これが記述してあればOK }} build.gradle(Module:app)にライブラリを記述 &lt;version&gt;の部分は以下のURLを参考にする - [https://mvnrepository.com/artifact/com.google.android.material/material](https://mvnrepository.com/artifact/com.google.android.material/material) 12345dependencies { ... implementation 'com.google.android.material:material:&lt;version&gt;' ...} 一度ビルドする styles.xmlを書き換えてみる 生成したての状態 12345678910&lt;resources&gt; &lt;!-- Base application theme. --&gt; &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt; &lt;!-- Customize your theme here. --&gt; &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt; &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt; &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt; &lt;/style&gt;&lt;/resources&gt; これの&lt;style&gt;ブロックのparentパラメーターを書き換えることで、テーマを変更できる 1&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.MaterialComponents.DayNight.NoActionBar&quot;&gt; このテーマを書き換えることで、&lt;Button&gt; と &lt;AutoCompleteTextView&gt;の XML コンポーネントをそれぞれ &lt;MaterialButton&gt; と &lt;MaterialAutoCompleteTextView&gt; に置き換えます。 他のコンポーネントのテーマを変えるには、XMLに直接記述する必要がある","link":"/2021/03/16/%E3%80%90Android-Studio%E3%80%91Materila-Design%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E8%A6%8B%E3%81%9F%E7%9B%AE%E3%82%92%E3%83%AA%E3%83%83%E3%83%81%E3%81%AB%E3%81%99%E3%82%8B/"},{"title":"zshとaliasについて","text":"zshとは 読み方: ズィーシェル シェルの一種でbashの進化版 https://ja.wikipedia.org/wiki/Z_Shell シェルとは カーネルと対話するためのインターフェイス シェルの名前の由来は、カーネルを包み込んでいることに由来する カーネルの中に入力機能を入れない理由 シェル(ロジック)とカーネル(インターフェイス)を分けることでインターフェイスを他のカーネルでも使いまわすことができるようになる インターフェイスのエラーでカーネルをクラッシュする可能性を排除できる https://recruit.cct-inc.co.jp/tecblog/os/shell/ aliasとは シェル上で、長いコマンドや一連のコマンドをまとめて、ひとまとめにすることのできる機能 使い方(zshの場合) ~/.zshrcに記述する 1alias 別名='本来のコマンド' 保存して.zshrcLの再読み込みをする 1source ~/.zshrc 別名で指定したコマンドを打って期待通り動けばOK 使用例 長いパスのフォルダに移動cdしたい場合 このコマンドbcを打つだけで記述したcdコマンドが実行される1alias bc='cd /Users/daiki/Desktop/Blog/Daiki-Iijima.github.io/source/_posts' 複数のコマンドを1つのaliasにまとめる 各コマンドを;で区切ることで連続したコマンドを記述できる 1alias 別名='コマンド1;コマンド2' 使用例 デスクトップへ移動して、testフォルダを生成する 1alias cdmk='cd /Users/daiki/Desktop;mkdir test' 引数を渡す $+数字を本来の引数があるはずの位置に記述することで、引数を渡すことができる 1alias 別名='mkdir $1' 使用する場合 1別名 引数 複数の引数を渡したい場合は、$の後の数字を繰り上げていく 1alias 別名='mkdir $1;mkdir $2' 使用する場合 1別名 引数 引数 使用例 メモをとるためにディレクトリとディレクトリの中にディレクトリと同名の.mdファイルをvimで編集する1alias memo='(){cd /Users/daiki/Desktop/memo;mkdir $1;vim $1.md}' 参照リンク シェルの設定ファイルを再読み込み bashで複数のコマンドエイリアス zsh環境で引数を持ったコマンドを作る 【時短】zshでエイリアスを設定する方法","link":"/2021/02/16/zsh%E3%81%A8alias%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【Android Studio】build.Gradleが２つあるのはなぜなのか","text":"AndroidStudioでプロジェクトを生成すると、「build.Gradle」というファイルが2つ生成される ルート直下の「build.gradle」(Project:プロジェクト名)このファイルは、すべてのサブプロジェクトとモジュールに共通する設定項目を追加することができる最上位のビルドファイル 【例】 : サブプロジェクトにインストールしたいライブラリが含まれているリポジトリ appファイル直下の「build.gradle」(Module : app)サブプロジェクトごとに必要な依存関係やビルド設定を記述する 【例】 : 使用したいライブラリのURI","link":"/2021/03/15/%E3%80%90Android-Studio%E3%80%91build-Gradle%E3%81%8C%EF%BC%92%E3%81%A4%E3%81%82%E3%82%8B%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%9C%E3%81%AA%E3%81%AE%E3%81%8B/"},{"title":"【CSS】マージン・パディング・ボーダーについて","text":"マージンについて マージンとは日本語で余白 要素の一番外側に位置する領域を意味する background-colorを設定している場合、色の領域は広がらないマージンとマージンは相殺するmargin-bottom:20pxとmargin-top:30pxが上下に並んでいる場合、2つの要素の距離は２つの値を足した50pxにはならず、重なった部分のマージンは重なったままになるので、結果は30pxのマージンが取られた状態になる 記述する値によって設定できるマージンが変わる 1つの値を設定する 上下左右のマージンが同じだけ設定される12&lt;!-- 上下左右全て100px分のマージンが設定される --&gt;margin: 100px; 2つの値を設定する 上下、左右のマージンが別々に設定される12&lt;!-- 上下:100px,左右:50pxのマージンが設定させる --&gt;margin: 100px 50px; 3つの値を設定する 上、左右、下のマージンが別々に設定される12&lt;!-- 上:100px,左右:50px,下200pxのマージンが設定される --&gt;margin: 100px 50px 200px; 個別に値を設定する 上の３つとは少し記述の仕方が変わっる12345&lt;!-- 明示的に設定する --&gt;margin-top: 100px;margin-right: 100px;margin-bottom: 50px;margin-left: 100px; パディングについて マージンの１つ内側の余白を設定する background-colorを設定している場合、色の領域も広がる width属性とpadding-width属性はpaddingのピクセル数に対する値ではなく、画面に対する値を設定している - なので、paddingを広げても文字は広く表示されない 記述する値によって設定できるパディングが変わる 1つの値を設定する 上下左右のパディングが同じだけ設定される12&lt;!-- 上下左右全て100px分のパディングが設定される --&gt;padding: 100px; 2つの値を設定する 上下、左右のパディングが別々に設定される12&lt;!-- 上下:100px,左右:50pxのパディングが設定させる --&gt;padding: 100px 50px; 3つの値を設定する 上、左右、下のパディングが別々に設定される12&lt;!-- 上:100px,左右:50px,下200pxのパディングが設定される --&gt;padding: 100px 50px 200px; 個別に値を設定する 上の３つとは少し記述の仕方が変わっる12345&lt;!-- 明示的に設定する --&gt;padding-top: 100px;padding-right: 100px;padding-bottom: 50px;padding-left: 100px; ボーダーについて マージンとパディングの境界線の設定ができる 記述する値によって設定できるボーダーが変わる 3つの値を設定する 線の太さ、線の色、線の種類を設定する12&lt;!-- 線の太さ:1px,線の色:黒,線の種類:実線--&gt;border: 1px black solid; 各要素を別々にかつ、上下左右を変えて設定できる 設定方法が細かくあるので、参考リンクだけを紹介する w3schools border-style ブラウザのデフォルトのマージンやパディングを無効にする12345&lt;!-- bodyタグに対して設定する --&gt;bodu{ margin: 0; padding: 0;}","link":"/2021/03/06/%E3%80%90CSS%E3%80%91%E3%83%9E%E3%83%BC%E3%82%B8%E3%83%B3%E3%83%BB%E3%83%91%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%83%BB%E3%83%9C%E3%83%BC%E3%83%80%E3%83%BC%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【Git】HEAD^を指定したときに「no matches found&#x2F; HEAD^」が出る時の対処法","text":"目次 原因 setopt extended_globとはなにか 解決策 エスケープシーケンスを使用する 原因zshの設定が問題らしく、設定ファイル(.zshrc)にsetopt extended_globを記述している場合に起こる。 setopt extended_globとはなにか除外パターン、大文字小文字同一視などの、拡張表記が可能になる。詳しくは以下リンク先のサイトがわかりやすかった。 https://gihyo.jp/dev/serial/01/zsh-book/0004 解決策エスケープシーケンスを使用する1git checkout HEAD\\^","link":"/2021/03/21/%E3%80%90Git%E3%80%91HEAD-%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E3%80%8Cno-matches-found-HEAD-%E3%80%8D%E3%81%8C%E5%87%BA%E3%82%8B%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/"},{"title":"【CSS】positionプロパティについて","text":"postion属性とは 要素の位置を指定するための属性 指定する方法の種類 relative : 相対位置への配置 その要素が本来配置される位置からの相対位置 absolute : 絶対位置への配置 画面上の座標 fixed : 絶対位置への配置 + スクロールされても位置が固定 指定方法 まずは位置の指定方法を記述する1position: relative; どちらの方向にどれだけ動かすかを指定する1top: 200px; まとめると1234.test{ position: relative; top: 200px;} relativeとabsoluteの違いイメージコード12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;position&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .first-section{ background: lightgreen; width: 100px; height: 100px; position:relative; left:200px; top:200px; } .second-section{ background: pink; width: 100px; height: 100px; position:absolute; left:200px; top:200px; } .third-section{ background: red; width: 100px; height: 100px; position:fixed; left:400px; top:400px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;a&lt;/p&gt; &lt;p&gt;a&lt;/p&gt; &lt;p&gt;a&lt;/p&gt; &lt;p&gt;a&lt;/p&gt; &lt;p&gt;a&lt;/p&gt; &lt;div class=&quot;first-section&quot;&gt; &lt;p&gt;1&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;second-section&quot;&gt; &lt;p&gt;2&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;third-section&quot;&gt; &lt;p&gt;3&lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 便利な属性奥行きの指定z-index属性を使って指定する - 大きい値を設定したスタイルを適応した要素が上に描画される 1234567891011.test{ position: relative; top: 200px; z-index: 1;}.test2{ &lt;!--こっちが上に表示させる--&gt; position: relative; top: 200px; z-index: 2;} 透明度の指定 opacity属性を使って0~1までの間で指定する12345.test{ position: relative; top: 200px; opasity: 0.5; &lt;!--透明度を指定--&gt;}","link":"/2021/03/05/%E3%80%90CSS%E3%80%91position%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【Git】Git独自のaliasを設定して長いコマンドを短くする","text":"目次 設定方法 1. コマンドから設定する 2. configファイルを編集する 設定方法1. コマンドから設定するコマンドラインから、git configを使用して設定する方法 1git config --global alias.設定したいコマンド名 &quot;短くしたいコマンド&quot; 今回は、コミット履歴(log)をグラフ表示(–graph)しながら、一行(–oneline)ですべてのブランチ(–all)のコミットを表示するコマンドをlogaとして登録します。 1$ git config --global alias.loga &quot;log --graph --oneline --all&quot; 2. configファイルを編集する設定ファイルを開くこまどで.gitconfigを開きます。 1$ git config --global --edit [alias]という記述がなければ一緒に追記してください。 12[alias] loga = log --graph --oneline --all","link":"/2021/03/31/%E3%80%90Git%E3%80%91Git%E7%8B%AC%E8%87%AA%E3%81%AEalias%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%A6%E9%95%B7%E3%81%84%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E7%9F%AD%E3%81%8F%E3%81%99%E3%82%8B/"},{"title":"【Git】add(staging)の必要性について","text":"目次 何も意識せずに、Gitを使っているとすごい面倒くさい「git add」 なぜ、git addはなぜ必要なのか Gitの思想 バージョン管理の容易さ 何も意識せずに、Gitを使っているとすごい面倒くさい「git add」Gitはバージョン管理ができるツールとして知っているが、初めてGitをプロジェクトに導入したとき、ただのちょっと機能が付属されたファイル共有ツールに成り下がってしまうケースがあったので、Gitの使う上で一番何故あるのか理解しづらい、git addの重要性について再度考え直すために、色々調べてまとめてみました。 なぜ、git addはなぜ必要なのかGitの思想 更新したファイルすべてをgit addして、それをcommit時のコメントで、細かく何を変更したかを書いていましたが、それは本来のgitの思想と乖離しています。 バージョン管理の容易さ Gitはバージョン管理ツールなので、バージョンの変更を簡単にできます。しかし、変更をまとめてコミットしてしまうと、コミットを探して変更した箇所を更に探す必要が出てきてしまうので、せっかくのバージョン管理の恩恵が薄くなってしまいます。 前述の理由から、git add はファイル変更点を１変更１コミットにできるように、複数変更点があった場合の変更点の一時待機場所として、１つの変更だけをキャッシュするための場所として使用するためにあります。","link":"/2021/03/22/%E3%80%90Git%E3%80%91add-staging-%E3%81%AE%E5%BF%85%E8%A6%81%E6%80%A7%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【Git】git-flowとGitHub-flowの違いについて","text":"目次 git-flow 最初はからのコミットか始める すべての機能の開発はdevelopブランチからの分岐によって開始する developブランチがリリースできる段階のクオリティになったらreleaseブランチにマージする リリース後の後始末 リリース後に見つかったバグの修正はmasterブランチから分岐する git-flow masterとdevelopブランチは消去されることがない masterブランチに含まれるのは、製品としてリリースしたコード developブランチに含まれるのは、今後リリースされる予定のコード 開発途中ではあるが、単体の機能としてある程度完成されていたり、製品として組み込む予定ので完成している機能が組み込まれたブランチ 最初はからのコミットか始める --allow-emptyスイッチを使用して、ファイルの無いコミットをする。 git-flowのmasterとdevelopブランチの始点になるコミットになる すべての機能の開発はdevelopブランチからの分岐によって開始する 新機能開発時は新しいブランチをdevelopから分岐させて作成する コードの組み込み準備が完了したら、develpにマージする マージ時はfast-forward mergeを行わないように--no-ffスイッチをつける developへのマージ後は使用していた新機能開発ブランチを消去する developブランチがリリースできる段階のクオリティになったらreleaseブランチにマージする developブランチで単体テストや簡易的な結合テストが完了したら、developブランチをreleaseブランチを作成してそこにマージする releaseブランチでは、最終テストやその他のバグの修正でコミットを追加することができる 本格的なテストのバグ修正はreleaseブランチで行うことになる すべてのコードの修正が終わり次第、masterにマージする masterブランチで表示されるコミットは、リリースしたコードのみ(修正コミットは入っていない) マージ時はfast-forward mergeを行わないように--no-ffスイッチをつける masterブランチのリリースコミットにはタグをつけることが規約で決まっている リリース後の後始末 releaseブランチには、修正コミットが入っている可能性があるので、developブランチへのコミットをdevelopブランチへマージする マージ時はfast-forward mergeを行わないように--no-ffスイッチをつける masterブランチ,developブランチにマージが完了した、releaseブランチは消去する リリース後に見つかったバグの修正はmasterブランチから分岐する リリースしたコードを修正したい場合、masterブランチのリリースコミットから分岐したブランチを作成する この時のブランチの名前はhotfix-xxxにするという規約がある 修正後は、masterブランチ,developブランチにマージを行い、hotfix-xxxブランチは消去する","link":"/2021/03/23/%E3%80%90Git%E3%80%91git-flow%E3%81%A8GitHub-flow%E3%81%AE%E9%81%95%E3%81%84%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【Git】git logの色々な表示のさせ方","text":"目次 はじめに この記事で紹介するスイッチ 普通に「git log」 表示される内容 短く表示させる「git log –oneline」 表示される内容 変更されたファイルを表示する「git log –stat」 表示される内容 短く表示させつつ、変更されたファイルを表示する「git log –oneline –stat」 表示される内容 視覚的にわかりやすく表示する「git log –graph」 表示される内容 短く視覚的に表示する「git log –oneline –graph」 表示される内容 すべてのブランチを見る「git log –all」 表示される内容 短く視覚的に表示する「git log –oneline –all」 表示される内容 はじめにここで紹介しているスイッチ(–から始まる文節)はすべて組み合わせて使用する事ができるので、適時用途にあった表示のさせ方で組み合わせるといいと思います。 この記事で紹介するスイッチ --oneline : 短く表示する --stat : 変更のあったファイル名と、ファイル数を表示する --graph : 視覚的に表示する --all : すべてのブランチを表示する 普通に「git log」表示される内容 SHA1 ブランチのHEADの場合、ブランチの情報 コミットしたユーザー名``メールアドレス コミットした日付 コミットメッセージ全文 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566$ git log commit c7cfec983e47d507b89726b1fcb8550ea71eee95 (HEAD -&gt; master, beginning/master, beginning/HEAD)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 23:20:18 2021 +0900 A small update to readme.commit 895ded5c28bfa9848f647eff1339dcc763f910d1Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 20:20:18 2021 +0900 Adding printf. This is to make the output a little more human readable. printf is part of BASH, and it works just like C's printf() function.commit 5ab2e41e28507359a1774e39be287406707d3ec8Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 09:20:18 2021 +0900 Adding two numbers.commit 004e3a3d1f942361d81ec6599e6bff0f6c0d7be9 (beginning/another_fix_branch)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 08:20:18 2021 +0900 Renaming c and d.commit fd3bb1d565b69ca19832f8892030a40d6961076cAuthor: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 07:20:18 2021 +0900 Removed a and b.commit 6e0d6f43f601fac104439dd778160aeef0ab9910Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Thu Mar 11 09:20:18 2021 +0900 Adding readme.txtcommit a343843ff5496451e855e4064a4c138cc7b3105e (tag: four_files_galore)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Tue Mar 9 09:20:18 2021 +0900 Adding four empty files.commit 834601bc8cfa381dbb3ffc4a30245646194b297bAuthor: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Tue Mar 9 08:20:18 2021 +0900 Adding b variable.commit 68d38c6348b0cf53655e01ef9c8238457b709c71Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Tue Mar 9 07:20:18 2021 +0900 This is the second commit.commit d314c772bb58ed3d959bf658265986b7c50bcd61Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Tue Mar 9 05:20:18 2021 +0900 This is the first commit. 短く表示させる「git log –oneline」表示される内容 ７桁に短縮されたSHA1 ブランチのHEADの場合、ブランチの情報 コミットコメント(１行目のみ) 123456789101112$ git log --onelinec7cfec9 (HEAD -&gt; master, beginning/master, beginning/HEAD) A small update to readme.895ded5 Adding printf.5ab2e41 Adding two numbers.004e3a3 (beginning/another_fix_branch) Renaming c and d.fd3bb1d Removed a and b.6e0d6f4 Adding readme.txta343843 (tag: four_files_galore) Adding four empty files.834601b Adding b variable.68d38c6 This is the second commit.d314c77 This is the first commit. 変更されたファイルを表示する「git log –stat」表示される内容 git logを使用したときに表示される情報 変更されたファイル名とカウント 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273$ git log --statcommit c7cfec983e47d507b89726b1fcb8550ea71eee95 (HEAD -&gt; master, beginning/master, beginning/HEAD)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 23:20:18 2021 +0900 A small update to readme. readme.txt | 1 + 1 file changed, 1 insertion(+)commit 895ded5c28bfa9848f647eff1339dcc763f910d1Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 20:20:18 2021 +0900 Adding printf. This is to make the output a little more human readable. printf is part of BASH, and it works just like C's printf() function. math.sh | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)commit 5ab2e41e28507359a1774e39be287406707d3ec8Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 09:20:18 2021 +0900 Adding two numbers. math.sh | 4 +++- 1 file changed, 3 insertions(+), 1 deletion(-)commit 004e3a3d1f942361d81ec6599e6bff0f6c0d7be9 (beginning/another_fix_branch)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 08:20:18 2021 +0900 Renaming c and d. c =&gt; another_rename | 0 d =&gt; renamed_file | 0 2 files changed, 0 insertions(+), 0 deletions(-)commit fd3bb1d565b69ca19832f8892030a40d6961076cAuthor: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 07:20:18 2021 +0900 Removed a and b. a | 0 b | 0 2 files changed, 0 insertions(+), 0 deletions(-)commit 6e0d6f43f601fac104439dd778160aeef0ab9910Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Thu Mar 11 09:20:18 2021 +0900 Adding readme.txt readme.txt | 1 + 1 file changed, 1 insertion(+)commit a343843ff5496451e855e4064a4c138cc7b3105e (tag: four_files_galore)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Tue Mar 9 09:20:18 2021 +0900 Adding four empty files. a | 0 b | 0... 短く表示させつつ、変更されたファイルを表示する「git log –oneline –stat」表示される内容 git log --onelineを使用したときに表示される情報 変更されたファイル名とカウント 12345678910111213141516171819202122232425262728293031323334353637$ git log --oneline --statc7cfec9 (HEAD -&gt; master, beginning/master, beginning/HEAD) A small update to readme. readme.txt | 1 + 1 file changed, 1 insertion(+)895ded5 Adding printf. math.sh | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)5ab2e41 Adding two numbers. math.sh | 4 +++- 1 file changed, 3 insertions(+), 1 deletion(-)004e3a3 (beginning/another_fix_branch) Renaming c and d. c =&gt; another_rename | 0 d =&gt; renamed_file | 0 2 files changed, 0 insertions(+), 0 deletions(-)fd3bb1d Removed a and b. a | 0 b | 0 2 files changed, 0 insertions(+), 0 deletions(-)6e0d6f4 Adding readme.txt readme.txt | 1 + 1 file changed, 1 insertion(+)a343843 (tag: four_files_galore) Adding four empty files. a | 0 b | 0 c | 0 d | 0 4 files changed, 0 insertions(+), 0 deletions(-)834601b Adding b variable. math.sh | 1 + 1 file changed, 1 insertion(+)68d38c6 This is the second commit. math.sh | 1 + 1 file changed, 1 insertion(+)d314c77 This is the first commit. math.sh | 1 + 1 file changed, 1 insertion(+) 視覚的にわかりやすく表示する「git log –graph」表示される内容 git logを使用したときに表示される情報 コミットやブランチの流れをASCII文字で表現する 12345678910111213141516171819202122232425262728293031323334353637383940414243$ git log --graph* commit c7cfec983e47d507b89726b1fcb8550ea71eee95 (HEAD -&gt; master, beginning/master, beginning/HEAD)| Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;| Date: Fri Mar 12 23:20:18 2021 +0900|| A small update to readme.|* commit 895ded5c28bfa9848f647eff1339dcc763f910d1| Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;| Date: Fri Mar 12 20:20:18 2021 +0900|| Adding printf.|| This is to make the output a little more human readable.|| printf is part of BASH, and it works just like C's printf()| function.|* commit 5ab2e41e28507359a1774e39be287406707d3ec8| Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;| Date: Fri Mar 12 09:20:18 2021 +0900|| Adding two numbers.|* commit 004e3a3d1f942361d81ec6599e6bff0f6c0d7be9 (beginning/another_fix_branch)| Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;| Date: Fri Mar 12 08:20:18 2021 +0900|| Renaming c and d.|* commit fd3bb1d565b69ca19832f8892030a40d6961076c| Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;| Date: Fri Mar 12 07:20:18 2021 +0900|| Removed a and b.|* commit 6e0d6f43f601fac104439dd778160aeef0ab9910| Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;| Date: Thu Mar 11 09:20:18 2021 +0900|| Adding readme.txt|... 短く視覚的に表示する「git log –oneline –graph」表示される内容 git log --onelineを使用したときに表示される情報 コミットやブランチの流れをASCII文字で表現する 123456789101112$ git log --oneline --graph* c7cfec9 (HEAD -&gt; master, beginning/master, beginning/HEAD) A small update to readme.* 895ded5 Adding printf.* 5ab2e41 Adding two numbers.* 004e3a3 (beginning/another_fix_branch) Renaming c and d.* fd3bb1d Removed a and b.* 6e0d6f4 Adding readme.txt* a343843 (tag: four_files_galore) Adding four empty files.* 834601b Adding b variable.* 68d38c6 This is the second commit.* d314c77 This is the first commit. すべてのブランチを見る「git log –all」表示される内容 git logを使用したときに表示される情報 カレントブランチ以外のブランチのlogを一緒に表示する 12345678910111213141516171819202122232425262728293031323334353637383940414243$ git log --oneline --graphcommit c7cfec983e47d507b89726b1fcb8550ea71eee95 (HEAD -&gt; master, beginning/master, beginning/HEAD)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 23:20:18 2021 +0900 A small update to readme.commit 91d6184f4c6da852bbcddf9d3c4155983a416d35 (beginning/new_feature)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 22:20:18 2021 +0900 Starting a second new filecommit af9aa8ef34be4a5f1c36eb06a560638cc730c814Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 21:20:18 2021 +0900 Adding a new file to a new branchcommit 895ded5c28bfa9848f647eff1339dcc763f910d1Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 20:20:18 2021 +0900 Adding printf. This is to make the output a little more human readable. printf is part of BASH, and it works just like C's printf() function.commit 5ab2e41e28507359a1774e39be287406707d3ec8Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 09:20:18 2021 +0900 Adding two numbers.commit 004e3a3d1f942361d81ec6599e6bff0f6c0d7be9 (beginning/another_fix_branch)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 08:20:18 2021 +0900 Renaming c and d.... 短く視覚的に表示する「git log –oneline –all」表示される内容 git log --onelineを使用したときに表示される情報 カレントブランチ以外のブランチのlogを一緒に表示する 1234567891011121314$ git log --oneline --allc7cfec9 (HEAD -&gt; master, beginning/master, beginning/HEAD) A small update to readme.91d6184 (beginning/new_feature) Starting a second new fileaf9aa8e Adding a new file to a new branch895ded5 Adding printf.5ab2e41 Adding two numbers.004e3a3 (beginning/another_fix_branch) Renaming c and d.fd3bb1d Removed a and b.6e0d6f4 Adding readme.txta343843 (tag: four_files_galore) Adding four empty files.834601b Adding b variable.68d38c6 This is the second commit.d314c77 This is the first commit.","link":"/2021/03/26/%E3%80%90Git%E3%80%91git-log%E3%81%AE%E8%89%B2%E3%80%85%E3%81%AA%E8%A1%A8%E7%A4%BA%E3%81%AE%E3%81%95%E3%81%9B%E6%96%B9/"},{"title":"cssにつて","text":"CSSとは何か 正式名称 : Cascading Syle Sheets(カスケーディングスタイルシート) ページレイアウトを形成するためのスタイルシート HTML = マークアップ,CSS = レイアウト 記述方法の種類 インラインCSS : body内の各種タグの中に記述する インラインスタイルシートと呼ぶ場合もある 内部CSS : headタグの中に記述 内部スタイルシートと呼ぶ場合もある 外部ファイル(.css) 外部スタイルシートと呼ぶ場合もある コンテンツとデザインの分離ができるので、外部ファイルに記述するのが基本 1.インラインCSS : body内の各種タグの中に記述する 一つ一つのタグに設定する必要がある インラインCSSと呼ばれる書き方で、直接タグの中でstyle属性を指定する 1style=属性:&quot;属性値&quot; color属性で色を変える例 1&lt;p style=&quot;color:blue&quot;&gt;今回は、新しくリリースするプロダクトの紹介をします&lt;/p&gt; 複数の属性指定したい場合、;を入力することで指定できる 1&lt;p style=&quot;color:blue;font-size:300%&quot;&gt;今回は、新しくリリースするプロダクトの紹介をします&lt;/p&gt; 2.内部CSS : headタグ内に記述する headタグの内部に記述するCSS 具体的にはheadブロック内にstyleブロックを作成し、そこにスタイルを記述する12345678910&lt;html&gt; &lt;head&gt; &lt;style&gt; &lt;!--ここにスタイルを記述する--&gt; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; スタイルの記述には２通りの方法がある タグ全体に適応する 指定した領域のみに適応する 1. タグ全体に適応する styleブロック内にタグ名のブロックを作り、そこにスタイルを記述する 複数のスタイルを記述する場合、;で区切る1234567&lt;style&gt;&lt;!--pタグ内の全てのテキストにここに記述したレイアウトが適応される--&gt; p{ color:blue; font-size:150%; }&lt;/style&gt; 2. 指定した領域のみに適応する class属性を使用する 複数のタグに適応できる id属性を使用する １つのタグのみに適応できる span属性を使用する 特定の文字列適応する 1. class属性を使用する class属性にクラス名を指定し、styleブロックに.クラス名でスタイルを記述する 同一のクラス名を他のタグにも割り当てることができる123456789101112131415&lt;html&gt; &lt;head&gt; &lt;style&gt; .A{ color:blue; font-size:150%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class=&quot;A&quot;&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p class=&quot;A&quot;&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p&gt; クラス名を指定していません&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 2. id属性を使用する id属性を定義してid名を指定して、styleブロックに#id名でスタイルを記述する 1つのタグにしか適応できない123456789101112131415&lt;html&gt; &lt;head&gt; &lt;style&gt; #B{ color:blue; font-size:150%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 id=&quot;B&quot;&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p&gt;&lt;クラス名を指定していません/p&gt; &lt;p&gt; クラス名を指定していません&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 3. span属性を使用する spanタグ(&lt;span&gt;&lt;/span&gt;)を定義してclass属性にクラス名を指定して、styleブロックに.クラス名でスタイルを記述する class idとの違いは、タグに対するレイアウトではなく、文字列に対するレイアウトである点123456789101112131415&lt;html&gt; &lt;head&gt; &lt;style&gt; .C{ color:blue; font-size:150%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p&gt;クラス名を&lt;span class=&quot;C&quot;&gt;指定&lt;/span&gt;していません&lt;/p&gt; &lt;p&gt;クラス名を指定していません&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;","link":"/2021/03/02/CSS%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【Git】gitが認識しているファイルを自動でステージングしながらコミットする","text":"目次 git commit 時に-aスイッチを使う git commit 時に-aスイッチを使うgit addをするのが面倒くさいときは、commitと同時にステージンをするためのコマンドが用意されている - -aスイッチで、自動ステージングされるのは、すでにGitが認識している(新規追加ではない)ファイルのみを自動でステージングする 1$ git commit -a -m &quot;自動ステージングコミット&quot;","link":"/2021/03/24/%E3%80%90Git%E3%80%91git%E3%81%8C%E8%AA%8D%E8%AD%98%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E8%87%AA%E5%8B%95%E3%81%A7%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0%E3%81%97%E3%81%AA%E3%81%8C%E3%82%89%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%99%E3%82%8B/"},{"title":"【Git】コミットを探す","text":"目次 コミットメッセージから探す コミットした人物から探す 実行例 コミットメッセージから探す--grepスイッチを使用して=に指定した文字列と一致するコミットメッセージのコミットを表示することができます。 1$ git log --grep=test コミットした人物から探すshortlogでそのリポジトリにコミットした人ごとのコミットを表示して、その後--atherスイッチで人物を指定して指定した人物のコミットだけを表示させる shortlogでメールアドレスを表示させるには-eスイッチをつける 実行例ユーザーごとにコミットが表示される 1234567891011$ git shortlogDaiki Iijima(10) .... .... ....Kojima Yui(21) ... ... ... 個人を指定して表示させる 1$ git log --author=&quot;Daiki Iijima&quot;","link":"/2021/04/03/%E3%80%90Git%E3%80%91%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%82%92%E6%8E%A2%E3%81%99/"},{"title":"【Git】pullは何をしているのか","text":"目次 pullとは fetchとmerge pullは内部で何をしているのか pullとはpullとは、ローカルリポジトリとリモートリポジトリを同期させる行為です。 git push とgit pull は対になっているコマンドに感じますが、実際に内部で行っている処理は、git pullのほうが複雑です。 git pushはクリーン(fast-forward)マージを強制されます。しかし、git pullの場合はクリーンマージができないケースがあります。(内部でコミットしている場合) fetchとmerge fetch : リモートリポジトリのリファレンス(ブランチやタグ)をローカルリポジトリのリモート追跡ブランチ(FETCH_HEADの位置)を更新します。 merge : 今いるブランチへ他のブランチを取り込みます。 pullは内部で何をしているのかgit pullでは、git fetchからgit merge FETCH_HEADの順で処理をしています。 なぜ、mergeが発生するのかというと、gitではリモートの状態をローカル環境でリモート追跡ブランチとして、管理しています。このリモート管理ブランチの先頭をFETCH_HEADとして定義しています。 つまり、リモート追跡ブランチを今いるブランチへマージすることで、リモートリポジトリのFETCH_HEAD`の次のコミットを作ることで、ブランチを同期させています。","link":"/2021/04/02/%E3%80%90Git%E3%80%91pull%E3%81%AF%E4%BD%95%E3%82%92%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B/"},{"title":"【Git】「waring&#x2F; LF will be replaced by CRLF in XXX」が出た時の対処法","text":"目次 この警告はなにか LF改行コードとCRLF改行コードとはなにか 解決策 参考 この警告はなにか GitがLF改行コードをCRLF改行コードに自動変換したことによる警告 WindowsでGitを使用している場合、git addしたときに表示されることがある LF改行コードとCRLF改行コードとはなにか LF改行コード LF = Line Feed(改行) カーソルを新しい行に移動させる Unix,Linux,macOS(9以降)などのOSで使用される改行コード CRLF改行コード CRLF = CR + LF カーソルを左端の位置に戻し、新しい行に移動すること WindowsOSで使用されている改行コード CR改行コード CR = Carriage Return(復帰) カーソルを左側に戻す macOS(9以前)で使用されている改行コード 解決策windows と widnowsのやり取りしかしない場合は、以下のコードでwaringを出さないような設定にできるが、CRLF改行コードを使っていないOSとのやり取りがある場合、行末で問題が発生する可能性を検知できなくなる gitのconfigの改行コード自動変換プロパティをオフにする 1git config --global core.autoCRLF false 参考 LFをCRLFに置き換えてもいいのか 改行コードについて LF will be reqlacedについて","link":"/2021/03/19/%E3%80%90Git%E3%80%91%E3%80%8Cwaring-LF-will-be-replaced-by-CRLF-in-XXX%E3%80%8D%E3%81%8C%E5%87%BA%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/"},{"title":"【Blog】GoogleSerchConsoleにブログを認識させる","text":"目次 サイトからHTMLファイルをダウンロードする (hexo)ダウンロードしたファイルを配置する ファイルをアップロードする google serch consoleで認識する サイトからHTMLファイルをダウンロードするGoogle Serch Console URLプレフィックスを選択して、入力欄に自分のブログを入力 所有権の確認ウィンドウが表示されるので、htmlファイル内のファイルをダウンロードで表示されているファイルをダウンロードする (hexo)ダウンロードしたファイルを配置するhexoの場合は、以下ディレクトリに配置する 1リポジトリ/public/ダウンロードした.html ファイルをアップロードするブログを更新するのと同じ用に、デプロイする google serch consoleで認識するもう一度、Google Serch Consoleに戻り、確認ボタンを押して、確認が取れました画面が出ればOK","link":"/2021/04/01/%E3%80%90Blog%E3%80%91GoogleSerchConsole%E3%81%AB%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E8%AA%8D%E8%AD%98%E3%81%95%E3%81%9B%E3%82%8B/"},{"title":"【Git】コマンドラインの構文","text":"コマンドラインの構文の概要 git : 必須 [スイッチ] : オプション &lt;コマンド&gt; : オプション &lt;引数&gt;: オプション1git [スイッチ]&lt;コマンド&gt;&lt;引数&gt; ヘルプにも同じような構文の記述がされている12345usage: git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;] [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare] [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;] &lt;command&gt; [&lt;args&gt;] コマンド 説明 参考 –version バージョン確認 –help 概要と最も一般的に使用されるコマンドのリストを出力 -C カレントディレクトリではなくに指定したディレクトリでGit実行する -c = 設定ファイルのに指定した項目の値をで設定した値を上書きする –exec-path[=] Gitのコアファイルのパスを出力する。パスを設定することもできる。 –html-path ドキュメントファイルの補完されているパスを出力する –man-path Gitのmanファイルが格納されているパスを出力する –info-path Gitのドキュメントを文書かしたファイルがあるパスを出力する(私の環境ではパスは表示されたが、パスが存在しなかった) -P | –paginate ページャーに出力をパイプする -p | –no-paginate ページャーに出力をパイプしないようにする –no-replace-objects Gitオブジェクトを置換しない https://git-scm.com/docs/git-replace –bare ベアリポジトリとして扱う https://qiita.com/devzooiiooz/items/56a02342d9d65d79f6c3https://cpplover.blogspot.com/2015/04/git10linus-torvals.html –git-dir= リポジトリへのパスを設定する(環境変数 GIT_DIR を設定するのと同じ) –work-tree= 作業ツリーへのパスを設定する(環境変数 GIT_WORK_TREE や設定変数 core.worktree を設定するのと同じ) –namespace= Gitの名前空間を設定する(環境変数 git_namespace を設定するのと同じ) ダッシュ(-)1個とダッシュ(–)の使い分け 1つ(-) : １文字のスイッチ(省略型) 2つ(–) : 略さずに完全に記述する長いスイッチ","link":"/2021/03/08/%E3%80%90Git%E3%80%91%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%AE%E6%A7%8B%E6%96%87/"},{"title":"【Git】タグの扱い方","text":"タグはなんのためにあるのかコミットを指定するためにSHA 1IDを使用するが、毎回選択するのは面倒くさいし間違える可能性があるので、よく使う可能性のあるコミットに命名することで、いちいちSHA 1IDを指定しなくてよくできる コミットにタグを追加するタグをつける1git tag タグ名 タグをつけたいSHA1 タグをつけるときは、-mスイッチを使用すればメッセージをつけることもできる1git tag タグ名 -m &quot;コメント&quot; タグをつけたいSHA1 タグを消去する1git tag -d タグ名 これが表示されれば成功 1Deleted tag 'タグ名' (was SHA1) タグの一覧を表示する1git tag","link":"/2021/03/13/%E3%80%90Git%E3%80%91%E3%82%BF%E3%82%B0%E3%81%AE%E6%89%B1%E3%81%84%E6%96%B9/"},{"title":"【Git】ファイル名が日本語のときに文字化けするのを防ぐ","text":"目次 文字化けの原因 対処方法 文字化けの原因日本語ファイル名の文字化けは、diffやstatusコマンドを使用するときに表示されます。つまり、ファイルパスを表示するときに表示されているということになります。 ファイルパスを出力するコマンドは、（-zオプションを付けてない時は）パスの中にある”unusual”な文字をバックスラッシュ付きのダブルクオーテーションで囲みます。 unusualとは日本語訳で、珍しいという意味になるので、英語圏の方々が見ると日本語は珍しい言葉に当たるということでしょう。 対処方法unusualな文字を特別な加工せずにそのまま出してもらえる用に設定を変更します。 --globalスイッチを使用しているので、この設定はGitシステム全体に適応されます。今いるディレクトリのgitシステムのみに適応させたい場合は、--localスイッチに置き換えて使用してください。 1git config --global core.quotepath false","link":"/2021/04/12/%E3%80%90Git%E3%80%91%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%81%8C%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E3%81%A8%E3%81%8D%E3%81%AB%E6%96%87%E5%AD%97%E5%8C%96%E3%81%91%E3%81%99%E3%82%8B%E3%81%AE%E3%82%92%E9%98%B2%E3%81%90/"},{"title":"【Git】ファイルの巻き戻し方法","text":"目次 ステージングエリアの変更を取り消す ファイルを最後に変更(commit)した状態に戻す ステージングエリアの変更を取り消すgit addの反対のことをする必要があるので、git resetを使用する。ステージングの取り消しなので、作業ディレクトリのファイルは変化しない。 git reset を使ってファイルのステージングを取り消す 12$ git add test.txt$ git reset test.txt ファイルを最後に変更(commit)した状態に戻すgit commitしたということは、ファイルの状態を保存してあるので、git checkoutを使えば戻すことができる。 git checkout を使用して、ファイルの中身を最後に変更した状態に戻す 1$ git checkout ファイル名 作業エリアすべてのファイルを最後のコミットの状態に戻す 1$ git checkout .","link":"/2021/03/30/%E3%80%90Git%E3%80%91%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%B7%BB%E3%81%8D%E6%88%BB%E3%81%97%E6%96%B9%E6%B3%95/"},{"title":"【Git】コミットメッセージのテンプレートを設定する","text":"目次 コミットテンプレートとは テンプレートファイルの用意 使用例 コミットテンプレートとはgit のコミット時に自動で生成されるコメントを設定することができる機能です。プロジェクト内でコミットメッセージのフォーマットを統一したい場合に使用することがありました。 テンプレートファイルの用意任意の場所にテンプレートファイルを用意し、git config でそのファイルをセットする 12$ touch ~/.gitmessage.txt$ git config --global commit.template ~/.gitmessage.txt 12$ touch ~/.gitmessage.txt$ git config --global commit.template ~/.gitmessage.txt 1234[ticket: #xxxx][Task/Bug] Subject linewhat happenedref : ticket link 使用例123456789101112131415$ git commit[ticket: #xxxx][Task/Bug] Subject linewhat happenedref : ticket link# Please enter the commit message for your changes. Lines starting# with '#' will be ignored, and an empty message aborts the commit.# On branch master# Changes to be committed:# (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)## modified: hoge/test.txt#","link":"/2021/04/13/%E3%80%90Git%E3%80%91%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B/"},{"title":"【Git】ブランチの差分を比較する","text":"目次 ブランチ間の差分をみる サンプル master..test test..master ファイル単位でブランチ間の違いをみる ブランチ間の差分をみるmasterブランチとtestブランチの差分を比較します。 masterとtestの間の.は2つ 比較したブランチをマージする場合、比較した結果通りの結果のマージが行われます。 1$ git diff master..test このときに重要なのは、..の両端にあるブランチ名の順序です。この順序を変えることで、どちらを元にした差分を表示させるかを決めることができます。 先(左側)に指定した方のブランチを基準に差分を表示します。 サンプルmasterブランチとtestブランチの比較を基準になるブランチを入れ替えて行います。 以下の手順で差分を発生させた状態を作り比較します。 masterブランチでファイル作成コミット(test.txtを作成して1追記) testブランチをHEADから作成 testブランチ内でファイルを編集コミット(test.txtに2を記述) masterブランチでファイルを編集コミット(test.txtに3を記述) 比較 master..test1234567891011$ git diff master..testdiff --git a/test.txt b/test.txtindex 2b2f2e1..1191247 100644--- a/test.txt+++ b/test.txt@@ -1,2 +1,2 @@ 1-3+2 test..master1234567891011$ git diff test..masterdiff --git a/test.txt b/test.txtindex 1191247..2b2f2e1 100644--- a/test.txt+++ b/test.txt@@ -1,2 +1,2 @@ 1-2+3 ファイル単位でブランチ間の違いをみるgit diff master...testを使用するとファイル内のどこがどう違うかを表示できるが、ざっくりとどのファイルに差分があるかだけをみたい場合は、--name-statusスイッチを使用すれば見ることができる。 123$ git diff --name-status master..testM test.txt このときにファイル名の右側に表示される文字の意味は以下になる 文字 意味(英語) 意味(日本語) A Added 追加 C Copied コピー D Deleted 消去 M Moudifed 変更 R Renamed リネーム","link":"/2021/04/06/%E3%80%90Git%E3%80%91%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%AE%E5%B7%AE%E5%88%86%E3%82%92%E6%AF%94%E8%BC%83%E3%81%99%E3%82%8B/"},{"title":"【Git】マージの中止の仕方","text":"目次 他のブランチを今いるブランチに取り込む(マージを実行する) マージ時のFast-forwardを行わないようにする マージを中断する 現在のマージ状態を確認する マージするブランチとの共通の親を表示させる 他のブランチを今いるブランチに取り込む(マージを実行する)mergeコマンドを使用して、今いるブランチに他のブランチを取り込みます この実行結果は一例です。 1234567$ git merge testUpdating ace754e..e187324Fast-forward test4 | 0 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 test4 マージ時のFast-forwardを行わないようにするmergeコマンドを使用して、特定の条件を満たすと、gitはデフォルトでFast-fowardというマージを行う Fast-forwardとは端的に説明すると、コミットをマージ履歴を残さずに、マージを行うこと --no-ffスイッチを使用することで、Fast-fowardを行わないように指定することができる 123456$ git merge --no-ff testMerge made by the 'recursive' strategy. ttt | 0 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 ttt マージを中断する--abortスイッチを使うことでマージを中断できる 1$ git merge --abort 現在のマージ状態を確認する--abortスイッチで中断する前に、diffコマンドで現状をチェックすることをおすすめする 123456789101112$ git diffdiff --cc test.txtindex 5584d95,928dd0d..0000000--- a/test.txt+++ b/test.txt@@@ -1,1 -1,1 +1,5 @@@++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD +テスト次郎++=======+ 侍ミーテスト太郎++&gt;&gt;&gt;&gt;&gt;&gt;&gt; test マージするブランチとの共通の親を表示させるブランチはどこかで共通祖先(the common ancestor)になるコミットがある ブランチの共通祖先を見つけるにはmerge-baseコマンドを使用する 123$ git merge-baseebfae41584feeb6055f2257e9eb409d97e76b9b9","link":"/2021/04/04/%E3%80%90Git%E3%80%91%E3%83%9E%E3%83%BC%E3%82%B8%E3%81%AE%E4%B8%AD%E6%AD%A2%E3%81%AE%E4%BB%95%E6%96%B9/"},{"title":"【Git】ベアリポジトリとはなにか","text":"目次 ベアリポジトリとは ベア(bare)とは つまり 作成時の注意点 ベアリポジトリとはベア(bare)とは露出した、本来あるべき物が無いという意味がある。 つまりこれをGitのシステムとして解釈すると、「本来あるべき物が無い」＝「ワーキングディレクトリがない」という意味になる。更新履歴のみを持っているリポジトリということになる リモートサーバー上に「ベアリポジトリ」を作成して、ローカルで編集したリポジトリを管理するために使う(GitHubと同じ動作をする) 作成時の注意点 ベアリポジトリを作る場合のファイル名は末尾に.gitをつける必要がある","link":"/2021/03/18/%E3%80%90Git%E3%80%91%E3%83%99%E3%82%A2%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%A8%E3%81%AF%E3%81%AA%E3%81%AB%E3%81%8B/"},{"title":"【Git】リポジトリ内で管理対象になっているファイルを確認する","text":"目次 リポジトリ内で管理されているファイルを確認する 基本構文 使用例 リポジトリ内で管理されているファイルを確認するls-treeを使用することでコミットに含まれるツリー(ファイル一覧)を確認できます 基本構文 ブランチ名を指定すると、そのブランチのHEADのコミットに含まれるファイル群が表示されます SHA1を指定すると、指定したSHA1のコミット内の含まれるファイル群が表示される 12$ git ls-tree ブランチ名$ git ls-tree SHA1 使用例実行結果 123456789101112$ git ls-tree master100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 3100644 blob 9f4d9b6328248146d622d475135476dd39543f36 &quot;3.6\\350\\252\\262\\351\\241\\214.md&quot;100644 blob 3a6f51dce8200cbb4b00e8512cecf78de0d4c1b9 &quot;7.5\\350\\252\\262\\351\\241\\214.md&quot;100644 blob 5f3cf6dbab2950c0b8fe5b6588e905047c06de1b &quot;8.5\\350\\252\\262\\351\\241\\214.md&quot;100644 blob 87b9d68a3644de01b90a511f5d680dc85d155433 &quot;9.5\\350\\252\\262\\351\\241\\214.md&quot;100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 another_rename100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 e100644 blob 233721e585933377d91bdbb18556a991dcca8c47 math.sh100644 blob 36de8a228bebca6e1d2d43e3fe7f2a260299a6d6 out.txt100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 test 表示される文字列の意味 1100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 3 100644 : 型(100644=通常ファイル,100755=実行可能ファイル) blob(ブロブ) : ファイルを表現するデータ構造名 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 : ファイルのSHA1 3 : ファイル名","link":"/2021/04/09/%E3%80%90Git%E3%80%91%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E5%86%85%E3%81%A7%E7%AE%A1%E7%90%86%E5%AF%BE%E8%B1%A1%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B/"},{"title":"【Git】各エリアを比較(diff)する","text":"目次 diffをそのまま使用した場合 ステージング済みファイルとコミット履歴ファイルとの差分を見たい場合 diffをそのまま使用した場合git diffは、ファイルの差分を比較する事のできるコマンドです。 git diffだけを使用すると、作業エリア(実際のディレクトリ内のファイル)とステージングエリア(git addした変更)の比較を行います。 git diff 1作業エリアのファイル &lt;-比較-&gt; ステージングエリアのファイル ステージング済みファイルとコミット履歴ファイルとの差分を見たい場合ステージング済みのファイル(git addしてあるファイル)と、コミット履歴(commit済み)のファイルの差分を比較したいときはgit diffコマンドに--stagedスイッチをつけることで比較を行えます。 git diff –staged 1作業エリアのファイル &lt;- 比較 -&gt; ステージング済みのファイル","link":"/2021/04/09/%E3%80%90Git%E3%80%91%E5%90%84%E3%82%A8%E3%83%AA%E3%82%A2%E3%82%92%E6%AF%94%E8%BC%83-diff-%E3%81%99%E3%82%8B/"},{"title":"【Git】小分けにcommitするために使えるコマンド","text":"目次 「git add .」したらどのファイルがステージングされるかをチェックする ハンクを活用する ハンクとは 実際に使ってみる 1. ファイルの編集 2. 1箇所の変更だけをコミットする 3. git diff –stagedでステージングされている変更を見てみる 「git add .」したらどのファイルがステージングされるかをチェックする git add --dray-run . 実際には、コミットされずgit add .をしたらどうなるのかを表示してくれる 1$ git add --dray-run . ハンクを活用するハンクとはハンクとはハンドピック(handpick)の略語で、同じファイル内で１つの修正のみの場合は、ファイルをそのままadd-&gt;commitすればいいが、実際は１つのファイル内で１つ以上の修正を行うケースが多い。それをステージング時に選択してコミットできるようにする機能。 実際に使ってみるサンプルのために以下の内容が記述されているhunkテストファイルを作成した。このファイルは事前にコミットしておく。 1234567これは元からあった文章1これは元からあった文章2これは元からあった文章3これは元からあった文章4これは元からあった文章5これは元からあった文章6これは元からあった文章7 1. ファイルの編集以下の内容にhunkテストを編集する 1234567これは元からあった文章1これは元からあった文章22これは元からあった文章3これは元からあった文章4これは元からあった文章5これは元からあった文章66これは元からあった文章7 2. 1箇所の変更だけをコミットする今回はこれは元からあった文章です22の変更だけをコミットしてみる 1234567891011121314151617$ git add -pdiff --git &quot;a/hunk\\343\\203\\206\\343\\202\\271\\343\\203\\210&quot; &quot;b/hunk\\343\\203\\206\\343\\202\\271\\343\\203\\210&quot;index 5c85024..af74fd5 100644--- &quot;a/hunk\\343\\203\\206\\343\\202\\271\\343\\203\\210&quot;+++ &quot;b/hunk\\343\\203\\206\\343\\202\\271\\343\\203\\210&quot;@@ -1,7 +1,7 @@ これは元からあった文章1-これは元からあった文章2+これは元からあった文章22 これは元からあった文章3 これは元からあった文章4 これは元からあった文章5-これは元からあった文章6+これは元からあった文章66 これは元からあった文章7(1/1) Stage this hunk [y,n,q,a,d,s,e,?]? 一番下の行の、(1/1) Stage this hunk [y,n,q,a,d,s,e,?]?の小文字たちの意味を以下にまとめています。| 文字 | 解説 ||—-|——————————-|| y | このハンクはステージングする || n | このハンクはステージングしない || q | 終了する || a | このファイルのハンクを含むすべてのハンクをステージングする || d | このファイルのハンクを含む全てのハンクをステージングしない || s | 現在のハンクをもっと小さなハンクに分割する || e | 現在のハンクを手動で編集する || ? | ヘルプを表示する | 今回は手動で細かく選択するので、eを選択する。選択すると次のような編集画面が現れる 123456789101112131415161718192021# Manual hunk edit mode -- see bottom for a quick guide.@@ -1,7 +1,7 @@ これは元からあった文章1-これは元からあった文章2+これは元からあった文章22 これは元からあった文章3 これは元からあった文章4 これは元からあった文章5-これは元からあった文章6+これは元からあった文章66 これは元からあった文章7# ---# To remove '-' lines, make them ' ' lines (context).# To remove '+' lines, delete them.# Lines starting with # will be removed.# # If the patch applies cleanly, the edited hunk will immediately be# marked for staging.# If it does not apply cleanly, you will be given an opportunity to# edit again. If all lines of the hunk are removed, then the edit is# aborted and the hunk is left unchanged. 一番左の列が１文字分空間が空いていて。そこの変更があった行に文字が書かれている。今回は、2を22に書き換えた履歴だけを残したいので、以下のような内容に書き換える 下の方に書いてある操作方法の日本語訳 -の行を消すには、その行を (スペース)に変える +の行を消すには、その行を消去する #で始まる行は、消される。(#から始まる行は気にしなくていい) 1234567891011121314151617181920# Manual hunk edit mode -- see bottom for a quick guide.@@ -1,7 +1,7 @@ これは元からあった文章1-これは元からあった文章2+これは元からあった文章22 これは元からあった文章3 これは元からあった文章4 これは元からあった文章5 これは元からあった文章6 これは元からあった文章7# ---# To remove '-' lines, make them ' ' lines (context).# To remove '+' lines, delete them.# Lines starting with # will be removed.# # If the patch applies cleanly, the edited hunk will immediately be# marked for staging.# If it does not apply cleanly, you will be given an opportunity to# edit again. If all lines of the hunk are removed, then the edit is# aborted and the hunk is left unchanged. 変更内容を保存して、編集ツールを抜けると、自動で残しておいた部分がステージングされる 3. git diff –stagedでステージングされている変更を見てみる12345678910111213$ git diff --stageddiff --git &quot;a/hunk\\343\\203\\206\\343\\202\\271\\343\\203\\210&quot; &quot;b/hunk\\343\\203\\206\\343\\202\\271\\343\\203\\210&quot;index 5c85024..cc9784e 100644--- &quot;a/hunk\\343\\203\\206\\343\\202\\271\\343\\203\\210&quot;+++ &quot;b/hunk\\343\\203\\206\\343\\202\\271\\343\\203\\210&quot;@@ -1,5 +1,5 @@ これは元からあった文章1-これは元からあった文章2+これは元からあった文章22 これは元からあった文章3 これは元からあった文章4 これは元からあった文章5","link":"/2021/04/07/%E3%80%90Git%E3%80%91%E5%B0%8F%E5%88%86%E3%81%91%E3%81%ABcommit%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AB%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/"},{"title":"【Git】リモートとタグの操作","text":"目次 リモートにタグをプッシュする 実行例 リモートのタグを消去する 実行例 リモートにタグをプッシュするgit push origin タグ名コマンドを使用します。 実行例testタグをプッシュします。 1$ git push origin test リモートのタグを消去するgit push origin :タグ名コマンドを使用します。 ブランチの消去の仕方と同じ用に、リファレンスを指定しないことでタグを消去しています。 実行例testタグを消去します。 1$ git push origin :test","link":"/2021/04/05/%E3%80%90Git%E3%80%91%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%81%A8%E3%82%BF%E3%82%B0%E3%81%AE%E6%93%8D%E4%BD%9C/"},{"title":"【Git】リモート関係のブランチの操作","text":"目次 ブランチをプッシュする set-upstreamをつけない場合エラー表示 実行結果 リモートブランチを消去する リモートブランチを消去するときの「:消去したいブランチ名」とはなにか 実行例 ブランチをプッシュするブランチをプッシュするには、pushコマンドに--set-upstreamスイッチをつけます。 set-upstreamをつけない場合エラー表示リモートブランチにクローンしたリポジトリで作成したtestをpushします。 すでにエラー文に解決方法が書いてあるのでそれ通りのコマンドを実行します。 1234567$ git pushfatal: The current branch test has no upstream branch.To push the current branch and set the remote as upstream, use git push --set-upstream origin test 実行結果123456789$ git push --set-upstream origin testEnumerating objects: 3, done.Counting objects: 100% (3/3), done.Writing objects: 100% (3/3), 206 bytes | 206.00 KiB/s, done.Total 3 (delta 0), reused 0 (delta 0), pack-reused 0To /Users/daiki/Desktop/git/testRp/../bearRp/bare * [new branch] test -&gt; testBranch 'test' set up to track remote branch 'test' from 'origin'. リモートブランチを消去するリモートブランチ消去する場合git push origin :消去したいブランチ名コマンドを使用します。このコマンドだけでは、ローカルブランチは消去されません。 ローカルブランチも消去するには２つのコマンドを使う必要があります。１つはローカルブランチの消去のためのgit branch -d、2つめはリモートブランチを消去するためのgit push origin :です。 ローカルブランチ消去 : git branch -d 消去したいブランチ名 リモートブランチ消去 : git push origin :消去したいブランチ名 リモートブランチを消去するときの「:消去したいブランチ名」とはなにかrefspec(リファレンス指定)と呼ばれるもので、`ソース側ブランチ(src):ディスティネーション側ブランチ(dest)の対応を表しています。 通常のgit psuhコマンドでも、複雑な構文が隠されているだけで、正式な記述をするとgit push origin ローカルブランチ:リモートブランチとなります。 実行例testブランチを消去します。 リモートブランチのみを消去する場合 1$ git push origin :test ローカルブランチとリモートブランチどちらも消去する場合 12$ git branch -d test$ git push origin :test","link":"/2021/04/10/%E3%80%90Git%E3%80%91%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E9%96%A2%E4%BF%82%E3%81%AE%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%AE%E6%93%8D%E4%BD%9C/"},{"title":"【Git】ログに更新情報も一緒に表示させる","text":"目次 ファイル名とどれくらい変更されたかを知りたいとき 実際の実行画面 ファイル名とどれくらい変更されたかを知りたいときgit log --statを使うと、ファイル名と変更量(追加or消去)を表示する 変更が0でファイル名が表示されている場合は、中身のないファイルが新規に作成されている 12ファイル名 | 変更点カウント 変更箇所の概要(+ or -)何個のファイルが変更されたか、追記された行数(+),消去された行数(-) 実際の実行画面12345678910$ git log --statcommit 24f2afa3e2e06e33a912525ad7c85b2791e07de7Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Thu Mar 4 12:43:41 2021 +0900 Adding two numbers math.sh | 4 +++- 1 file changed, 3 insertions(+), 1 deletion(-)","link":"/2021/04/11/%E3%80%90Git%E3%80%91%E3%83%AD%E3%82%B0%E3%81%AB%E6%9B%B4%E6%96%B0%E6%83%85%E5%A0%B1%E3%82%82%E4%B8%80%E7%B7%92%E3%81%AB%E8%A1%A8%E7%A4%BA%E3%81%95%E3%81%9B%E3%82%8B/"},{"title":"【Git】管理されているファイル情報をみる","text":"リポジトリで「管理されている」ファイルのリストを取得するls-filesコマンドの-cオプションを使用する ls-filesはデフォルトで-cオプションがついている -c, –cached Show cached files in the output (default) 実行結果例123456% git ls-files 1234aaa リポジトリで「管理されていない」ファイルのリストを取得するls-filesコマンドの-oオプションを使用する -o, –others Show other (i.e. untracked) files in the output 実行結果例123% git ls-files -o5bbb","link":"/2021/03/07/%E3%80%90Git%E3%80%91%E7%AE%A1%E7%90%86%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%83%85%E5%A0%B1%E3%82%92%E3%81%BF%E3%82%8B/"},{"title":"【Git】直前のコミットを修正する","text":"目次 –amendスイッチを使用する できること できないこと コミットメッセージの編集の仕方 ファイルを追加する –amendスイッチを使用するamendとは、日本語で修正するという意味。修正するというものの、できないこともあるので注意する必要がある できること 直前のコミットメッセージの修正 直前のコミット内容へのファイルの追加 できないこと 2つ以上前のコミットを修正する git rebase -iと組み合わせて行う コミットからファイルを消去する git resetを使う必要がある コミットメッセージの編集の仕方以下コマンドを実行する 1$ git commit --amend Gitに設定してあるエディタが開き、以下のような編集画面が表示される 1234567891011121.txtの追加# Please enter the commit message for your changes. Lines starting# with '#' will be ignored, and an empty message aborts the commit.## Date: Fri Mar 12 14:22:29 2021 +0900## On branch master# Changes to be committed:# new file: &quot;1.txt&quot;# この一番上のメッセージを編集して、保存してエディタを閉じれば自動で１つ前のコミットを書き換えてくれる ファイルを追加する追加したいファイルをgit addしてステージングしてから、git commit --amendを使用する 12$ git add テスト2.txt$ git commit --ammend --no-edit --no-editスイッチは、直前のコミットのメッセージを変更せずにそのまま使い回すスイッチ - コメントも編集したい場合は、--no-editスイッチをつけなければ編集できる","link":"/2021/04/08/%E3%80%90Git%E3%80%91%E7%9B%B4%E5%89%8D%E3%81%AE%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%82%92%E4%BF%AE%E6%AD%A3%E3%81%99%E3%82%8B/"},{"title":"【Git】管理しているファイルのリネームを簡単にする","text":"目次 git addする手間を減らせるGitコマンド ファイル名を変更する 通常のリネーム Gitのコマンドを使った変更 ファイルを消去する 通常のファイル消去 Gitのコマンドを使った消去 git addする手間を減らせるGitコマンド通常の手順で行うと、git add 変更を加えたファイル名が必要になる作業をGitコマンドを使うことでステージングを自動でやってもらえる ファイル名を変更する通常のリネーム mv 元ファイル名 変更ファイル名 git add 変更ファイル名 git commit -m &quot;ファイル名変更&quot; Gitのコマンドを使った変更 git mv 元ファイル名 変更ファイル名 git commit -m &quot;ファイル名変更&quot; ファイルを消去する通常のファイル消去 rm ファイル名 git add ファイル名 git commit -m &quot;ファイル消去&quot; Gitのコマンドを使った消去 git rm ファイル名 git commit -m &quot;ファイル消去&quot;","link":"/2021/04/14/%E3%80%90Git%E3%80%91%E7%AE%A1%E7%90%86%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%AA%E3%83%8D%E3%83%BC%E3%83%A0%E3%82%92%E7%B0%A1%E5%8D%98%E3%81%AB%E3%81%99%E3%82%8B/"},{"title":"【Gitエラー】「fatal: Out of memory, malloc failed (tried to allocate xxxxxxxxxxx bytes)」の解決方法","text":"原因ファイル容量の大きいGitリポジトリをチェックアウトしようとしたら起きたので、Gitの解凍処理でメモリが食い尽くされているのが原因らいしい 解決策解凍処理を小分けにする ~/.gitconfigに以下を追記する 12345678[core]packedGitLimit = 128mpackedGitWindowSize = 128m[pack]deltaCacheSize = 128mpackSizeLimit = 128mwindowMemory = 128m","link":"/2021/02/25/%E3%80%90Git%E3%82%A8%E3%83%A9%E3%83%BC%E3%80%91%E3%80%8Cfatal-Out-of-memory-malloc-failed-tried-to-allocate-xxxxxxxxxxx-bytes-%E3%80%8D%E3%81%AE%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95/"},{"title":"【Kotlin】View内のコンポーネントの取得方法","text":"Javaっぽく取得するデータバインディングというらしい？ 1234567override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) // コンポーネントに設定したID(textView)からTextViewを取得する val textView = findViewById(R.id.textView) as TextView} Kotlinっぽく取得する（Kotlin Android Extensions使用）Kotlin Android ExtensionsKotlinが公式で提供している、Androidアプリ開発をサポートしてくれる拡張機能https://archive-blog.yagi2.dev/2017/10/18/good-bye-findviewbyid.html 1234567891011// Inportする必要がある// &lt;layout&gt;には取得したいLayoutXMLの名前を指定import kotlinx.android.synthetic.main.&lt;layout&gt;.*override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) // 後はViewないで指定した、コンポーネントのIDから呼び出せる textView.text = &quot;テストだよ&quot;}","link":"/2021/03/12/%E3%80%90Kotlin%E3%80%91View%E5%86%85%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E5%8F%96%E5%BE%97%E6%96%B9%E6%B3%95/"},{"title":"【Mac】ツールのバージョンのチェック方法","text":"目次 Swiftバージョン確認 OSバージョン確認 XCodeバージョン確認 色々バージョン確認 Swiftバージョン確認 swift -version 1234$ swift -versionApple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)Target: x86_64-apple-darwin20.3.0 OSバージョン確認 sw_vers 12345$ sw_versProductName: macOSProductVersion: 11.2BuildVersion: 20D64 XCodeバージョン確認 xcodebuild -version 1234$ xcodebuild -versionXcode 12.4Build version 12D4e 色々バージョン確認 system_profiler &gt; ファイル名.txt かなり待つ必要がある 1$ system_profiler &gt; ver.txt","link":"/2021/03/25/%E3%80%90Mac%E3%80%91%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E6%96%B9%E6%B3%95/"},{"title":"【Linuxコマンド】よく使うlsコマンドオプション","text":"目次 隠しファイル.ファイルまで表示させる ファイル詳細を表示させる １列１ファイルで表示させる カンマ区切りで表示させる 普通にlsを使った場合12% lsMemo_App Memo_App.xcodeproj README.md 1. 隠しファイル.ファイルまで表示させるオプション-aをつける 1ls -a 実行例123%ls -a. .DS_Store .gitignore Memo_App.xcodeproj.. .git Memo_App README.md 2. ファイル詳細を表示させるlsコマンドのオプションに-lをつける 1ls -l 実行例12345% ls -ltotal 8drwxr-xr-x 12 daiki staff 384 2 28 01:39 Memo_Appdrwxr-xr-x@ 5 daiki staff 160 2 28 02:03 Memo_App.xcodeproj-rw-r--r-- 1 daiki staff 10 2 27 22:39 README.md 3. １列１ファイルで表示させるlsコマンドのオプションに-1をつける 1ls -1 実行例1234% ls -1Memo_AppMemo_App.xcodeprojREADME.md 4. カンマ区切りで表示させるlsコマンドのオプションに-mをつける 1ls -m 実行例12% ls -mMemo_App, Memo_App.xcodeproj, README.md","link":"/2021/02/28/%E3%80%90Linux%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%80%91%E3%82%88%E3%81%8F%E4%BD%BF%E3%81%86ls%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3/"},{"title":"【Notion】文字サイズ変更ショートカット","text":"文字サイズ拡大、縮小方法Windows拡大 : Ctrl + 縮小 : Ctrl - Mac拡大 : Cmd ^ 縮小 : Cmd -","link":"/2021/01/26/%E3%80%90Notion%E3%80%91%E6%96%87%E5%AD%97%E3%82%B5%E3%82%A4%E3%82%BA%E5%A4%89%E6%9B%B4%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88/"},{"title":"【Swift】Array内の要素を指定して消去する","text":"もくじ removeAllを使用する 短くかける for文を使用する ちょっと冗長 その他の参考 注意この方法の場合、比較する要素に一致するデータは全て配列から消去されます 1.removeAllを使用するremoveAll(where:)メソッドを使用し、要素を比較して一致している値全てを消去する 123456789// 配列定義var testArray :Array&lt;String&gt; = Array&lt;String&gt;()// 要素追加testArray.append(&quot;test&quot;)testArray.append(&quot;kemono&quot;)// testと一致する要素を全て消去testArray.removeAll(where: {$0 == &quot;test&quot;}) 2.for文を使用するfor文を使用して配列内の要素を列挙して、要素を比較した結果一致している配列内要素を全て消去する 1234567891011121314151617// 配列定義var testArray :Array&lt;String&gt; = Array&lt;String&gt;()// 要素追加testArray.append(&quot;test&quot;)testArray.append(&quot;test&quot;)testArray.append(&quot;kemono&quot;)// 要素を操作するのでコピーを作成して、それをfor文で列挙するlet copyArray = testArray// 一致する要素を消去for i in 0...copyArray.count - 1{ if(copyArray[i] == &quot;test&quot;){ testArray.remove(at: i) }} 3.その他の参考 https://qiita.com/fuziki/items/e8b1bb5b2dc8c8f43041","link":"/2021/03/01/%E3%80%90Swift%E3%80%91Array%E5%86%85%E3%81%AE%E8%A6%81%E7%B4%A0%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E6%B6%88%E5%8E%BB%E3%81%99%E3%82%8B/"},{"title":"【Shell】出力をそのままクリップボードにコピーする","text":"出力をクリップボードにコピーする|(パイプ)+pbcopy pbとはpast boardの略 使用例カレンとディレクトリのパスをクリップボードにコピーする1pwd | pbcopy ファイルの内容をクリップボードにコピー1cat ファイル名 | pbcopy 追記2021/3/6zshには、aliasでpbcが設定されているらしく、こっちの方が短くかける 動作的には、aliasなのでpbcopyと同じ1cat ファイル名 | pbc","link":"/2021/03/04/%E3%80%90Shell%E3%80%91%E5%87%BA%E5%8A%9B%E3%82%92%E3%81%9D%E3%81%AE%E3%81%BE%E3%81%BE%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97%E3%83%9C%E3%83%BC%E3%83%89%E3%81%AB%E3%82%B3%E3%83%94%E3%83%BC%E3%81%99%E3%82%8B/"},{"title":"【Shell】コマンドラインから中身のあるファイルを作成する","text":"目次 中身のないファイルの作り方 中身に文字列を挿入してファイルを作る作り方 すでにあるファイルの末尾に文字列を追加する 中身のないファイルの作り方 touch ファイル名を使用して中身がからのファイルを作成できる 1$ touch testfile 中身に文字列を挿入してファイルを作る作り方 echo &quot;挿入したい文字列&quot; &gt; ファイル名を使用して中身に文字列を挿入しつつファイルを作成する 1234$ echo &quot;この文字列が入っていればOK&quot; &gt; testfile$ cat testfileこの文字列が入っていればOK すでにあるファイルの末尾に文字列を追加する echo &quot;挿入したい文字列&quot; &gt;&gt; ファイル名を使用してすでにあるファイルの末尾に1行追加する 12345678$ cat testfile この文字列が入っていればOK$ echo &quot;追加文字列&quot; &gt;&gt; testfile$ cat testfileこの文字列が入っていればOK追加文字列","link":"/2021/03/20/%E3%80%90Shell%E3%80%91%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%8B%E3%82%89%E4%B8%AD%E8%BA%AB%E3%81%AE%E3%81%82%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/"},{"title":"【Ubuntu】キーボードの初期設定","text":"Ubuntu Serverで使用するキーボードレイアウトを日本語配列に変更する sudo dpkg-reconfigure keyboard-configurationを入力 1$ sudo dpkg-reconfigure keyboard-configuration dpkg-reconfigure : 指定したDebianパッケージがdebconfを採用している場合に、パッケージの再設定をすることができるコマンド debconfに対応しているリストはls /var/lib/dpkg/info/*.configでみることができる keyboard-configuration : キーボードのレイアウト設定ファイル ここからは矢印キーとEnterキーで操作する(GUI風になる) Generic 105-key (Intl)PCを選択 Japaneseを選択 Japaneseを選択 /etc/default/keyboardの設定を書き換えている場合表示される キーボードオプションを維持する場合はYesを選択、初期化していい場合はNoを選択 「The default for the keyboard layout」を選択 「No compose key」を選択するとコンソール画面に戻る コンソール画面が表示され必要んな情報を生成してくれるので少し待つ(ネットワークが必要?) 1234567Your console font configuration will be updated the next time your systemboots. If you want to update it now, run 'setupcon' from a virtual console.update-initramfs: deferring update (trigger activated)Processing triggers for initramfs-tools (0.137ubuntu12) ...update-initramfs: Generating /boot/initrd.img-5.8.0-1006-raspi.... 入力待機画面に戻れば成功 「Caps Lock」を「Ctrl」に変更する/etc/default/keyboardのXKBOPTIONSに以下を書き加える デフォルト1XKBOPTIONS=&quot;&quot; 書き換え後1XKBOPTIONS=&quot;ctrl:nocaps&quot;","link":"/2021/03/11/%E3%80%90Ubuntu%E3%80%91%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/"},{"title":"【Unity】2018.4以前バージョンから、2019.xへの更新時に「NetworkBehaviour is not found」が出た時の対処法","text":"目次 原因 手順 1. PackageManagerを開く 2. Unity Registryを選択してから、「Multiplayer HLAPI」「XR Legacy InputHelpers」をインストール 原因2019.1から非推奨になったことが原因で、デフォルトでUnity内のライブラリには存在しなくなってしまいました。 非推奨なので、別の手段でネットワーク機能を実装したほうがいいのですが、とりあえず今はUNetを使いたいという方向けの対処法になります。 Evolving multiplayer games beyound UNet 手順1. PackageManagerを開くWindow -&gt; Package Manager 2. Unity Registryを選択してから、「Multiplayer HLAPI」「XR Legacy InputHelpers」をインストールウィンドウ左上のプルダウンをUnity Registryに設定 検索窓から、「Multiplayer HLAPI」「XR Legacy InputHelpers」を検索してインストールする","link":"/2021/03/29/%E3%80%90Unity%E3%80%912018-4%E4%BB%A5%E5%89%8D%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%8B%E3%82%89%E3%80%812019-x%E3%81%B8%E3%81%AE%E6%9B%B4%E6%96%B0%E6%99%82%E3%81%AB%E3%80%8CNetworkBehaviour-is-not-found%E3%80%8D%E3%81%8C%E5%87%BA%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/"},{"title":"【Unity】URPを導入する","text":"目次 導入方法 1. プロジェクト作成時に選択する 注意 手順 2. 既存のプロジェクトに追加する 1. Package Managerを開く 2. RPを選択してInstall 設定方法 1. Pipeline Assetを作成する 2. セットする ピンクマテリアルになるときの対処法 手順 導入方法1. プロジェクト作成時に選択する注意Unity2019.3以上のバージョンから使用できます。正確には、2019.2以前にはLightweight Render Pipeline(LWRP)というものが名称が違うだけで存在はしています。細かい仕様が違う可能性があるので、本記事は、Unity2019.3以上の環境のプロジェクト向けになります。 手順新規プロジェクト作成時にUniversal Render Piplineを選択する 2. 既存のプロジェクトに追加する1. Package Managerを開くWidnow → Package Managerを選択 2. RPを選択してInstall表示されるパッケージの設定をUnity Registryに変更しておく 検索窓にRPと入力してUniversal RPを検索する Universal RPを選択後、Installをクリックで導入完了 設定方法1. Pipeline Assetを作成するCreate → Rendering → Universal Render Pipeline → Pipline Asset(Forward Rendeer)の順で選択して、作成 2. セットするEdit → Project Settings…で、Project Setting Windowを開く 先ほど作成したPipeline AssetをGraphics内のScriptable Render Pipeline Settingsにセットする ピンクマテリアルになるときの対処法既存のプロジェクトに、URPを導入すると、モデルがピンク色になるときがあります。 これは、新しく導入したレンダリングシステムに既存のレンダリングシステム向けに作ったマテリアルが対応できていないことが原因で起こります。 解決するには、URP用のマテリアルに変換してあげる必要があります。 手順Edit → Render Pipeline → Universal Render Pipeline → Upgrade Project Materials to UniversalRP Materials の順で選択してあげれば、自動で変換をしてくれます。","link":"/2021/03/27/%E3%80%90Unity%E3%80%91URP%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B/"},{"title":"【Unity】ディレクティブを使用しているときに発生するwarning対策","text":"目次 ディレクティブとはなにか 参考リンク なぜwarningが発生するのか 例 対策方法 1. エディタ用のダミー処理を作る 2. 1つのスクリプト内だけ特定のwarningを発生させない 3. プロジェクト全体に対して発生させたくないwarningを指定する .rspとは 設定手順 設定例 ディレクティブとはなにかUnityはプラットフォーム依存コンパイルという機能を持っています。これは、Unityで作成したゲームやアプリを複数のプラットフォームで動かしたい場合に、各プラットフォームに依存したコード(ファイルの保存領域、Bluetoothの使用)を１つのスクリプト内で書けるようにする仕組みです。 参考リンクUnityドキュメント なぜwarningが発生するのか原因はプラットフォームに依存(ディレクティブ指定)しているコードは、Unity Editor上のコンパイルでは無視されることにあります。 無視されるということは、宣言した変数をEditor上で実行するときは使用していないと見られるケースが発生します。 例この例では、スマホ用OS向けにビルドすることを考えてディレクティブを設定しています。記述上はNumberを使用してしますが、UnityEditorから見ると、Numberは使用されていない変数になります。 1234567891011121314151617// この変数はUityEditor上では使用していないことになるのでwaringが発生するint Number = 9; private void test(){ // ここはAndroid用にビルドしたときに初めて有効になる#if UNITY_ANDROID Number = 100;#endif // ここはiOS用にビルドしたときに初めて有効になる#if UNITY_iOS Number = 300;#endif...} 対策方法1. エディタ用のダミー処理を作る上の例はEditor用の処理が書いてありませんでした。何かしらのダミー処理で変数を使うようにすればwarningの発生を抑える事ができます。それと同時にテストを書くときのことを考えても、内部処理はダミーでも実装しておいたほうがいいかと思います。 1234567891011121314151617181920212223// ダミー処理で使っているのwarningは発生しないint Number = 9; private void test(){ // ここはAndroid用にビルドしたときに初めて有効になる#if UNITY_ANDROID Number = 100;#endif // ここはiOS用にビルドしたときに初めて有効になる#if UNITY_iOS Number = 300;#endif // Unity Editor用のダミー処理#if UNITY_EDITOR Number = 0;#endif...} 2. 1つのスクリプト内だけ特定のwarningを発生させないプリプロセス命令をファイルの先頭に書くことによってコンパイル時の処理を指定する方法です。 以下のようなwarning表示が表示された場合、これを解決するにはCS0149というwarningを発生させないプリプロセス命令が必要になります。 1test.cs(59,48): warning CS0149: xxxx CS0149のwarningを発生させないようにするための記述は以下のようになります。 1#pragma warning disable 0149 3. プロジェクト全体に対して発生させたくないwarningを指定するこの方法を取ると、指定したすべての条件に一致するものが表示されなくなってしまうので、設定する場合は慎重に行ってください。 .rspとはMSBuild.exeのコマンドラインスイッチを含むテキストファイル。詳しくは以下リンクを参照。 MSBuild応答ファイル 設定手順 Assetsフォルダ下にcsc.rspというファイルを作成してください。(Assets/csc.rsp) UnityEditorでファイルを作成すると見た目上は、csc.rspに見えますが、拡張子がcsになってしまうので、エクスプローラーから作成する csc.rsp内に-nowarn:xxxxと記述する xxxの部分は`warning時に表示される数字の部分です。 複数指定したい場合は、記述した部分の下に追記してく 設定例1234// warning CS0149: xxxxの場合-nowarn:0149// warning CS0031: yyyyの場合-nowarn:0031","link":"/2021/03/28/%E3%80%90Unity%E3%80%91%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AB%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8Bwarning%E5%AF%BE%E7%AD%96/"},{"title":"【VSCode】開いたテキストが文字化けするときの対処法方","text":"設定の「自動文字コード識別設定」をONにする1. Settings画面を開くCode -&gt; Preferences -&gt; Settingsの順でSettings画面を開く - Cmd + ,(カンマ)でも開ける 2. 自動文字コード識別設定を探す検索欄から、「autoGuessEncoding」を検索 3.「Files:Auto Guess Encoding」にチェックを入れる再度ファイルを開き直せば、文字化けが解消されているはず","link":"/2021/03/10/%E3%80%90VSCode%E3%80%91%E9%96%8B%E3%81%84%E3%81%9F%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%8C%E6%96%87%E5%AD%97%E5%8C%96%E3%81%91%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95%E6%96%B9/"},{"title":"【Vimプラグイン】囲う記述を楽にする「vim-surround」","text":"環境 MacBook Air M1 Big Sur v11.2 zsh vim-surroundとは？文字列を記述する時の&quot;&quot;や括弧() []などのさまざまな、囲い（surround）を編集する際に役立つプラグイン GitHubリポジトリ : https://github.com/tpope/vim-surround インストール方法(Vundle使用)以下記述を~/.vimrcに追加 1Plugin 'tpope/vim-surround' 使い方囲う ノーマルモード コマンド : ysiw + 囲みたい文字 ヴィジュアルモード コマンド : ヴィジュアルモードで選択 + S + 囲みたい文字 囲い解除(ノーマルモード)囲いを解除 コマンド : ds + 解除したい囲み文字 タグが対象の場合 : dst 囲いの中身を消去 コマンド : di + 中身を消去したい囲み文字 タグが対象の場合 : dit 囲いの変更(ノーマルモードi)囲いを変更 コマンド : cs + 変更したい囲み文字 + 変更したい囲み文字 囲いの中身を変更 コマンド : ci + 中身を変更したい囲み文字","link":"/2021/02/27/%E3%80%90Vim%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%80%91%E5%9B%B2%E3%81%86%E8%A8%98%E8%BF%B0%E3%82%92%E6%A5%BD%E3%81%AB%E3%81%99%E3%82%8B%E3%80%8Cvim-surround%E3%80%8D/"},{"title":"【Shell】コマンドラインのカーソル移動","text":"矢印キーを使用しないカーソルの移動 □が現在カーソルのある位置 コマンド 動作解説 動作前 動作後 Ctrl + a 行の先頭にカーソルを移動 cd ~/Deskctop□/test/ □cd ~/Deskctop/test/ Ctrl + e 行の末にカーソルを移動 cd ~/Deskctop□/test/ cd ~/Deskctop/test/□ Ctrl + k カーソルの右側を全て消去 cd ~/Deskctop□/test/ cd ~/Deskctop□ Ctrl + h カーソルの左側にある文字を消去 cd ~/Deskctop□/test/ cd ~/Deskcto□/test/ Ctrl + d カーソルの右側にある文字を消去 cd ~/Deskctop□/test/ cd ~/Deskctop□test/ Ctrl + u コマンドラインの文字を全て消去 cd ~/Deskctop□/test/ Ctrl + y Ctrl + kで消去した文字列を貼り付け コマンドの履歴を使用する 矢印キーの上下(↑,↓)で一つ前のコマンド、一つ後のコマンドを呼び出せる。 履歴を見たい場合は、historyコマンドでみることのできる 履歴番号 コマンド1234567$ history 679 ls 680 vim ~/.zshrc 681 source ~/.zshrc 682 ZDOTDIR 683 $ZDOTDIR 684 echo $ZDOTDIR 行番号を指定して実行する !履歴番号 行番号のコマンドがコマンドラインに入力される123$ !679$ ls","link":"/2021/03/10/%E3%80%90Shell%E3%80%91%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%AE%E3%82%AB%E3%83%BC%E3%82%BD%E3%83%AB%E7%A7%BB%E5%8B%95/"},{"title":"【Vim】バックスペースが効かなくなった場合の対処方","text":"参考https://qiita.com/omega999/items/23aec6a7f6d6735d033f 対処方法 .vimrcに以下を記述する1set backspace=indent,eol,start","link":"/2021/02/26/%E3%80%90Vim%E3%80%91%E3%83%90%E3%83%83%E3%82%AF%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/"},{"title":"【Winodws】コンソールのスクリーンバッファを複数枚作る","text":"スクリーンバッファとは? 実際の文字が書き込まれるバッファのことで、実際にコンソールに描画されるのはこのスクリーンバッファの内容 コンソールが作成された時点で既定で1つ作成されている(描画されから当たり前) 独自のスクリーンバッファを作成して出力を行うことも可能 CreateConsoleScreenBuffer1234567HANDLE WINAPI CreateConsoleScreenBuffer( DWORD dwDesiredAccess, DWORD dwShareMode, const SECURITY_ATTRIBUTES *lpSecurityAttributes, DWORD dwFlags, LPVOID lpScreenBufferData); 引数型 解説 例 dwDesiredAccess スクリーンバッファへのアクセス権を指定 GENERIC_READ | GENERIC_WRITE dwShareMode スクリーンバッファを共有するための定数を指定(共有しない場合は0) 0 *lpSecurityAttributes SECURITY_ATTRIBUTES構造体のアドレスを指定するが普通はNULLを指定 NULL dwFlags CONSOLE_TEXTMODE_BUFFERを指定 CONSOLE_TEXTMODE_BUFFER lpScreenBufferData NULLを指定 NULL 戻り値 戻り値のスクリーンバッファハンドルはCloseHandleで閉じる SetConsoleActiveScreenBuffer スクリーンバッファをアクティブにしてコンソールに描画 123BOOL WINAPI SetConsoleActiveScreenBuffer( HANDLE hConsoleOutput); 引数型 解説 例 hConsoleOutput スクリーンバッファのハンドル(CreateConsoleScreenBufferの戻り値)を指定","link":"/2021/03/17/%E3%80%90Winodws%E3%80%91%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E3%82%92%E8%A4%87%E6%95%B0%E6%9E%9A%E4%BD%9C%E3%82%8B/"},{"title":"【XCode】TableViewのCellをカスタマイズする","text":"環境 MacBook Air M1 OS : 11.2(20D64) XCode : 12.4 Swift : 5.3.2 参考 https://rara-world.com/ios-swift-tableview-custom-cell/ 1. 新規ファイル追加でCocoa Touch Classを選択 2. 作成時の設定 Class : 好きな名前(今回はCustomTableViewCell) Subclass of : UITableViewCell Also create XIB file : ON Language : Swift ２つの新規ファイルが生成されればOK 3. CustomTableViewCell.xibを編集Cellにラベルを追加 Rostoration IDの設定任意の文字列でいい(セル生成時に使用する) 4. CustomTableViewCell.swiftでラベルの参照を設定 5. Main.storyboardを編集Table Viewを追加 6. ViewController.swiftを編集Main.storyboardで指定した、Table Viewの参照を設定 参照時の変数名を今回はTableViewとする viewDidLoad()に追記 UITableViewに対して、delegateと使用するCellの情報を設定 TableView.register : 使用するカスタムセルの情報を登録 nibName = 作ったCellのクラス名 forCellReuseIdentifier = xibで指定したidentifier名 TableView.delegate : TableView.dataSorce : 12345678910override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. // ここから TableView.register(UINib(nibName: &quot;CustomTableViewCell&quot;, bundle: nil), forCellReuseIdentifier: &quot;CustomCell&quot;) TableView.delegate = self TableView.dataSource = self // ここまで } UITableViewDelegate,UITableViewDataSourceを継承 どちらのメソッドも、optionalなので、最低限のメソッドの定義をすれば、他のメソッドは定義しなくてもいい UITableViewDelegate : TableView内のデータが選択や生成、編集されたときに呼び出されるメソッドが定義されたプロトコル群 UITableViewDataSource : テーブルに表示させたいデータを設定するためのプロトコル群 123class ViewController: UIViewController,UITableViewDelegate,UITableViewDataSource { ...} 継承すると、エラーが出るはずなので、Fixをクリックしてメソッドを2つ自動生成してもらうと、以下のようなメソッドが自動生成されるはず 1234567891011// UITableViewDelegateの継承によって生成された// TableViewに生成するセル数を設定する(Int型を返す)func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { Code}// UITableViewDataSourceの継承によって生成された// TableViewに表示するセルのデータを設定する(UITableViewCellを返す)func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { Code} 今回は、生成するセルを10個、表示するデータを各セルを上から数えたときの番号にする 1234567891011func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return 10}func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCell(withIdentifier: &quot;CustomCell&quot;,for: indexPath) as! CustomTableViewCell cell.Label.text = String(indexPath.row) return cell} 実行した結果 ViewController.swiftの完成形123456789101112131415161718192021222324252627282930import UIKitclass ViewController: UIViewController,UITableViewDelegate,UITableViewDataSource { @IBOutlet weak var TableView: UITableView! func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return 10 } func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCell(withIdentifier: &quot;CustomCell&quot;,for: indexPath) as! CustomTableViewCell cell.Label.text = String(1) return cell } override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. TableView.register(UINib(nibName: &quot;CustomTableViewCell&quot;, bundle: nil), forCellReuseIdentifier: &quot;CustomCell&quot;) TableView.delegate = self TableView.dataSource = self }}","link":"/2021/03/14/%E3%80%90XCode%E3%80%91TableView%E3%81%AECell%E3%82%92%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%81%99%E3%82%8B/"},{"title":"【Xcode】EntryPointを変更する方法","text":"もくじ 環境 Entry Pointとは StoryBordから変更する コードから変更する [おまけ]初回起動時のみ特定の画面を表示させる 0. 環境 MacBook Air M1 Xcode 12.4 1. Entry Pointとは プログラムの開始される位置 この記事では開始される画面の位置も含まれる画面上で見ると以下の画像の矢印部分がEntry Pointを表している アシスタントエディタで確認すると以下赤枠部分 2. StoryBordから変更するドラックアンドドロップで矢印を移動させる Utilites areaから移動させるAttributes inspector内のIs Initial View Controllerにチェクを入れる 3. コードから変更する1. Main.storybordの遷移させたいViewControllerにStoryboad IDを設定する Identity Inspector 内のSotryboard IDを設定 今回はこのように設定 1画面目 : FirstView 2画面目 : SecondView 2. SceneDelegate.swift 何も変更していないデフォルトの状態だとこのようなコードになっていると思います 1234567891011121314151617181920212223242526272829303132333435363738394041424344import UIKitclass SceneDelegate: UIResponder, UIWindowSceneDelegate { var window: UIWindow? func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) { // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`. // If using a storyboard, the `window` property will automatically be initialized and attached to the scene. // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead). guard let _ = (scene as? UIWindowScene) else { return } } func sceneDidDisconnect(_ scene: UIScene) { // Called as the scene is being released by the system. // This occurs shortly after the scene enters the background, or when its session is discarded. // Release any resources associated with this scene that can be re-created the next time the scene connects. // The scene may re-connect later, as its session was not necessarily discarded (see `application:didDiscardSceneSessions` instead). } func sceneDidBecomeActive(_ scene: UIScene) { // Called when the scene has moved from an inactive state to an active state. // Use this method to restart any tasks that were paused (or not yet started) when the scene was inactive. } func sceneWillResignActive(_ scene: UIScene) { // Called when the scene will move from an active state to an inactive state. // This may occur due to temporary interruptions (ex. an incoming phone call). } func sceneWillEnterForeground(_ scene: UIScene) { // Called as the scene transitions from the background to the foreground. // Use this method to undo the changes made on entering the background. } func sceneDidEnterBackground(_ scene: UIScene) { // Called as the scene transitions from the foreground to the background. // Use this method to save data, release shared resources, and store enough scene-specific state information // to restore the scene back to its current state. }} sceneメソッド内に以下のコードのコードを追記します この時、guard let _ =の_の部分をwindowに変更しています。 12345678910111213141516171819func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) { // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`. // If using a storyboard, the `window` property will automatically be initialized and attached to the scene. // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead). guard let windowScene = (scene as? UIWindowScene) else { return } window = UIWindow(windowScene: windowScene) let storybard = UIStoryboard(name: &quot;Main&quot;,bundle: nil) // 初めて起動しているか if(lanchIsFIrstTme()){ window?.rootViewController = storybard.instantiateViewController(identifier: &quot;FirstView&quot;) firstLanch() }else{ window?.rootViewController = storybard.instantiateViewController(identifier: &quot;SecondView&quot;) } window?.makeKeyAndVisible()} 4. [おまけ]初回起動時のみ特定の画面を表示させる一つ前で実装した切り替え処理とユーザーデフォルト機能を組み合わせて、初回起動かどうかを判定する 確認用メソッドと登録用メソッドを作成 123456789private let STORED_KEY = &quot;lanched&quot;func firstLanch(){ return UserDefaults.standard.set(true,forKey: STORED_KEY)}func lanchIsFIrstTme() -&gt; Bool{ return !UserDefaults.standard.bool(forKey: STORED_KEY)} 一つ前で実装したコードを改変 12345678910111213141516171819func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) { // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`. // If using a storyboard, the `window` property will automatically be initialized and attached to the scene. // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead). guard let windowScene = (scene as? UIWindowScene) else { return } window = UIWindow(windowScene: windowScene) let storybard = UIStoryboard(name: &quot;Main&quot;,bundle: nil) // 初めて起動しているか if(lanchIsFIrstTme()){ window?.rootViewController = storybard.instantiateViewController(identifier: &quot;FirstView&quot;) firstLanch() }else{ window?.rootViewController = storybard.instantiateViewController(identifier: &quot;SecondView&quot;) } window?.makeKeyAndVisible()} こんな感じになればOK参考https://stackoverflow.com/questions/10428629/programmatically-set-the-initial-view-controller-using-storyboards/47691073","link":"/2021/03/01/%E3%80%90Xcode%E3%80%91EntryPoint%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/"},{"title":"インラインCSSと内部CSSいついて","text":"1.インラインCSS : body内の各種タグの中に記述する 一つ一つのタグに設定する必要がある インラインCSSと呼ばれる書き方で、直接タグの中でstyle属性を指定する 1style=属性:&quot;属性値&quot; color属性で色を変える例 1&lt;p style=&quot;color:blue&quot;&gt;今回は、新しくリリースするプロダクトの紹介をします&lt;/p&gt; 複数の属性指定したい場合、;を入力することで指定できる 1&lt;p style=&quot;color:blue;font-size:300%&quot;&gt;今回は、新しくリリースするプロダクトの紹介をします&lt;/p&gt; 2.内部CSS : headタグ内に記述する headタグの内部に記述するCSS 具体的にはheadブロック内にstyleブロックを作成し、そこにスタイルを記述する12345678910&lt;html&gt; &lt;head&gt; &lt;style&gt; &lt;!--ここにスタイルを記述する--&gt; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; スタイルの記述には２通りの方法がある タグ全体に適応する 指定した領域のみに適応する 1. タグ全体に適応する styleブロック内にタグ名のブロックを作り、そこにスタイルを記述する 複数のスタイルを記述する場合、;で区切る1234567&lt;style&gt;&lt;!--pタグ内の全てのテキストにここに記述したレイアウトが適応される--&gt; p{ color:blue; font-size:150%; }&lt;/style&gt; 2. 指定した領域のみに適応する class属性を使用する 複数のタグに適応できる id属性を使用する １つのタグのみに適応できる span属性を使用する 特定の文字列適応する 1. class属性を使用する class属性にクラス名を指定し、styleブロックに.クラス名でスタイルを記述する 同一のクラス名を他のタグにも割り当てることができる123456789101112131415&lt;html&gt; &lt;head&gt; &lt;style&gt; .A{ color:blue; font-size:150%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class=&quot;A&quot;&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p class=&quot;A&quot;&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p&gt; クラス名を指定していません&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 2. id属性を使用する id属性を定義してid名を指定して、styleブロックに#id名でスタイルを記述する 1つのタグにしか適応できない123456789101112131415&lt;html&gt; &lt;head&gt; &lt;style&gt; #B{ color:blue; font-size:150%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 id=&quot;B&quot;&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p&gt;&lt;クラス名を指定していません/p&gt; &lt;p&gt; クラス名を指定していません&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 3. span属性を使用する spanタグ(&lt;span&gt;&lt;/span&gt;)を定義してclass属性にクラス名を指定して、styleブロックに.クラス名でスタイルを記述する class idとの違いは、タグに対するレイアウトではなく、文字列に対するレイアウトである点123456789101112131415&lt;html&gt; &lt;head&gt; &lt;style&gt; .C{ color:blue; font-size:150%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p&gt;クラス名を&lt;span class=&quot;C&quot;&gt;指定&lt;/span&gt;していません&lt;/p&gt; &lt;p&gt;クラス名を指定していません&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;","link":"/2021/03/03/%E3%82%A4%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3CSS%E3%81%A8%E5%86%85%E9%83%A8CSS%E3%81%84%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【Zsh】Zsh拡張フレームワーク「Prezto」","text":"参考 https://github.com/sorin-ionescu/prezto https://qiita.com/s_of_p/items/33c9b18f0dc47ce29024 https://qiita.com/yasudanaoya/items/8b928cfadbf702108ba3 インストール方法1. Zshを起動する1$ zsh 2. リポジトリをクローンする ${ZDOTDIR:-$HOME}とは？ $ZDOTDIR : .zshrcの保存場所を設定する環境変数 $HOME : ホームディレクトリ :- : 左辺の値が設定されていor空文字列であれば、右辺に設定されてる値が使用される1$ git clone --recursive https://github.com/sorin-ionescu/prezto.git &quot;${ZDOTDIR:-$HOME}/.zprezto&quot; 3. 今まで使っていた設定ファイルを移動させる1$ mkdir zsh_orig &amp;&amp; mv zshmv .zlogin .zlogout .zprofile .zshenv .zshrc zsh_orig 4. 各コンフィグファイルへのシンボリックリンクを作成する1234$ setopt EXTENDED_GLOBfor rcfile in &quot;${ZDOTDIR:-$HOME}&quot;/.zprezto/runcoms/^README.md(.N); do ln -s &quot;$rcfile&quot; &quot;${ZDOTDIR:-$HOME}/.${rcfile:t}&quot;done 5. zshをデフォルトシェルに設定 chsh : ログインシェルを変更する1$ chsh -s /bin/zsh テーマの設定テーマ一覧を見てみる1$ prompt -s テーマを設定する1$ prompt -s テーマ名 Macの場合prompt -sだと、そのセッションではテーマが変更されるが、再起動ログインし直すとデフォルトのテーマになってしまうので、設定~/.zshrcに追記しておく必要がある1234567$ prompt -s powerlineSet and save not yet implemented. Please ensure your ~/.zshrccontains something similar to the following: autoload -Uz promptinit promptinit prompt powerline powerlineを使用する場合、特殊なフォントが必要 以下GitHubのリポジトリをダウンロードhttps://github.com/powerline/fonts 適当なディレクトリに移動後 1git clone https://github.com/powerline/fonts.git install.shを叩く 12$ cd fonts$ ./install.sh 使用しているターミナルでフォントを設定 文字列にPowerlineが入っていれば使えるはず","link":"/2021/03/09/%E3%80%90Zsh%E3%80%91Zsh%E6%8B%A1%E5%BC%B5%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%80%8CPrezto%E3%80%8D/"},{"title":"テキストレイアウトについて","text":"参考URLw3schools.com strong(太文字) &lt;b&gt;&lt;/b&gt;で表現をすることもできるが、HTML5からは、&lt;strong&gt;&lt;/strong&gt;タグが推奨されている 人が目視で確認する時に、&lt;strong&gt;&lt;/strong&gt;の方が読みやすいから 1これは&lt;strong&gt;太文字&lt;/strong&gt;だよ em(イタリック)タグ &lt;i&gt;&lt;/i&gt;で表現することもできるが、HTML5からは、&lt;em&gt;&lt;/em&gt;タグが推奨されている em = Enphasize 1これは&lt;em&gt;イタリック文字&lt;/em&gt;だよ ins(下線)タグ &lt;u&gt;&lt;/u&gt;で表現でこともできるが、HTML5からは、&lt;ins&gt;&lt;/ins&gt;タグが推奨されている ins = insert 1&lt;p&gt;これは&lt;ins&gt;下線&lt;/ins&gt;だよ&lt;/p&gt; sup(上付き文字)タグ sup = Superscript1&lt;p&gt;これは&lt;sup&gt;上付き文字&lt;/sup&gt;だよ&lt;/p&gt; sub(下付き文字)タグ sub = Subscript1&lt;p&gt;これは&lt;sub&gt;下付き文字&lt;/sub&gt;だよ&lt;/p&gt; del(打ち消し)タグ del = delete1&lt;p&gt;これは&lt;del&gt;打ち消し&lt;/del&gt;だよ&lt;/p&gt; hr(区切り線)タグ 自己完結型(&lt;/hr&gt;がいらない) 勝手に改行が入る hr = Horizontal Rule1ここから下に区切り線が入る&lt;hr&gt;ここから上に区切り線が入る mark(ハイライト)タグ mark = marking 1&lt;p&gt;これは&lt;mark&gt;ハイライト&lt;/mark&gt;だよ&lt;/p&gt;","link":"/2021/02/05/%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"リストについて","text":"ul(番号なしリスト)タグ ul = Unorderd List &lt;ul&gt;&lt;/ul&gt;で指定するのはリストのタイトル li(項目)タグ li = List Item &lt;li&gt;&lt;/li&gt;リスト内の項目を記述する 1234567&lt;ul&gt;曜日 &lt;li&gt;月&lt;/li&gt; &lt;li&gt;火&lt;/li&gt; &lt;li&gt;水&lt;/li&gt; &lt;li&gt;木&lt;/li&gt; &lt;li&gt;金&lt;/li&gt;&lt;/ul&gt; ol(番号付きリスト)タグ ol = Ordered List 基本はul(番号なしリスト)と同じだが、オプションをつけることができる オプション複数のオプションを同時に指定も可能 &lt;ol start=&quot;番号&quot;&gt; : 振られる番号のスタート数字を変更する &lt;ol reversed&gt; : 番号を逆順にする &lt;ol type=&quot;&quot;&gt; : 番号の表現を変える 1,A,l,a,i li(項目)タグ li = List Item &lt;li&gt;&lt;/li&gt;リスト内の項目を記述する 1234567&lt;ol start=&quot;4&quot; reversed&gt;曜日 &lt;li&gt;月&lt;/li&gt; &lt;li&gt;火&lt;/li&gt; &lt;li&gt;水&lt;/li&gt; &lt;li&gt;木&lt;/li&gt; &lt;li&gt;金&lt;/li&gt;&lt;/ol&gt;","link":"/2021/02/06/%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"テーブルについて","text":"table(テーブル)を生成する方法 &lt;table&gt;&lt;/table&gt;タグを使用して、テーブルセクションを作成する123&lt;table&gt; テーブルの内容の記述&lt;/table&gt; テーブルの内容を追加する行とデータを別々に記述する必要がある &lt;tr&gt;&lt;/tr&gt;タグで行を生成 tr = table row &lt;td&gt;&lt;/td&gt;タグで行内の要素指定 td = table data 12345678910111213141516171819ラーメン値段表 &lt;!--タイトルのつもり--&gt;&lt;table&gt; &lt;tr&gt; &lt;td&gt;塩ラーメン&lt;/td&gt; &lt;td&gt;299&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;豚骨ラーメン&lt;/td&gt; &lt;td&gt;399&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;醤油ラーメン&lt;/td&gt; &lt;td&gt;499&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;味噌ラーメン&lt;/td&gt; &lt;td&gt;599&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; もう少しリッチな表現を入れる枠線をつける &lt;table&gt;タグにborder属性を記述する12345678910111213141516171819ラーメン値段表 &lt;!--タイトルのつもり--&gt;&lt;table border&gt; &lt;tr&gt; &lt;td&gt;塩ラーメン&lt;/td&gt; &lt;td&gt;299&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;豚骨ラーメン&lt;/td&gt; &lt;td&gt;399&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;醤油ラーメン&lt;/td&gt; &lt;td&gt;499&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;味噌ラーメン&lt;/td&gt; &lt;td&gt;599&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 見出しをつける &lt;thead&gt;&lt;/thead&gt;タグでヘッダーセクションを生成する thead = table head &lt;tr&gt;&lt;/tr&gt;タグで行セクションを生成する &lt;th&gt;&lt;/th&gt;タグでヘッダー情報を記述する ヘッダーと本文を区別するために本文部分は&lt;tbody&gt;&lt;/tbody&gt;セクションで囲む 12345678910111213141516171819202122232425262728ラーメン値段表 &lt;!--タイトルのつもり--&gt;&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;ラーメン名&lt;/th&gt; &lt;th&gt;価格&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;塩ラーメン&lt;/td&gt; &lt;td&gt;299&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;豚骨ラーメン&lt;/td&gt; &lt;td&gt;399&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;醤油ラーメン&lt;/td&gt; &lt;td&gt;499&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;味噌ラーメン&lt;/td&gt; &lt;td&gt;599&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;","link":"/2021/02/10/%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"リンクについて","text":"a hrefを使用してリンクする a = Anker href = hiper reference hrefにURL or パス リンクの種類href属性にURLを指定する 絶対リンク 相対リンク タグを使うことでリンクさせる アンカーリンク 絶対リンク ホームディレクトリからのパスorhttp://xxxに移動する1&lt;a href=&quot;http://www.wikipedia.org&quot;&gt; 相対リンク 今のディレクトリからの相対的なリンクに移動する1&lt;a href=&quot;table.html&quot;&gt;table.htmlへのリンク&lt;/a&gt; アンカーリンク ページ内で移動する(スクロール位置を移動する) aタグのhrefに任意の識別子を指定 pタグのid属性にaタグで指定した識別子と同じ識別子を指定12345678910&lt;p id=&quot;top&quot;&gt;&lt;a href=&quot;http://www.google.com&quot;&gt;google検索&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;table.html&quot;&gt;テーブル.htmlへのリンク&lt;/a&gt;&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;#top&quot;&gt;トップへ戻る&lt;/a&gt;&lt;/p&gt; 画像にリンクを設置する imgタグを&lt;a href=&quot;&quot;&gt;で囲む123&lt;a href=&quot;http://www.google.com&quot;&gt; &lt;img src=&quot;image.png&quot;&gt;&lt;/a&gt;","link":"/2021/02/10/%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"画像を扱う","text":"img(画像)タグ 自己完結型のタグ 画像へのパスはホットリンクを使うこともできる ホットリンク = 動的に他のウェブ上の画像をリンクする 1&lt;img src=&quot;画像へのパス&quot;&gt; サイズ変更(ピクセル数を指定) width=&quot;&quot; : 幅を指定 height=&quot;&quot; : 高さを指定 小ネタ 上下でイメージを配置したい場合、&lt;p&gt;&lt;/p&gt;を使うといい 12&lt;p&gt;&lt;img src=&quot;image.png&quot; width=&quot;100&quot; height=&quot;40&quot;&gt;&lt;/p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-QNMuJ-k-bYU/X68bIi2gjjI/AAAAAAABcUs/39kmQwXcZPM3w4s8O1vrcIswGqd2r6EWgCNcBGAsYHQ/s400/fantasy_unicorn_rainbow.png&quot;&gt;","link":"/2021/02/08/%E7%94%BB%E5%83%8F%E3%82%92%E6%89%B1%E3%81%86/"},{"title":"段落と改行について","text":"p(Paragraf)タグ段落を表現するためのタグ 12&lt;p&gt;これは１つ目の段落です&lt;/p&gt;&lt;p&gt;これは２つ目の段落です&lt;/p&gt; br(Line Break)タグ改行を表現するためのタグ 1改行したい場合&lt;br&gt;を入れる 使用例コード123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;タイトル&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;これは１つ目の段落です。好きな食べ物はラーメンです。&lt;br&gt;ここには改行が入ることが望ましいです&lt;/p&gt; &lt;p&gt;これは2つ目の段落です。嫌いな食べ物はカマキリです。&lt;/p&gt; 何も指定指定ない１ 何も指定指定ない2 何も指定指定ない3 何も指定指定ない4 &lt;p&gt;あ&lt;br&gt;い&lt;br&gt;う&lt;br&gt;え&lt;br&gt;お&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 結果123456789101112これは１つ目の段落です。好きな食べ物はラーメンです。ここには改行が入ることが望ましいですこれは2つ目の段落です。嫌いな食べ物はカマキリです。何も指定指定ない１ 何も指定指定ない2 何も指定指定ない3 何も指定指定ない4あいうえお","link":"/2021/02/07/%E6%AE%B5%E8%90%BD%E3%81%A8%E6%94%B9%E8%A1%8C%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"自作ソート【Swift】","text":"目的 ソートアルゴリズムの基本を身につける Swiftになれる 要件 数字をソートアルゴリズムを使ってソートする(Swiftのソート関数は使わない) 日本語ひらがな、アルファベット小文字の1文字をソートする インプットは数字の場合と、文字の場合がある (ただし、文字と数字の組み合わせはない、どちらか1種類のみの羅列が入力される) 最後に昇順 or 降順の指定がある ユーザーは決まった手順を守るとは限らないので、その場合の例外の対応方法の組み込み (無理矢理処理しても、エラーを返してもいい)k コード123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194import UIKitlet testValue1:String = &quot;24,6723,23,111,43,1,昇順&quot;let testValue2:String = &quot;え,い,う,か,と,昇順&quot;let testValue3:String = &quot;-2,-22347999,あ,2,い,3,-1,ああ,昇順&quot;enum OrderType:String{ case none = &quot;例外&quot; case ascending = &quot;昇順&quot; case descending = &quot;降順&quot;}enum ValueType:String{ case Iregular = &quot;例外&quot; case Number = &quot;数字&quot; case Charactor = &quot;ローマ字&quot; case Japanese = &quot;日本語&quot;}// ============= メイン処理 ==============// 入力された文字列を分割var inputValueList = testValue3.split(separator: &quot;,&quot;)// ソートタイプのチェックvar orderType:OrderType = OrderType(rawValue: String(inputValueList.last ?? &quot;&quot;)) ?? OrderType.noneif(orderType == OrderType.none){ print(&quot;ソート方法を指定してください&quot;) print(&quot;指定がないため、昇順ソートを行います&quot;) orderType = OrderType.ascending}else{ // ソート指定は邪魔なので取り除く inputValueList.removeLast()}// 入力文字列のタイプを判定let valueType = CheckValueType(targetValueList: inputValueList)// ソート処理var sortedNumberList:Array&lt;Substring&gt; = Array&lt;Substring&gt;()sortedNumberList = Sort(targetNumberList:inputValueList)// 何をソートしたか表示switch valueType {case .Number: print(ValueType.Number.rawValue + &quot;ソート完了&quot;)case .Charactor: print(ValueType.Charactor.rawValue + &quot;ソート完了&quot;)case .Japanese: print(ValueType.Japanese.rawValue + &quot;ソート完了&quot;)case .Iregular: print(ValueType.Iregular.rawValue + &quot;ソート完了&quot;)}// ソートタイプによって出力を切り替えswitch orderType {case .ascending: print(sortedNumberList)case .descending: print(Array(sortedNumberList.reversed()))case .none: print(&quot;ソート失敗&quot;)}// =====================================// ============== メソッド ===============// 値のタイプを判定func CheckValueType(targetValueList:Array&lt;Substring&gt;)-&gt; ValueType{ var retVal : ValueType = ValueType.Iregular let targetValueCount = targetValueList.count var numberCount = 0 var charCount = 0 var japaneseCount = 0 // 数字の並びかチェック for i in 0...inputValueList.count - 1{ let str:Int = Int(inputValueList[i].cString(using: .shiftJIS)!.first!) if(str &gt;= 48 &amp;&amp; str &lt;= 57){ // 数字 numberCount += 1 }else if(str &gt;= 97 &amp;&amp; str &lt;= 122){ // 小文字 charCount += 1 }else if(str &gt;= 65 &amp;&amp; str &lt;= 90){ // 大文字 charCount += 1 }else if(str == -125){ // ひらがな japaneseCount += 1 }else if(str == -126){ // カタカナ japaneseCount += 1 } } if(numberCount == targetValueCount){ retVal = ValueType.Number }else if(charCount == targetValueCount){ retVal = ValueType.Charactor }else if(japaneseCount == targetValueCount){ retVal = ValueType.Japanese }else{ retVal = ValueType.Iregular } return retVal}// ソート処理func Sort(targetNumberList:Array&lt;Substring&gt;)-&gt;Array&lt;Substring&gt;{ var sortList = targetNumberList var isChange = false for index in 0...sortList.count - 1{ if(index + 1 == sortList.count) { break } let firstList = sortList[index].cString(using: .shiftJIS)! var firstSign = 1 var firstJapaneseSign = 0 let firstCheckValue = firstList.first! if(firstCheckValue == 45 ) // マイナス符号 { firstSign = -1 } if(firstCheckValue == -125 || // ひらがな firstCheckValue == -126) // カタカナ { firstJapaneseSign = Int(firstCheckValue) * -1 } var first:Int = 0 for fc in firstList{ first += Int(fc) * firstSign } if(firstJapaneseSign != 0){ first *= firstJapaneseSign } let secondList = sortList[index+1].cString(using: .shiftJIS)! var secondSign = 1 var secondJapaneseCheckSign = 0 let secondCheckValue = secondList.first! if(secondCheckValue == 45) // マイナス符号 { secondSign = -1 } if(secondCheckValue == -125 || // ひらがな secondCheckValue == -126) // カタカナ { secondJapaneseCheckSign = Int(secondCheckValue) * -1 } var second:Int = 0 for sc in secondList{ second += Int(sc) * secondSign } if(secondJapaneseCheckSign != 0){ second *= secondJapaneseCheckSign } let firstValue = sortList[index] let secondValue = sortList[index+1] if(first &gt; second) { isChange = true sortList[index] = secondValue sortList[index + 1] = firstValue } } if(isChange){ sortList = Sort(targetNumberList: sortList) } return sortList}// ======================================= 備考（感想） 文字コード変換する時に全てShiftJISのコードで変換されてしまった(未解決) 今回使ったソートアルゴリズムは「バブルソート」 小数に対応していない","link":"/2021/02/24/%E8%87%AA%E4%BD%9C%E3%82%BD%E3%83%BC%E3%83%88%E3%80%90Swift%E3%80%91/"},{"title":"入力補完プラグイン「Deoplete」の導入方法","text":"vimにdeopleteを入れるインストールに前提条件の多いPluginなので詰まるところが多かった 環境 M1 Mac macOS Big Sur(11.2) vim 8.2 公式の手順 Shougo/deoplete 日本語訳最初に注意: deoplete はVimで使用する場合でも Neovim (最新のものを推奨) が必要Vimを使用する場合Vimバージョン8.1以上 で Python 3.6.1以上 とtimersが有効になっている必要がある。 注意: deopleteはmsgpackパッケージ1.0.0+を必要とします。pipでmsgpackパッケージをインストール/アップグレードしてください。msgpack/msgpack-python 注意: どうしても古い msgpack を使う必要がある場合は、代わりに deoplete ver.5.2 を使ってください。Shougo/deoplete.vim 要件 neovimをインストールしておく 1pip3 install --user pyvim neovimでpython3が有効かを確認 nvimを起動して以下のコマンドで1が出るか確認1:echo has(&quot;python3&quot;) .vimrcに記述 今回はプラグイン管理ツールのVundleを使用する 123Plugin 'Shougo/deoplete.nvim'Plugin 'roxma/nvim-yarp'Plugin 'roxma/vim-hug-neovim-rpc' 12&quot; deopleteをVim起動時に有効にするlet g:deoplete#enable_at_startup = 1 :PluginInstallでインストール トラブル対応ファイルを開くとエラーが表示される1[deoplete] deoplete failed to load. Try the :UpdateRemotePlugins command and restart Neovim. See also :checkhealth. 参考サイトdeoplete.nvimのエラー解消","link":"/2021/02/18/%E5%85%A5%E5%8A%9B%E8%A3%9C%E5%AE%8C%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%80%8CDeoplete%E3%80%8D%E3%81%AE%E5%B0%8E%E5%85%A5%E6%96%B9%E6%B3%95/"},{"title":"【Shell】1つのコマンドで複数行入力する","text":"目次 echoコマンド 複数行をいっぺんに入力する「ヒアドキュメント」 使用例 echoコマンド通常echoコマンドを使用すると、1行をファイルに追記できます。 新規ファイルに文字列を記述する場合 1$ echo &quot;テスト&quot; &gt; t.txt 既存のファイルに追記する 1$ echo &quot;テスト&quot; &gt;&gt; t.txt 複数行をいっぺんに入力する「ヒアドキュメント」ヒアドキュメントは特定の文字列が入力されるまで、まとめて入力としして扱う機能です。 1$ cat &lt;&lt; '終了文字列' &gt; ファイル名 使用例t.txtにEOFが入力されるまで入力された文字列を追記する 1$ cat &lt;&lt; 'EOF' &gt; t.txt","link":"/2021/04/16/%E3%80%90Shell%E3%80%911%E3%81%A4%E3%81%AE%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7%E8%A4%87%E6%95%B0%E8%A1%8C%E5%85%A5%E5%8A%9B%E3%81%99%E3%82%8B/"},{"title":"【Shell】長いコマンドをわかりやすく入力する","text":"目次 長いコマンドを読みやすくする 使用例 長いコマンドを読みやすくするサブコマンドやスイッチを指定することでコマンドが長くなることがあります。そのままでは、読みにくくなってしまうので、バックスラッシュ(\\)を使うことで、複数の行に分割することができます。 バックスラッシュは日本語環境では()で表示されることがあります。 使用例\\を入力数前にスペースを入力する必要があります。 123$ git log \\ --oneline \\ --graph","link":"/2021/04/17/%E3%80%90Shell%E3%80%91%E9%95%B7%E3%81%84%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E3%82%8F%E3%81%8B%E3%82%8A%E3%82%84%E3%81%99%E3%81%8F%E5%85%A5%E5%8A%9B%E3%81%99%E3%82%8B/"},{"title":"【Gif】Gitで使えるgrepコマンド","text":"目次 特定のコミットメッセージのコミットを探す 使用例 特定の文字列を含むファイルを探す 使用例 特定のコミットメッセージのコミットを探す特定の文字列にマッチするコミットメッセージだけを表示させるには、git log --grepスイッチを使います。 使用例Fixの文字列が含まれているコミットを見つける --grep=検索したい文字列1234567891011121314151617181920$ git log --grep=Fixcommit b93d9bcf41deefc93306cbc1d77b049ac044db6fAuthor: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Sat Apr 3 10:18:57 2021 +0900 Fix EnemyInfo.cs to Load Jsoncommit 9dab8e9f4d6c49c912b138a6e0a7d53f210762c7Author: daiki_iijima &lt;daiki.applecreate@gmail.com&gt;Date: Tue Mar 30 08:54:42 2021 +0900 Fix EnemyManager.cs Downcast Errorcommit 9140b13f20ee6aa20a1c7d519fce99f1dca447cfAuthor: daiki_iijima &lt;daiki.applecreate@gmail.com&gt;Date: Tue Mar 30 08:54:01 2021 +0900 Fix Mat_Orca.mat 特定の文字列を含むファイルを探す特定の文字列を含むファイルを探している場合は、git grepコマンドを使います。 使用例Orcaを含むファイルを探す 検索するファイル名を指定する必要はなく、リポジトリ内のすべてのファイルから検索してくれる 表示される内容 = ファイル名:指定した文字列を含んでいる１行1234567$ git grep OrcaGitHubでブログを作成する.md:title: GitHubでブログを作成する(Hexo)GitHubでブログを作成する.md:- [GitHub]GitHubでブログを作成する.md:## 3. HexoにGit操作用ツールを追加GitHubでブログを作成する.md:# GitHubでブログ用のリポジトリを作成するGitHubでブログを作成する.md:username = GitHubのユーザー名","link":"/2021/04/15/%E3%80%90Gif%E3%80%91Git%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8Bgrep%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/"},{"title":"【GitHub】既存のローカルリポジトリをGitHubで管理する","text":"目次 操作手順 1. GitHubで管理用リポジトリを作成する 2. ローカルリポジトリにリモートリポジトリを追加する 3. ブランチをGitHubに合わせる 4. ローカルリポジトリのブランチをpushする 操作手順今回は、解説のためにtestリポジトリをGitHub上に作成します。 1. GitHubで管理用リポジトリを作成するGitHubからクローンしてくるときのURLを取得する 2. ローカルリポジトリにリモートリポジトリを追加するgit remote add origin URLを使用してローカルリポジトリにベアリポジトリを紐付ける 1$ git remote add origin https://github.com/Daiki-Iijima/test.git 3. ブランチをGitHubに合わせる現在いるブランチをmaster(main)ブランチに変更すします。これは、GitHubの仕様変更で、デフォルトブランチがmasterからmainに変わったことによる対応です。 -M: 今いるブランチ名を強制的にmainに変更します。 1$ git branch -M main 4. ローカルリポジトリのブランチをpushするブランチをリモートリポジトリに反映しながらpushします。 1$ git push -u origin main","link":"/2021/04/21/%E3%80%90GitHub%E3%80%91%E6%97%A2%E5%AD%98%E3%81%AE%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92GitHub%E3%81%A7%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B/"},{"title":"【Git】rebaseを使うとき","text":"目次 ローカルリポジトリかつローカルブランチのときに使うようにしよう 利用ケース1 : コミット履歴の整理 冗長なコミットとは？ 使用例 中止したいとき 利用ケース2 : ブランチの親の変更を取り込む ローカルリポジトリかつローカルブランチのときに使うようにしようリベースコマンドは、既存のコミットを書き換えることができる強力なコマンドで、書き換えたコミットのSHA1が書き換わってしまうので、すでにPushしてあるコミットに対してリベースを行ってしまうと、他の作業者ローカルリポジトリとの整合性が取れなくなってしまいとても面倒くさい事になってしまいます。 なので、リベースコマンドを使用するときは、影響範囲が狭い、ローカルリポジトリのローカルブランチ(開発用ブランチ)のみに使用する用にしましょう。 利用ケース1 : コミット履歴の整理開発が終了して、マスターブランチにマージする前に今までのローカルブランチのコミット履歴の中で、冗長なコミットをスカッシュ(squash:潰して合成)するために使用します。 冗長なコミットとは？ typeの修正 コミット忘れの追加コミットなど 使用例 まとめたいコミットのSHA1を探す今回は、2,3の追加に4,5,の追加をスカッシュするので、2,3の追加の１つ前のコミットSHA1を探す12345$ git log --oneline5b57433 (HEAD -&gt; master) 4,5の追加52f0632 2,3の追加61e4e43 1の追加 リベースを行う -i : interactive 1$ git rebase -i 61e4e43 スカッシュする以下のようなエディタ画面が表示される123456789101112131415161718192021222324252627pick 52f0632 2,3の追加pick 5b57433 4,5の追加# Rebase 61e4e43..5b57433 onto 61e4e43 (2 commands)## Commands:# p, pick &lt;commit&gt; = use commit# r, reword &lt;commit&gt; = use commit, but edit the commit message# e, edit &lt;commit&gt; = use commit, but stop for amending# s, squash &lt;commit&gt; = use commit, but meld into previous commit# f, fixup &lt;commit&gt; = like &quot;squash&quot;, but discard this commit's log message# x, exec &lt;command&gt; = run command (the rest of the line) using shell# b, break = stop here (continue rebase later with 'git rebase --continue')# d, drop &lt;commit&gt; = remove commit# l, label &lt;label&gt; = label current HEAD with a name# t, reset &lt;label&gt; = reset HEAD to a label# m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]# . create a merge commit using the original merge commit's# . message (or the oneline, if no original merge commit was# . specified). Use -c &lt;commit&gt; to reword the commit message.## These lines can be re-ordered; they are executed from top to bottom.## If you remove a line here THAT COMMIT WILL BE LOST.## However, if you remove everything, the rebase will be aborted.# pick 5b7433の部分をsquash 5b7433に書き換えて、保存終了(vimの場合、ZZ) 123456789101112131415161718192021222324252627pick 52f0632 2,3の追加squash 5b57433 4,5の追加# Rebase 61e4e43..5b57433 onto 61e4e43 (2 commands)## Commands:# p, pick &lt;commit&gt; = use commit# r, reword &lt;commit&gt; = use commit, but edit the commit message# e, edit &lt;commit&gt; = use commit, but stop for amending# s, squash &lt;commit&gt; = use commit, but meld into previous commit# f, fixup &lt;commit&gt; = like &quot;squash&quot;, but discard this commit's log message# x, exec &lt;command&gt; = run command (the rest of the line) using shell# b, break = stop here (continue rebase later with 'git rebase --continue')# d, drop &lt;commit&gt; = remove commit# l, label &lt;label&gt; = label current HEAD with a name# t, reset &lt;label&gt; = reset HEAD to a label# m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]# . create a merge commit using the original merge commit's# . message (or the oneline, if no original merge commit was# . specified). Use -c &lt;commit&gt; to reword the commit message.## These lines can be re-ordered; they are executed from top to bottom.## If you remove a line here THAT COMMIT WILL BE LOST.## However, if you remove everything, the rebase will be aborted.# コミットメッセージを編集するsquashするコミットを選択してエディタを終了すると、以下のような画面が表示される12345678910111213141516171819202122232425262728# This is a combination of 2 commits.# This is the 1st commit message:2,3の追加# This is the commit message #2:4,5の追加# Please enter the commit message for your changes. Lines starting# with '#' will be ignored, and an empty message aborts the commit.## Date: Tue Apr 13 09:19:56 2021 +0900## interactive rebase in progress; onto 61e4e43# Last commands done (2 commands done):# pick 52f0632 2,3の追加# squash 5b57433 4,5の追加# No commands remaining.# You are currently rebasing branch 'master' on '61e4e43'.## Changes to be committed:# new file: 2# new file: 3# new file: 4# new file: 5# # This is theとなっている部分を消去して、新しいコミットメッセージを入力して、保存終了(vimの場合、ZZ) 12345678910111213141516171819202122# This is a combination of 2 commits.2,3,4,5の追加# Please enter the commit message for your changes. Lines starting# with '#' will be ignored, and an empty message aborts the commit.## Date: Tue Apr 13 09:19:56 2021 +0900## interactive rebase in progress; onto 61e4e43# Last commands done (2 commands done):# pick 52f0632 2,3の追加# squash 5b57433 4,5の追加# No commands remaining.# You are currently rebasing branch 'master' on '61e4e43'.## Changes to be committed:# new file: 2# new file: 3# new file: 4# new file: 5# git logでコミットを確認して１つになっていれば完了1234$ git log --oneline8a0979f (HEAD -&gt; master) 2,3,4,5の追加61e4e43 1の追加 中止したいとき1$ git rebase --abort 利用ケース2 : ブランチの親の変更を取り込むローカルブランチの開始地点を変更することで、更新のあった親ブランチの変更を取り込んむたくなるときに使用します。 1$ git rebase master","link":"/2021/04/19/%E3%80%90Git%E3%80%91rebase%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D/"},{"title":"【Git】ミスった時の対処法","text":"目次 リベースやコミットを取り消したいとき リベースやコミットを取り消したいとき注意::このコマンドで戻すことができるのは、gitで管理しているファイルのみです。 git reflogを使用して、コマンドの履歴を取得するgit reflogはHEADの参照の変更が行われた時の履歴を表示できるコマンドです。 12345678910$ git reflog8a0979f (HEAD -&gt; master) HEAD@{0}: rebase (finish): returning to refs/heads/master8a0979f (HEAD -&gt; master) HEAD@{1}: rebase (squash): 2,3,4,5の追加52f0632 HEAD@{2}: rebase (start): checkout 61e4e435b57433 HEAD@{3}: rebase (abort): updating HEAD61e4e43 HEAD@{4}: rebase (start): checkout 61e4e435b57433 HEAD@{5}: commit: 4,5の追加52f0632 HEAD@{6}: commit: 2,3の追加61e4e43 HEAD@{7}: commit (initial): 1の追加 git reset --hard HEAD@{番号}でリポジトリを巻き戻す--hardスイッチを使用すると、ステージングエリアと作業ディレクトリの療法がリセットされ、リポジトリの状態が正しく戻されます。もし、gitで管理していないファイルが悪さをする場合は、git clean -fコマンドも併用するといいかもしれません。 ここで、指定するのは、戻したいコマンドを使用する１つ前のHEAD番号です。今回使用しているリポジトリのリベース前に戻したい場合はHEAD@{5}を指定することになります。1$ git reset --hard HEAD@{5}","link":"/2021/04/20/%E3%80%90Git%E3%80%91%E3%83%9F%E3%82%B9%E3%81%A3%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/"},{"title":"【Git】付箋を貼り付ける","text":"目次 コミットに任意のノートを追加する 使い方 ノートのリストを取得する ノートの本体ハッシュからノートを参照 コミットに任意のノートを追加する使い方としては、すでに作成してあるコミットでバグの発生源が追加されたとわかった場合、コミットメッセージは変えずに、付箋(ノート)としてコメントを追加できる機能です。 使い方SHA1でコミットを指定します。 git notes add SHA1と入力して、エディタを起動する git notes add -m &quot;メモ&quot; SHA1で、コミットメッセージの用に入力する ノートのリストを取得する左側がノートのハッシュ、右側がノートに紐付いているコミットのハッシュ 123$ git notes list0e55988da9b4ff62d5be0872917e423bbc29065c 410a88f4a86a9f0cd41a8ae84e717980a8ebc036 ノートの本体ハッシュからノートを参照123$ git notes show 0e55988da9b4ff62d5be0872917e423bbc29065c これはノートです。","link":"/2021/04/18/%E3%80%90Git%E3%80%91%E4%BB%98%E7%AE%8B%E3%82%92%E8%B2%BC%E3%82%8A%E4%BB%98%E3%81%91%E3%82%8B/"},{"title":"【Git】設定ファイルの優先順位","text":"目次 設定ファイルの種類 優先順位 設定されている値を表示する 設定ファイルの種類 local : リポジトリ内 global : ユーザー内 system : PC全体 優先順位設定ファイルの効果が出る 設定されている値を表示する local : git config --local --list global : git config --global --list system : git config --system --list","link":"/2021/04/22/%E3%80%90Git%E3%80%91%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%84%AA%E5%85%88%E9%A0%86%E4%BD%8D/"},{"title":"【Git】空のコミットをする","text":"目次 リポジトリの最初のコミットをからの状態にしておくと後々使いやすいかもしれない(諸説あり) 使い方 リポジトリの最初のコミットをからの状態にしておくと後々使いやすいかもしれない(諸説あり)まっさらな状態のリポジトリからbranchを作りたくなった場合が発生して、そのリポジトリの最初のコミットが空だったらどれだけ楽かと思ったことがあったので、調べたところcommitコマンドに--allow-emptyというスイッチがありました。 使い方使い方は、通常のコミットに--allow-emptyスイッチを付けるだけです。 1$ git commit --allow-empty -m &quot;first commit&quot;","link":"/2021/04/23/%E3%80%90Git%E3%80%91%E7%A9%BA%E3%81%AE%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%82%92%E3%81%99%E3%82%8B/"},{"title":"【Git】基本的なマージの手順","text":"目次 手順 1. マージを取り込みたいブランチに移動する 2. マージコマンドを実行する 3.1 正常に完了した場合 表示される内容のサンプル 3.2 コンフリクトが発生した場合 表示される内容のサンプル 現在の状態を確認 コンフリクトを解決するには 手順今回はmasterにtブランチを取り込む 1. マージを取り込みたいブランチに移動するmasterブランチに移動 1$ git checkout master 移動できたか確認、masterの左側に*がついていればOK 1234$ git branch* mastert 2. マージコマンドを実行するmasterにtを取り込む(mergeする) 1$ git merge t 3.1 正常に完了した場合表示される内容のサンプル1234Updating d71dc36..bc5d29eFast-forward 1 | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) 正常にマージできているか確認する。このような表示が出ればOK 1234$ git statusOn branch masternothing to commit, working tree clean 3.2 コンフリクトが発生した場合表示される内容のサンプル123Auto-merging 1CONFLICT (content): Merge conflict in 1Automatic merge failed; fix conflicts and then commit the result. 現在の状態を確認Unmerged pathsの部分のファイルがコンフリクトを起こしているファイルです。今回のサンプルだと、1 というファイルがコンフリクトを起こしています。 123456789101112$ git statusOn branch masterYou have unmerged paths. (fix conflicts and run &quot;git commit&quot;) (use &quot;git merge --abort&quot; to abort the merge)Unmerged paths: (use &quot;git add &lt;file&gt;...&quot; to mark resolution) both modified: 1no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) コンフリクトを解決するにはコンフリクトを起こしているファイルを開きます。そうすると、以下のような表記の部分があるはずです。 1234567これはテスト文章です0&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADこれはテスト文章です2=======これはテスト文章です3&gt;&gt;&gt;&gt;&gt;&gt;&gt; tこれはテスト文章です2 この&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADから=========までが変更を取り込むブランチの変更、==========から&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; tまでが変更を取り込まれるブランチの変更です。 変更を取り込まない方の変更点を消して、&gt;&gt;&gt;,&lt;&lt;&lt;,===のgitによって追加された部分をすべて消去します。 変更を取り込むブランチ(masterブランチ)の変更を適応する場合のファイルの編集例 123これはテスト文章です0これはテスト文章です2これはテスト文章です2 編集後、編集したファイルをgit addしてから、コミットします。 add 1$ git add 1 commit、マージのコミットの場合、git commitのみで自動的にコミットメッセージが生成されます。git commitを実行するとエディタが開くので(Vimの場合)ZZをタイプして、エディタを抜けます。 1$ git commit 開かれたエディタ画面のサンプル 1234567891011121314151617Merge branch 't'# Conflicts:# 1## It looks like you may be committing a merge.# If this is not correct, please run# git update-ref -d MERGE_HEAD# and try again.# Please enter the commit message for your changes. Lines starting# with '#' will be ignored, and an empty message aborts the commit.## On branch master# All conflicts fixed but you are still merging.# 最後に正常にマージできているかgit statusで確認して、以下のような表示になればOK 1234$ git statusOn branch masternothing to commit, working tree clean","link":"/2021/04/24/%E3%80%90Git%E3%80%91%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E3%83%9E%E3%83%BC%E3%82%B8%E3%81%AE%E6%89%8B%E9%A0%86/"},{"title":"【Windows】PowerShellでスクリプトを実行できるようにする","text":"目次 スクリプトを実行するとエラーが表示される 解決策 全6種類のポリシー 1. 現在の状態を取得する 2. 設定を変更する スクリプトを実行するとエラーが表示される何も設定されていないWidnows PowerShellでスクリプトを実行しようとすると、以下のようなエラーが出てしまいます。 このエラーは、今のPowerShellはスクリプトを実行できる権限がありませんよ。ということらしいです。マルウェアなどの危険なスクリプトの不用意な実行を防ぐというセキュリティ状の配慮によるものらしいです。 今回のケースでは、静的ブログを作成できるフレームワークのhexoを実行しようとしたときに起こりましたした。 12345678hexo : このシステムではスクリプトの実行が無効になっているため、ファイル C:\\Users\\DaikiIijima\\AppData\\Roaming\\npm\\hexo.ps1 を読み込むことができません。詳細については、「about_Execution_Policies」(https://go.microsoft.com/fwlink/?LinkID=135170) を参照してください。発生場所 行:1 文字:1+ hexo new &quot;test&quot;+ ~~~~ + CategoryInfo : セキュリティ エラー: (: ) []、PSSecurityException + FullyQualifiedErrorId : UnauthorizedAccess 解決策全6種類のポリシー AllSigned : 署名付きのスクリプトのみ実行可能 Bypass : 検査巡回 RemoteSigned : ローカルスクリプトと署名追記のリモートスクリプトのみ実行可能 Restricted : 全て実行不可 Undefined : 未定義 Unrestricted : 全て実効可能 1. 現在の状態を取得する表示された、RestrictedをRemoteSignedに変更することで、スクリプトを実行できる状態にします。 123$ Get-ExecutionPolicyRestricted 2. 設定を変更する1Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process 再度状態を確認 123$ Get-ExecutionPolicyRemoteSigned","link":"/2021/04/26/%E3%80%90Windows%E3%80%91PowerShell%E3%81%A7%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/"},{"title":"【Git&amp;Unity】UnityYAMLMerge使用してシーンファイルをマージをする","text":"目次 SceneファイルのマージにはSmartMergeを使おう 設定方法 1. どのレベルに設定するか 2. 設定を追記する 3. UnityYAMLMergeが手に負えない場合の、手動マージツールを設定する 使用方法 SceneファイルのマージにはSmartMergeを使おうUnityので使用するシーンファイルのgit管理時のコンフリクト対応を手動で行うことは可能ではありますが、１つ間違えると、シーンが開けなくなる可能性があるので、基本的には、Unityが提供してくれているUnityYAMLMergeというツールを使うことをおすすめします。 設定方法以降の解説はGit(CUI)を使用して、SmartMergeを使用するための手順です。 1. どのレベルに設定するかUnityYAMLMergeをどの程度の範囲で利用したいかを考慮して、以下のディレクトリにあるconfigファイルに追記していきます。 local : $GIT_DIR/config global : $HOME/.gitconfig system : Windows : C:/Program File (x86)/Git/etc/gitconfig Mac : /Applications/Xcode.app/Contents/Developer/usr/etc/gitconfig/ Unix/Linux : /etc/gitconfig 2. 設定を追記する以下設定をconfig or .gitconfigファイルに追記します。 12345[merge] tool = unityyamlmerge[mergetool &quot;unityyamlmerge&quot;] trustExitCode = false cmd = '[Unityフォルダのパス]/Editor/Data/Tools/UnityYAMLMerge.exe' merge -p &quot;$BASE&quot; &quot;$REMOTE&quot; &quot;$LOCAL&quot; &quot;$MERGED&quot; 3. UnityYAMLMergeが手に負えない場合の、手動マージツールを設定するUnityYAMLMergeが全てのコンフリクトを解消してくれるとは限らないので、最終手段として人間がコンフリクトを解決する必要があります。 コンフリクト解消に使用するツール(fallbackツール)を設定するためにはautoファイルをプロジェクトのルートディレクトリに配置しておく必要があります。 今回は、vimdiffを使用します。 ファイル名: auto 1* use &quot;fallbackツールのディレクトリ&quot; -c &quot;wincmd J&quot; &quot;%d&quot; &quot;%l&quot; &quot;%b&quot; &quot;%r&quot; 使用方法以下コマンドをコンフリクトした状態のGitディレクトリで実行します。 1$ git mergetool 動かない場合は、明示的にマージツールを指定してみて下さい。 1$ git mergetool -t unityyamlmerge","link":"/2021/04/25/%E3%80%90Git&Unity%E3%80%91UnityYAMLMerge%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%82%B7%E3%83%BC%E3%83%B3%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%9E%E3%83%BC%E3%82%B8%E3%81%99%E3%82%8B/"},{"title":"【HTML】自動ページリロードさせる","text":"目次 現在のページを再読込させる 参考 サンプル 注意点と解説 現在のページを再読込させる参考 http://www.htmq.com/html5/meta.shtml サンプル&lt;meta&gt;タグを使用して、指定したURLへのリダイレクトを設定できます。リダイレクト先を現在のページに設定することでページを定期的にリロードさせます。 以下コードを、headタグ内に記述する 1&lt;meta http-equiv=&quot;refresh&quot; content=&quot;5;URL=&quot;&gt; 注意点と解説 http-equiv属性を指定する際には、必ずcontent属性とセットで利用します。 セットで利用することでメタデータの定義（名前）とその内容が関連付けられます。 http-equiv=”refresh”は、別のURLへのリダイレクトや現在ページの再読み込みを指定します。 content属性の値には何秒後にリフレッシュするかと、 ジャンプ先のURLを指定します。 例えば、5秒後にnewpage.htmlというページにリダイレクトする場合には以下のように記述します。","link":"/2021/04/27/%E3%80%90HTML%E3%80%91%E8%87%AA%E5%8B%95%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%95%E3%81%9B%E3%82%8B/"},{"title":"【Unity】Share機能を「NatShare」で実装してみる","text":"目次 Unityでシェア機能を実装する 環境 NatShareとは 実装方法 公式ドキュメント 1. NatShareをAssets Storeからインポート 2. 共有機能の実装 3. 実行時の参考画像 NatShareを使用したスクリーンショットのサンプル 注意 Unityでシェア機能を実装する環境 Windows10 Unity 2019.4.9f1 Android 10 NatShareとはiOSおよびAndroid向けのシェア機能APIです。以下が今回使いそうな機能になります。その ネイティブの共有UIを使用した、テキスト、画像、メディアファイルの共有 画像やメディアファイルのカメラロールへの保存 実装方法公式ドキュメントhttps://docs.natsuite.io/natshare/ 1. NatShareをAssets Storeからインポートhttps://assetstore.unity.com/packages/tools/integration/natshare-mobile-sharing-api-117705?aid=1101leVj4&amp;utm_source=aff 2. 共有機能の実装使用するネームスペースをインポート 1using NatSuite.Sharing; シェアするタイミングに以下の処理を記述 12345// SNSへのシェアvar payload = new SharePayload();payload.AddText(&quot;デフォルトテキスト、ここに記述した内容が書き込まれます。&quot;);//payload.AddImage(&quot;画像&quot;);var success = payload.Commit(); 画像も添付したい場合は、payload.AddImage(&quot;画像&quot;)のコメントを外して画像部分にTexture2Dを引数として渡してください。 3. 実行時の参考画像シェア機能実行時 Twitter選択時 NatShareを使用したスクリーンショットのサンプル撮影されたscreenshotは`Texture2Dになります。 12// スクリーンショット撮影var screenshot = ScreenCapture.CaptureScreenshotAsTexture(); 注意Editor上で実際の動きの確認はできないので、iOSかAndoridにBuildして試してみて下さい。","link":"/2021/04/28/%E3%80%90Unity%E3%80%91Share%E6%A9%9F%E8%83%BD%E3%82%92%E3%80%8CNatShare%E3%80%8D%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/"},{"title":"【Laravel】SQLiteを使用する","text":"目次 DBの設定項目 設定項目の解説 環境変数の設定 参考 DBの設定項目config-&gt;database.phpファイルが必要 18行目あたり(たぶん最初)にある、default env : Laravelの環境変数を取得する 今回のケースだと、DB_CONNECTION環境変数が取得できない場合、mysqlという値を返す 1'default' =&gt; env('DB_CONNECTION', 'mysql'), これを、以下のように変更する 1'default' =&gt; env('DB_CONNECTION', 'sqlite'), 設定項目の解説connectionsという配列の中のsqlite配列にsqliteの設定があります。 1234567'sqlite' =&gt; [ 'driver' =&gt; 'sqlite', 'url' =&gt; env('DATABASE_URL'), 'database' =&gt; env('DB_DATABASE', database_path('database.sqlite')), 'prefix' =&gt; '', 'foreign_key_constraints' =&gt; env('DB_FOREIGN_KEYS', true),] 'driver' =&gt; 'sqlite' : ドライバー名 'url' =&gt; 'env('DATABASE_URL')' : DATABASE_URL環境変数を取得する 'database' =&gt; env('DB_DATABASE', database_path('database.sqlite')) : データベースの値を変更する 'foreign_key_constraints' =&gt; env('DB_FOREIGN_KEYS', true) : DB_FOREIGN_KEYS環境変数が取得して、ない場合、trueを返す 環境変数の設定アプリのルートディレクトリ内の、.envファイルを編集する .envフィいるとは? : Laravelの環境変数が記述してあるファイル DB_CONNECTIONという項目を探して以下のように修正する 初期状態だとこの様になっている 123456DB_CONNECTION=mysqlDB_HOST=127.0.0.1DB_PORT=3306DB_DATABASE=dbpracticeDB_USERNAME=rootDB_PASSWORD= DB_XXXと表示された項目は、メントアウトするか消去して、DB_CONNECTION=sqliteを追記する 1DB_CONNECTION=sqlite 参考 https://readouble.com/laravel/5.5/ja/helpers.html#method-env","link":"/2021/05/01/%E3%80%90Laravel%E3%80%91SQLite%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B/"},{"title":"【Linux】grepコマンドの基本的な使い方","text":"目次 grepとは 使用方法 使用例 よく使うオプション -i : 大文字小文字を区別しない -n : 行番号を表示する -l : ファイル名のみを表示する grepとはwikipedia grep の名の由来は、ラインエディタedのコマンド g/re/p である。その意味するところは「global regular expression print(ファイル全体から/正規表現に一致する行を/表示する)」で略号になっている ファイル中の文字列を検索するコマンド 使用方法ファイル名の部分はフォルダ名/*と指定すれば、ファイル内のすべてのファイルから、特定の文字を検索できる 1grep 検索正規表現 ファイル名 使用例1が1.txtに含まれているかを検索する 123$ grep 1 1.txt123456789 1が含まれているカレントフォルダ内のすべてのファイルを検索 1234$ grep 1 ./*./1.txt:123456789./2.txt:123456789あいうえお よく使うオプション-i : 大文字小文字を区別しないa(A)が含まれているか検索 ファイル名:行の内容1234$ grep -i a ./*./abc.txt:AaBbCc./abc1.txt:AABBCC -n : 行番号を表示するaが含まれているファイルを検索 ファイル名:行数:行の内容123$ grep -n a ./*./abc.txt:1:AaBbCc -l : ファイル名のみを表示するaが含まれているファイルを検索 ファイル名123$ grep -l a ./*./abc.txt","link":"/2021/04/30/%E3%80%90Linux%E3%80%91grep%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AE%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9/"},{"title":"【ネットワーク基礎】IPv4アドレスはなぜ「xxx.xxx.xxx.xxx」で表現されるのか","text":"目次 IPアドレス(IPv4)はなぜ「xxx.xxx.xxx.xxx」の形式なのか 結論 IPアドレス(IPv4)はなぜ「xxx.xxx.xxx.xxx」の形式なのか機械はIPアドレスを32ビット空間の0と1で認識しています。 実際に表現してみるとこのような0と１の羅列になります。 111000000000000000000000100000001 しかし、これでは人間に理解しづらいので、32ビットを8ビット区切りで表現してみます。この8ビット区切りの空間のことをオクテット(Octet)と呼びます。 左から順に第1オクテットから第4オクテットと区別して呼ばれます。 111000000.00000000.00000000.00000000 これでも読みづらいので、それぞれの各オクテットをそれぞれ10進数になおして表現してみます。 1192.0.2.1 こうすると、よく見る形のIPアドレスが出来上がります。 結論IPアドレスが「xxx.xxx.xxx.xxx」形式なのは機械が扱うデータを人間が読んで認識しやすいようにすることが目的の表現形式だからです。","link":"/2021/04/29/%E3%80%90%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E5%9F%BA%E7%A4%8E%E3%80%91IPv4%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AF%E3%81%AA%E3%81%9C%E3%80%8Cxxx-xxx-xxx-xxx%E3%80%8D%E3%81%A7%E8%A1%A8%E7%8F%BE%E3%81%95%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%8B/"},{"title":"【Laravel】Bladeテンプレートのコメント","text":"目次 Bladeテンプレート コメント BladeテンプレートLaravelで使用されているHTMLをPHPで記述しやすくする コメント{{-- --}}で囲む 1{{-- コメント --}}","link":"/2021/05/02/%E3%80%90Laravel%E3%80%91Blade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%AE%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88/"},{"title":"【Vim】phpファイルにHTMLを記述した際にオートインデントが効かないので対策する","text":"目次 現象 対策 日本語訳すると 1. php.vimを作成する Mac and Linuxの場合 Windowsの場合 2. php.vimに処理を記述する コメント 現象オートインデントが適応されずに、全て同じインデントでになる 123456789&lt;html&gt;&lt;head&gt;&lt;title&gt;hello&lt;/title&gt;&lt;style&gt;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 対策ここのサイトに乗っている方法を実行すればいい感じにオートレイアウトしてくれた。 https://vim.fandom.com/wiki/Better_indent_support_for_php_with_html 日本語訳すると1. php.vimを作成するMac and Linuxの場合 ~/.vim/indent/php.vimWindowsの場合 $HOME/vimfiles/indent/php.vim 2. php.vimに処理を記述する12345678910111213141516171819202122232425262728293031323334353637&quot; Better indent support for PHP by making it possible to indent HTML sections&quot; as well.if exists(&quot;b:did_indent&quot;) finishendif&quot; This script pulls in the default indent/php.vim with the :runtime command&quot; which could re-run this script recursively unless we catch that:if exists('s:doing_indent_inits') finishendiflet s:doing_indent_inits = 1runtime! indent/html.vimunlet b:did_indentruntime! indent/php.vimunlet s:doing_indent_initsfunction! GetPhpHtmlIndent(lnum) if exists('*HtmlIndent') let html_ind = HtmlIndent() else let html_ind = HtmlIndentGet(a:lnum) endif let php_ind = GetPhpIndent() &quot; priority one for php indent script if php_ind &gt; -1 return php_ind endif if html_ind &gt; -1 if getline(a:lnum) =~ &quot;^&lt;?&quot; &amp;&amp; (0&lt; searchpair('&lt;?', '', '?&gt;', 'nWb') \\ || 0 &lt; searchpair('&lt;?', '', '?&gt;', 'nW')) return -1 endif return html_ind endif return -1endfunctionsetlocal indentexpr=GetPhpHtmlIndent(v:lnum)setlocal indentkeys+=&lt;&gt;&gt; コメント 個人的には、HTMLブロックの編集中に :set ft=html とする方がわかりやすいと思います。このプラグインは新しいテキストを入力するときには機能しますが、選択範囲に=を使うときには機能しませんよね？これも同じように修正する方法があるのでしょうか？この方法をよりすっきりと使いたい人のために、プラグインとしてまとめてみました。","link":"/2021/05/03/%E3%80%90Vim%E3%80%91php%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%ABHTML%E3%82%92%E8%A8%98%E8%BF%B0%E3%81%97%E3%81%9F%E9%9A%9B%E3%81%AB%E3%82%AA%E3%83%BC%E3%83%88%E3%82%A4%E3%83%B3%E3%83%87%E3%83%B3%E3%83%88%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%84%E3%81%AE%E3%81%A7%E5%AF%BE%E7%AD%96%E3%81%99%E3%82%8B/"},{"title":"【Laravel】8.x系のルーティングとコントローラーの使い方","text":"目次 シンプルなコントローラー 1. 作成 2. アクションメソッドを記述する 3. ルーティングの設定 シングルアクションコントローラー 1. 作成 2. __invokeメソッドは基本的にアクションメソッドと同じ 3. ルーティングの設定 シンプルなコントローラー1. 作成手動でファイルを作成することもできるが、Laravelには作成用のコマンドが用意されているので、そのコマンドを使ったほうが、名前空間や最低限必要な記述をしてくれるので便利 以下のコマンドを使用すると、app/Http/Controllers/ディレクトリにxxxController.phpというファイルが生成される 1php artisan make:controller xxxController 2. アクションメソッドを記述する1で作成したコードを見ると、以下のようなコードになっているはず。 このコードを見ると、 12345678&lt;?phpnamespace App\\Http\\Controllers;class xxxController extends Controller{ //} このコードにルーティングされたときに呼ばれるコードを記述する 今回のケースだと、indexをルーティング先として設定すると、Helloと画面に表示されるメソッドを作成した 12345678910&lt;?phpnamespace App\\Http\\Controllers;class xxxController extends Controller{ public function index() { return &quot;Hello&quot;; }} 3. ルーティングの設定Routeクラスのgetスタティックメソッドを使用する アクセスURL:/XXXと設定するとhttp://アプリURL/XXXでアクセスできる アクションメソッド名:Controllerクラスに記述したメソッド1234&lt;?phpuse app\\Http\\Controller名;Route::get('アクセスURL',[Controller名::class,'アクションメソッド名']); 2のコードをアクセスURL/helloで設定すると以下のようになる1234&lt;?phpuse app\\Http\\Controller名;Route::get('/hello',[xxxController::class,'index']); シングルアクションコントローラー1. 作成シンプルなコントローラー作成コマンドに、--invokableオプションを付けることで、__invokeメソッドを含んだクラスを作成することができる 1php artisan make:controller xxxController --invokable 2. __invokeメソッドは基本的にアクションメソッドと同じシングルアクションの特徴として、アクションコントローラーには複数のアクションメソッドを記述したのに対して、シングルアクションは１つだけのアクションしか記述しません。 1の--invokableオプションで作成すると以下のようなものが自動生成されます。 自動生成された__invokeはLaravelが用意したメソッドではなく、PHPに標準でビルドインされているメソッドです。 以下はSingleActionControllerを作成した例です。 123456789101112&lt;?phpnamespace App\\Http\\Controllers;use Illuminate\\Http\\Request;class SingleActionController extends Controller{ public function __invoke() { }} この__invokeメソッド内にルーティングされたときに呼ばれるコードを記述します。 今回のケースだと、SingleActionControllerをルーティング先として設定すると、helloと画面に表示されます。 12345678910111213&lt;?phpnamespace App\\Http\\Controllers;use Illuminate\\Http\\Request;class SingleActionController extends Controller{ public function __invoke() { return &quot;hello&quot;; }} 3. ルーティングの設定基本的には、基本のコントローラーと同じ記述ですが、今回は、シングルアクションコントローラーなので呼び出すアクションメソッドクラスの記述が必要ありません。 1234&lt;?phpuse app\\Http\\Controller名;Route::get('アクセスURL',Controller名::class); 2のコードをアクセスURL/singleで設定すると以下のようになる 1234&lt;?phpuse app\\Http\\Controller名;Route::get('/single',SingleActionController::class);","link":"/2021/05/04/%E3%80%90Laravel%E3%80%918-x%E7%B3%BB%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%A8%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/"},{"title":"【Linuxコマンド】改行や文字数を数える","text":"目次 wcコマンドを使用する コマンドオプション 応用例 ls,grepと組み合わせてディレクトリのファイル数をカウントする wcコマンドを使用する wcとは、word countの略 テキストファイルの行数や単語数、文字数を数えることができるコマンドコマンドオプション オプション 解説 使用例 c バイト数を数える wc -c ファイル名 m 文字数を数える wc -m ファイル名 l 改行数を数える wc -l ファイル名 L 最も長い行のバイト数を数える wc -L ファイル名 w ファイルの単語数を数える wc -L ファイル名 応用例ls,grepと組み合わせてディレクトリのファイル数をカウントする ls -F : 名前のあとにタイプ識別子(拡張子)をつける grep -v /: 一致しない行を表示する。今回の場合だと、サブディレクトリを表示したときにつく/を省いて純粋なファイルのみを抽出している wc -l: 改行数を数える1ls -F | grep -v / | wc -l","link":"/2021/05/05/%E3%80%90Linux%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%80%91%E6%94%B9%E8%A1%8C%E3%82%84%E6%96%87%E5%AD%97%E6%95%B0%E3%82%92%E6%95%B0%E3%81%88%E3%82%8B/"},{"title":"【Laravel】プロジェクトで使用しているLaravelのバージョンを確認する","text":"目次 確認方法 確認方法コンソールで、確認したいプロジェクトファイルのカレントディレクトリに移動後以下のコマンドで確認できる。 1php artisan -V","link":"/2021/05/06/%E3%80%90Laravel%E3%80%91%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8BLaravel%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B/"},{"title":"【Vim】数字をインクリメント&amp;デクリメントする","text":"目次 コマンド 連番入力コマンド コマンド数値の上で以下のコマンドを入力する インクリメント : Ctr + a デクリメント : Ctr + x 連番入力コマンド以下のような連続した数値がある状態の部分を選択後、g-&gt;Ctrl + aを入力することで、以下のようになっている数字が 123000 このように連番に変更できる 123123","link":"/2021/05/09/%E3%80%90Vim%E3%80%91%E6%95%B0%E5%AD%97%E3%82%92%E3%82%A4%E3%83%B3%E3%82%AF%E3%83%AA%E3%83%A1%E3%83%B3%E3%83%88-%E3%83%87%E3%82%AF%E3%83%AA%E3%83%A1%E3%83%B3%E3%83%88%E3%81%99%E3%82%8B/"},{"title":"【Laravel】Laravelを使用したプロジェクトを作成する","text":"目次 手順 1. Laravel Installerを導入する 2. パスを通す composer globalについて Laravel Installerとはなにか 3. プロジェクトの作成 手順1. Laravel Installerを導入するこのときのカレントディレクトリはどこでも大丈夫です。 1$ composer global laravel/Installer 2. パスを通すechoを使って書き込むか、テキストエディタで&quot;&quot;の中の部分を追記してください。 bash1$ echo &quot;export PATH=~/.composer/vender/bin:$PATH&quot; &gt;&gt; ~/.bash_profile zsh1$ echo &quot;export PATH=~/.composer/vender/bin:$PATH&quot; &gt;&gt; ~/.zshrc パスの設定ができたか確認します。 設定の読み込み bash1$ source ~/.bash_profile zsh1$ source ~/.zshrc バージョンチェックができるかで設定が正常にできているか確認します。以下のような出力がされればパスは通っています。12$ laravel -VLaravel Installer 4.2.7 composer globalについてcomposerはglobalオプションを使用すると、` Laravel Installerとはなにかcomposerを使用して、Laravelを使用できるようにしますが、Laravelは、ライブラリではなくフレームワークなので、プロジェクトで使用するというよりは、プロジェクトをLaravelで作成するというニュアンスになります。 なので、まずはLaravelプロジェクトを作成できるツールを導入する必要があります。 3. プロジェクトの作成作成したいプロジェクト用の格納フォルダに移動 1$ cd ~/Dev/PHP/Laravel laravel new プロジェクト名でプロジェクトを生成 今回は、LaravelFirstAppというプロジェクトを作成します。1$ laravel new LaravelFirstApp 以下のような出力最後にされれば作成完了です。1234...Application key set successfully.Application ready! Build something amazing. 作成したプロジェクトのフォルダ構造はこのようになります。12345678910111213141516171819└── LaravelFirstApp ├── README.md ├── app ├── artisan ├── bootstrap ├── composer.json ├── composer.lock ├── config ├── database ├── package.json ├── phpunit.xml ├── public ├── resources ├── routes ├── server.php ├── storage ├── tests ├── vendor └── webpack.mix.js","link":"/2021/05/08/%E3%80%90Laravel%E3%80%91Laravel%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/"},{"title":"【Laravel】「Target class [XXXController] does not exist.」エラーは8.x系のルーティング仕様の変化が原因","text":"目次 はじめに エラー 対応策 公式ドキュメントの方法 7.xより前の方法を踏襲する 参考リンク はじめにコントローラーとURLのルーティングを設定するときに以下のようなエラーが出たのでその対応策と原因を調べた。 エラー1Target class [xxxController] does not exist. 対応策公式ドキュメントの方法xxx/usrのURLにアクセスされた際に、UserControllerのindexアクションメソドをルーティングしたい場合、以下のような記述になる 123use App\\Http\\Controllers\\UserController;Route::get('/user', [UserController::class, 'index']); 7.xより前の方法を踏襲するnamespaceのフルパスを追記する形で以前と同じような記述で設定もできる 1Route::get('/hello','App\\Http\\Controllers\\HelloController@index') useでnamespaceを切り出すこともできる 123use App\\Http\\Controllers\\UserController;Route::get('/hello','HelloController@index') 参考リンク 公式ドキュメント https://readouble.com/laravel/8.x/ja/routing.html Qiitaの同じような解決策 https://qiita.com/norichintnk/items/34a04cd17bfe4014313a","link":"/2021/05/07/%E3%80%90Laravel%E3%80%91%E3%80%8CTarget-class-XXXController-does-not-exist-%E3%80%8D%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AF8-x%E7%B3%BB%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E4%BB%95%E6%A7%98%E3%81%AE%E5%A4%89%E5%8C%96%E3%81%8C%E5%8E%9F%E5%9B%A0/"},{"title":"【PHP】PHPDocumenterの使い方","text":"目次 PHPDocumenterとは PHPDocコメントをドキュメント化してくれる PHPDocコメントにならないコメント PHPDocで使用できるタグを使用してコメント行に意味をもたせる 使用までの手順 1. composerを使用してインストールする 2. ドキュメントを生成する 3. ドキュメントの確認 参考 PHPDocumenterとはソースコード内に記述されているコメントから、ドキュメントを自動生成してくれるツール PHPDocコメントをドキュメント化してくれるPHPには複数種類のコメントの書き方があります。しかし、PHPDocumenterはそれら既存のコメントではドキュメントを生成してくれません。 PHPDocumenterがドキュメントを生成するために用いるのは、PHPDocコメントと言われる、以下のような形式のコメント記法を使用する必要があります。 123/*** PHPDocコメント*/ PHPDocコメントにならないコメント特に、3つめのコメントはPHPDocコメントと似ているので注意が必要です。 1234567// コメント# コメント/** コメント*/ PHPDocで使用できるタグを使用してコメント行に意味をもたせる 対象欄の-になっている場所は、どんな項目にも使えるタグです。 タグ 対象 意味 @author - プログラムを書いた人 @copyright - 著作権 @deprecated - 将来的に使われなくなる予定のものであることを表す @param メソッド,関数 引数の説明 @return メソッド,関数 戻り値の説明 @see - 参考URL,参考クラス @throws メソッド,関数 スローする例外クラス @todo - 今後やるべきことや追加予定の処理 @package ファイル,クラス パッケージ(そのクラスが所属するnamespace) 使用までの手順1. composerを使用してインストールするドキュメントを作成したいプロジェクトにcomposerを使用してphpdocumntorを導入する 1composer require --dev phpdocumentor/phpdocumentor 2. ドキュメントを生成する今回は以下のソースコード単体のドキュメントを作成してみます。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;?phpdeclare(strict_types = 1);/** * 整数型の計算を行うクラス */class IntegerCalculate{ /** * 内部で保持計算結果 */ private int $Value; /** * コンストラクタ * @param int $defaultValue 計算を始める初期値 */ public function __construct(int $defaultValue) { $this-&gt;Value = $defaultValue; } /** * 値を加算する * @param int $value 加算する値 * @return IntegerCalculate 整数型計算クラス */ public function Add(int $value):IntegerCalculate { $this-&gt;Value += $value; return $this; } /** * 値を減算する * @param int $value 減算する値 * @return IntegerCalculate 整数型計算クラス */ public function Sub(int $value):IntegerCalculate { $this-&gt;Value -= $value; return $this; } /** * 計算結果を取得する * @return int 計算結果 */ public function Result(int $value):int { return $this-&gt;Value; }} プロジェクトのルートディレクトリから、以下のようなコマンドを実行します。 -d : ディレクトリを指定する場合 -f : ファイルを指定する場合 -t : 出力先のフォルダ名を指定します。 省略可能とドキュメントには書いてあるが、省略するとどこに出力されるかわからない1./vendor/bin/phpdoc -f IntegerCalculate.php -t out 複数ファイルでドキュメントを作成する場合は、ファイル指定(-f)している部分をフォルダディレクトリ(-d)とかにすると楽です。 3. ドキュメントの確認 出力されたフォルダ内のindex.htmlがドキュメントの内容になっています。 参考 公式のドキュメント https://docs.phpdoc.org/3.0/ コマンドオプションも公式のドキュメントに載っています。テンプレート変更機能とかもあるらしいです。 https://docs.phpdoc.org/3.0/guide/guides/running-phpdocumentor.html","link":"/2021/05/11/%E3%80%90PHP%E3%80%91PHPDocumenter%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/"},{"title":"【PHP】ビルドインサーバーを使ってWebで簡単にテストする","text":"目次 CLI APIのウェブサーバー 使用例 ローカルでテストする ドキュメントルートを指定する 同じネットワークの別の機器から接続してテストする ディレクトリについて 参考 CLI APIのウェブサーバーPHPには、アプリケーションの開発支援用として簡易的(シングルスレッドプロセスのみ実行する)なウェブサーバー機能が組み込まれています。 使用例ローカルでテストする localhost:ポート指定をして起動する1$ php -S localhost:8000 ドキュメントルートを指定する ip:ポート指定をして起動する -tオプションをつけてディレクトリを指定する1$ php -S localhost:8000 -t ~/Desktop/Test 同じネットワークの別の機器から接続してテストする 0.0.0.0:ポート指定をして起動する1$ php -S 0.0.0.0:8000 ディレクトリについて URLリクエスト処理は、php -Sを実行したときのカレントディレクトリから開始される。 ファイル名が指定されていない場合は、index.phporindex.htmlを表示する index.xxxが見つからない場合、親ディレクトリにさかのぼってindex.xxxをドキュメントルートに到達するまで探し続ける。 参考公式 https://www.php.net/manual/ja/features.commandline.webserver.php","link":"/2021/05/12/%E3%80%90PHP%E3%80%91%E3%83%93%E3%83%AB%E3%83%89%E3%82%A4%E3%83%B3%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6Web%E3%81%A7%E7%B0%A1%E5%8D%98%E3%81%AB%E3%83%86%E3%82%B9%E3%83%88%E3%81%99%E3%82%8B/"},{"title":"【iTerm2】ショートカット備忘録","text":"目次 ウィンドウ タブ 検索、履歴 スクリーン 移動 カット ウィンドウ ショートカット 動作 cmd + n 新しいウィンドウを表示 cmd + w ウィンドウを削除 cmd + d ウィンドウを縦に分割 cmd + shift + d ウィンドウを横に分割 cmd+[ 次のウィンドウへ移動 cmd+] 前のウィンドウへ移動 タブ ショートカット 動作 cmd + ; タブを作成 ctrl + tab タブの移動 検索、履歴 ショートカット 動作 cmd + + オートコンプリート(過去に入力した文字を表示) cmd + shift + h ペースト履歴 cmd + f 検索 cmd + g 前の候補に移動 cmd + shift + g 次の候補に移動 ctrl + r 過去のコマンドを検索 スクリーン ショートカット 動作 cmd + + 文字の拡大 cmd + - 文字の縮小 cmd + 0 元に戻す cmd + Enter フルスクリーン表示 cmd + u 透過度のONとOFF ctrl + l 画面をスクロールアップ opt + cmd カーソル形状が十字に変わり矩形選択モードに変化 移動 ショートカット 動作 ctrl + b 1文字を戻る ctrl + f 1文字を進む ctrl + - 入力を戻す ctrl + a 行頭へ移動 ctrl + e 行末へ移動 cmd + k 画面をクリア カット ショートカット 動作 ctrl + k カーソル位置から行末まで一気にカット ctrl + d カーソル位置から行末までカット ctrl + w 単語ごとにカット ctrl + u カーソルの行をカット","link":"/2021/05/13/%E3%80%90iTerm2%E3%80%91%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88%E5%82%99%E5%BF%98%E9%8C%B2/"},{"title":"【HTML】手っ取り早くセンタリングする","text":"目次 pタグを使用してセンタリングする pタグ内に直接記述 styleタグに分離 divタグを使用してセンタリングする pタグを使用してセンタリングするcssの属性のtext-alignにcenterを設定する pタグ内に直接記述1&lt;p style=&quot;text-align:center&quot;&gt;センタリングされる&lt;/p&gt; styleタグに分離1234567&lt;style&gt; #center{ text-align:center; }&lt;/style&gt;&lt;p id=center&gt;センタリングされる&lt;/p&gt; divタグを使用してセンタリングするalign属性にcenterを設定する 123&lt;div align=&quot;center&quot;&gt; &lt;p&gt;センタリングされる&lt;/p&gt;&lt;/div&gt;","link":"/2021/05/10/%E3%80%90HTML%E3%80%91%E6%89%8B%E3%81%A3%E5%8F%96%E3%82%8A%E6%97%A9%E3%81%8F%E3%82%BB%E3%83%B3%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B/"},{"title":"【PHP】PHPUnitを使って単体テスト","text":"目次 composerを使用してPHPUnitを導入する テストを記述する 1. MyAppTest.phpにMyAppTest classを作成する 2. functionにテストを記述していく 3. テストの実行 4. 実行結果のみかた composerを使用してPHPUnitを導入する1composer require --dev phpunit/phpunit &quot;^8.5.5&quot; テストを記述する phpunitを使用するには、作成するファイル名、クラス名は末尾がTestである必要があります。 今回はサンプルのために、MyAppTest.phpというファイルを作成します。 1. MyAppTest.phpにMyAppTest classを作成する 以下のコードをファイルの先頭に記述して、phpunitを使用できるようにする1234// composerに自動生成された、autoloadファイルを読み込みrequire_once dirname(__FILE__) . '/vendor/autoload.php';// テストフレームワークを読み込むuse PHPUnit\\Framework\\TestCase; 2. functionにテストを記述していく assertXXXメソッドに記述することでテストケースを記述していく 123456// 配列の数が期待通りかテストするpublic function test1(){ $arr = [100,200,300]; $this-&gt;assertCount(3,$arr);} 3. テストの実行 composerでインストールしたphpunitのテスト用の実行ファイルは以下のディレクトリにある 1vendor/bin/phpunit phpunitの実行ファイルにテストしたい(今回の場合はMyAppTest.php)ファイルを渡す 1vendor/bin/phpunit MyAppTest.php 4. 実行結果のみかた . : 成功 F : 失敗 1234567PHPUnit 8.5.15 by Sebastian Bergmann and contributors.. 1 / 1 (100%)Time: 44 ms, Memory: 4.00 MBOK (1 test, 1 assertion)","link":"/2021/05/15/%E3%80%90PHP%E3%80%91PHPUnit%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88/"},{"title":"【env】anyenvでXXXenv系のバージョン管理","text":"目次 xxxenvを管理できる「anyenv」を導入する anyenvを導入する 1. githubからclone 2. パスを通す 3. anyenvを初期化する コマンド ほぼ必須なプラグイン「anyenv-update」を導入する 1. プラグインを配置するディレクトリを作成 2. アップデートを実行 コマンド(anyenv-update) xxxenvを管理できる「anyenv」を導入するxxxenv系の導入をサポートするツール anyenvを導入する1. githubからclone ~/.anyenvに配置する1$ git clone https://github.com/riywo/anyenv ~/.anyenv 2. パスを通す zshを使用しているので、.zshrcに以下を追記(bashの場合は.bashrc)123456789if [ -d $HOME/.anyenv ] ; then export PATH=&quot;$HOME/.anyenv/bin:$PATH&quot; eval &quot;$(anyenv init -)&quot; # tmux対応 for D in `\\ls $HOME/.anyenv/envs` do export PATH=&quot;$HOME/.anyenv/envs/$D/shims:$PATH&quot; donefi 3. anyenvを初期化する12$ anyenv install --init$ source ~/.zshrc コマンド コマンド 内容 $ anyenv ヘルプ $ anyenv init 初期化 $ anyenv envs インストールされている**env一覧 $ anyenv root anyenvのインストール先の絶対パス $ anyenv install -l インストールできる**envの一覧 $ anyenv install **env 指定された**env のインストール $ anyenv version **envごとのシェルにおける実行環境 $ anyenv versions **envごとのインストールされている実行環境一覧 $ anyenv global **envごとのデフォルトの実行環境 ほぼ必須なプラグイン「anyenv-update」を導入する1. プラグインを配置するディレクトリを作成 phpenv以下にpluginsフォルダを作成する1$ mkdir -p $(anyenv root)/plugins 2. アップデートを実行1$ anyenv update コマンド(anyenv-update) コマンド 内容 $ anyenv update アップデート (anyenv-update)※**envやそのプラグイン含む","link":"/2021/05/14/%E3%80%90env%E3%80%91anyenv%E3%81%A7XXXenv%E7%B3%BB%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86/"},{"title":"【Git】Gitのユーザー名でコミットを検索する","text":"目次 2通りの方法がある author committer authorとcommiterの違い 普段のgit logはコミットauthorを表示している 2通りの方法があるauthor,committerオプションのどちらかを使用するオプションがある author : オリジナルのコードを記述した人 committer : コミットを適応した人 author1git log --author=&quot;ユーザー名&quot; committer1git log --committer=&quot;ユーザー名&quot; authorとcommiterの違いauthorはコードの変更を実際に行った人を示していて、基本的にすべてのコミットは、authorを検索すれば誰が変更したかを探せる。 committerを使用すると、amendオプションや、rebaseオプションをしようした場合に、書き換わってしまうので、実際の変更をしている人を探す場合には向かない。 authorを書き換える事もできるので、これをされたらすべての手柄を持っていかれる 普段のgit logはコミットauthorを表示しているcommitterとauthorのどちらも表示したい場合、prettyオプションにfullerを設定する 1git log --pretty=fuller","link":"/2021/05/16/%E3%80%90Git%E3%80%91Git%E3%81%AE%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E5%90%8D%E3%81%A7%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%82%92%E6%A4%9C%E7%B4%A2%E3%81%99%E3%82%8B/"},{"title":"【PHP】Composerのインストール方法","text":"目次 Composerとは インストール手順 Windows Mac Composerとはライブラリの依存関係を自動で解決してくれるパッケージ管理ツール オートローダーという機能が便利 autoload.phpを１つ読むだけで自動でライブラリが読み込まれる インストール手順Macの場合は、コマンドでインストール、Windowsの場合はexeファイルを叩いてインストールする 公式サイトのDownloadを参考にするといい https://getcomposer.org/download/ Windows Download and run Composer-Setuup.exe -it will install the lastest composer version whenever it is executed.と書いてある部分のリンクから、実行ファイルをダウンロードする。 Developer modeにはチェックを入れない php.exeのインストールされているパスを設定する プロキシの設定がない場合はスルー Installを押す パスを反映させるために、Windowsを再起動して以下のコマンドをコマンドプロンプトに入力して同じような表示になれば導入完了 123&gt; composer aboutComposer - Dependency Manager for PHP以下略.... Mac Download Composerの少し下に書いてある4行のコマンドを実行する 1234$ php -r &quot;copy('https://getcomposer.org/installer', 'composer-setup.php');&quot;php -r &quot;if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;&quot;php composer-setup.phpphp -r &quot;unlink('composer-setup.php');&quot; Composer successfully installed... が表示されたらインストールは完了 以下のコマンドを実行してパスを通す 1$mv composer.phar /usr/local/bin/composer パスが通ったか確認する。以下のようなAAが出れば導入完了 12345678❯ composer -v ______ / ____/___ ____ ___ ____ ____ ________ _____ / / / __ \\/ __ `__ \\/ __ \\/ __ \\/ ___/ _ \\/ ___// /___/ /_/ / / / / / / /_/ / /_/ (__ ) __/ /\\____/\\____/_/ /_/ /_/ .___/\\____/____/\\___/_/ /_/Composer version 2.0.14 2021-05-21 17:03:37","link":"/2021/05/17/%E3%80%90PHP%E3%80%91Composer%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%96%B9%E6%B3%95/"},{"title":"【Mac】Finderで隠しファイル(.ファイル)を表示させる","text":"目次 永続的に表示させる場合 余談 一時的に表示させる場合 永続的に表示させる場合 ターミナルで、以下のコマンドを実行する1$ defaults write com.apple.finder AppleShowAllFiles TRUE Finderのプロセスを再起動する1$ killall Finder 余談 Macの環境設定をコマンドで変更する事のできるdefaultsコマンドについて https://amasuda.xyz/post/2016-10-23-mastering-mac-defaults-command/ 一時的に表示させる場合finderを選択している状態で、⌘ + Shift + .","link":"/2021/05/19/%E3%80%90Mac%E3%80%91Finder%E3%81%A7%E9%9A%A0%E3%81%97%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB-%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%95%E3%81%9B%E3%82%8B/"},{"title":"【PHP】クラス、メソッド、プロパティの動的コール","text":"目次 動的アクセス プロパティに対しての動的アクセス 例 動的アクセスを使った場合 メソッドの動的コール クラスの動的コール 動的アクセスプロパティに対しての動的アクセス通常の場合、複数あるプロパティの変数にアクセスしたい場合、以下のように書きます。 1$インスタンス名-&gt;{$プロパティ名} 例以下のようなアイテムクラスの一覧を列挙したい 1234567891011121314class Item{ // 名前 public string $name; // 値段 public int $price; // 重さ public int $weight; function __construct(string $name,int $price,int $weight){ $this-&gt;name = $name; $this-&gt;price = $price; $this-&gt;weight = $weight; }} 表示するには、１つずつのプロパティを呼び出して記述する必要がある 123456$item = new Item('チーズ',300,100);// 表示echo '名前' ,':', $item-&gt;name,'&lt;br&gt;';echo '値段' ,':', $item-&gt;price,'&lt;br&gt;';echo '重さ' ,':', $item-&gt;weight,'&lt;br&gt;'; 問題点は2つ プロパティ名と表示したい名前の結びつきがわかりにくい プロパティ数が多いと行が増えていき可読性が下がる 動的アクセスを使った場合使うクラスは、最初のItemクラスと同じものを使う。 このように、Itemクラスに変数が増えたとしても、properties連想配列に組み合わせを追加するだけで、表示を追加できる様になる 1234567891011121314// 最初にプロパティを定義する$properties=[ 'name' =&gt; '商品名', 'price' =&gt; '金額', 'weight' =&gt; '重さ'];$item = new Item('チーズ',300,100);// プロパティのループforeach($properties as $propertie=&gt;$label){ // $インスタンス名-&gt;{$プロパティ名を持つ変数名} echo $label ,':', $item-&gt;{$propertie},'&lt;br&gt;';} メソッドの動的コール1$インスタンス名-&gt;{$メソッド名}(引数1,引数２...); メソッドの動的コールを行う際は、method_existsを使用して呼び出したいメソッドをインスタンス化したクラスが持っているかをチェックしたほうがいい 123if(!method_exists($インスタンス名,$呼び出したいメソッド名){ // 含まれていないときはここに入る} クラスの動的コール通常のクラスのインスタンス化との違いは、クラス名の前に$があること 1$newInstance = new $メソッド名(); クラスの動的コールを行う際は、class_existsを使用してインスタンス化したいクラス存在しているかチェックしたほうがいい 123if(!class($インスタンス化したいクラス名)){ // 含まれていないときはここに入る}","link":"/2021/05/18/%E3%80%90PHP%E3%80%91%E3%82%AF%E3%83%A9%E3%82%B9%E3%80%81%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%80%81%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E5%8B%95%E7%9A%84%E3%82%B3%E3%83%BC%E3%83%AB/"},{"title":"【PHP】useを使う場面","text":"目次 1. クロージャ 2. トレイト 3. 使用するnamespaceのインポート useを使用しない場合 useを使用している場合 1. クロージャクロージャでuseを使用する場合、クロージャの外で定義された変数をクロージャ内に引き継ぐときに使用される $eを呼ぶとHTMLの改行文字を付加してechoをするサンプル 12345678$eol = '&lt;br&gt;';// １行前で定義した改行文字をクロージャ内で使用する$e = function($message) use ($eol){ echo $message,$eol;};$e('TEST'); 2. トレイトコピーアンドペーストして使用しているような汎用的なメソッドをtraitというクラスのようなものに括りだしていろいろなところで使おうというもの トレイトを使用したいクラスでuse トレイト名として使用する 注意 : トレイトは密結合になるので、オブジェクト指向的には使用しないほうがいい 12345678910111213141516171819trait test{ private function echoTest() { echo 'test'; }}class main{ use test; public function __construct() { $this-&gt;echoTest(); }}$m = new main(); 3. 使用するnamespaceのインポート事前にuse 名前空間の完全修飾名\\クラス名を定義しておくことで、別のnamespaceにあるクラスをnew(インスタンス化)するときに、名前空間を繰り返し書かなくていいようにする useを使用しない場合名前空間 : MyApp\\Controller\\Testクラス名 : TestController 12// インスタンス化する$testController = new MyApp\\Controller\\Test\\TestController(); useを使用している場合名前空間 : MyApp\\Controller\\Testクラス名 : TestController 12345// ネームスペースのインポートuse MyApp\\Controller\\Test\\TestController;// インスタンス化する$testController = new TestController();","link":"/2021/05/20/%E3%80%90PHP%E3%80%91use%E3%82%92%E4%BD%BF%E3%81%86%E5%A0%B4%E9%9D%A2/"},{"title":"【HTML】Buttonタグとinputタグのbuttonの違い","text":"目次 問題提議 結論 : どれを使えばいいのか &lt;a&gt;タグについて &lt;a&gt;タグをなぜ汎用ボタンにするのか &lt;button&gt;タグについて &lt;button&gt;タグをなぜ送信ボタンにするのか &lt;input type=”button”&gt;タグについて &lt;input type=”button”&gt;タグをなぜ使用しないのか 参考 問題提議HTML5を記述していて、ボタンクリックのような処理を書きたくなるときがあるが、HTML5には3つのボタンの挙動を再現できる記述方法がある。 どの方法でボタンを作成するのがいいのか気になった。 結論 : どれを使えばいいのか タグ 用途 &lt;a&gt; 汎用ボタンに使用 &lt;button&gt; フォームの送信ボタン等に使用 &lt;input type=”button”&gt; 使用しない &lt;a&gt;タグについてリンクを設定したいときに使用する。ボタンを作る際に最も使用されている。 例:クリックされるとtest.htmlへ飛ぶ 1&lt;a href=&quot;test.html&quot;&gt;&lt;/a&gt; &lt;a&gt;タグをなぜ汎用ボタンにするのか 一般的に浸透して言える 他の２つの記述方式と違い、簡潔に記述できる &lt;button&gt;タグについてHTML5から導入されたタグで、inputタグと違い閉じタグがあるので、疑似要素が使用できるようになっています。 例:testという表示のボタンを表示する 1&lt;button type=&quot;button&quot;&gt;test&lt;/button&gt; &lt;button&gt;タグをなぜ送信ボタンにするのかaタグはフォームの送信ボタンには使用できないため、使用できるのは、inputタグかbuttonタグのどちらかになります。この２択の場合、疑似要素が使用できるbuttonタグの方に軍配が上がります。 &lt;input type=”button”&gt;タグについてinputタグは閉じタグがないので、CSSでbeforeやafterの疑似要素が使用できないため、デザインの幅が狭まります。 例:testという表示のボタンを表示する 1&lt;input type=&quot;button&quot; value=&quot;test&quot;&gt; &lt;input type=”button”&gt;タグをなぜ使用しないのかHTML5で、buttonタグが登場したことにより、buttonの生成は専用のタグを使用したほうが使い勝手が良くなったため。 しかし、HTML4ではbuttonタグは使えないので、HTML4で構築する際はinputタグのbutton属性を使用する必要があります。 参考 https://www.sejuku.net/blog/82466#:~:text=button%E3%82%BF%E3%82%B0%E3%81%A8input%20type%3D%22button%22%E3%81%AE%E9%81%95%E3%81%84,-%E3%81%BE%E3%81%9A%E3%81%AF%E3%80%81%E5%90%8C%E3%81%98%E3%83%9C%E3%82%BF%E3%83%B3&amp;text=input%E3%82%BF%E3%82%B0%E3%81%AB%E3%81%AF%E9%96%89%E3%81%98,%E3%82%82%E3%81%A6%E3%82%8B%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%A7%E3%81%99%E3%80%82&amp;text=%E3%81%BE%E3%81%9F%E3%80%81%E5%AD%90%E8%A6%81%E7%B4%A0%E3%81%8C%E6%8C%81%E3%81%A6%E3%82%8B,%E4%BD%BF%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%A7%E3%81%99%E3%80%82 https://hsmt-web.com/blog/submit-input-button/#p2 https://www.ameamelog.com/html-a-button/","link":"/2021/05/21/%E3%80%90HTML%E3%80%91Button%E3%82%BF%E3%82%B0%E3%81%A8input%E3%82%BF%E3%82%B0%E3%81%AEbutton%E3%81%AE%E9%81%95%E3%81%84/"},{"title":"【NERDTree】コマンド一覧","text":"目次 NERDTree (6.9.11) ファイル操作 フォルダ操作 Tree navigation mappings~ Filesystem mappings~ Tree filtering mappings~ NERDTree (6.9.11)ファイル操作 o: ファイルを開く go: ファイルを開いて、カーソルは移動させない t: タブで開く T: タブで開を開いて、カーソルは移動させない i: 垂直に開く gi: 垂直にファイルを開いて、カーソルは移動させない s: 水平にファイルを開く gs: 水平にファイルを開いて、カーソルは移動させない フォルダ操作 o: オープン or クローズ O: 再帰的に展開する t: 新しいタブでフォルダを開く T: 新しいタブでフォルダを開いて、カーソルはNERDTreeウィンドウのまま x: 親フォルダを閉じる X: カーソルのあるディレクトリ以下のフォルダを再帰的に閉じる Tree navigation mappings~ P: ルートディレクトリへカーソル移動 p: カレントディレクトリへカーソル移動 K: カーソルがある階層の最初のファイルorフォルダへカーソル移動 J: カーソルがある階層の最後のファイルorフォルダへカーソル移動 Filesystem mappings~ C: カーソルのあるディレクトリをルートディレクトリに設定 u: ひとつ上のディレクトリへ移動 U: ひとつ上のディレクトリへ移動して、元いたディレクトリを開く r: カーソルのあるディレクトリをリフレッシュ(再読み込み &amp; 再描画) R: ルートディレクトリからリフレッシュ(再読み込み &amp; 再描画) m: カーソルのあるファイルorフォルダに対しての操作メニューを表示 cd:カーソルのあるディレクトリをcwd設定する(pwdと同意) CD:ツリーのルートをcwdに設定してあるディレクトリに変更 Tree filtering mappings~ I: .ファイルの表示非表示切り替え(トグル) F: ファイルの表示非表示切り替え(トグル) B: bookmarkの表示非表示切り替え (トグル)","link":"/2021/05/23/%E3%80%90NERDTree%E3%80%91%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E4%B8%80%E8%A6%A7/"},{"title":"【Vim】文字列の検索","text":"目次 /を使用した検索 検索方法 検索の開始 検索結果へ移動 設定 大文字と小文字を区別しない vimgrep検索 検索方法 検索の開始 検索対象パスの指定方法について 自動的にcwコマンドを付加する cwについての詳しい解説 検索結果への移動(Quickfix) 参考 /を使用した検索/を使用した検索では、現在開いているファイル(カレントバッファ)に対して検索を行います。 カーソルを移動させることで 検索方法検索の開始 検索ワードを入力後、エンターで検索結果の文字列のある場所へカーソルが移動します。 検索ワードには正規表現も使用できます スペースは入れない1:/検索ワード 検索結果へ移動 n : 次の検索結果へ N : 前の検索結果へ 設定大文字と小文字を区別しないデフォルトでは大文字と小文字を区別するので、区別せずに検索したい場合は、以下の設定を適応させる 1:set ignorecase vimgrep検索カレントディレクトリから相対パスで指定したファイル内部orフォルダ内部のファイル内部を検索できる 通常の場合、:vim {検索文字列} 検索対象パスで検索を行うことができるが、出てくる結果がとても見づらいので、Quickfixと組み合わせる方法を基本として紹介する 検索方法検索の開始 検索対象のパスはカレント cwはcwindowの略で、検索結果の一覧を別ウィンドウとして表示してくれる1:vimgrep {検索文字列} 検索対象パス | cw vimgrepはvimと省略もできる1:vim {検索文字列} 検索対象パス | cw 検索対象パスの指定方法について123456789101112&quot; カレントバッファのみを対象にする:vim {検索文字列} %&quot; カレントディレクトリ以下のあらゆるファイルを対象にする:vim {検索文字列} **&quot; ~/Desktop/memo/以下のあらゆるファイルを対象にする（ディレクトリを再帰的に検索）:vim {検索文字列} ~/Desktop/memo/**&quot; ~/Desktop/memo/内のファイルを対象にする:vim {検索文字列} ~/Desktop/memo/*&quot; ~/Desktop/memo/以下のerbファイルを対象にする:vim {検索文字列} ~/Desktop/memo/**/*.md&quot; ~/Desktop/memo/以下でaで始まるerbファイルを対象にする:vim {検索文字列} ~/Desktop/memo/**/a*.erb 自動的にcwコマンドを付加する.vimrcに以下の行を追加する1autocmd QuickFixCmdPost *grep* cwindow cwについての詳しい解説 https://qiita.com/yuku_t/items/0c1aff03949cb1b8fe6bより抜粋 ちなみにここで作られたウィンドウはvim用語ではquickfix-windowと呼ばれる。QuickfixというのはとあるCコンパイラが出力するコンパイルエラー形式のこと（らしく）、それをファイルに保存してvimから読み込んでエラー箇所を簡単に飛べると嬉しいよね、という動機で作られた機能の総称。vimgrepの検索結果は自動的にこの形式で読み込まれるため、Quickfixの結果を一覧表示するquickfix-windowで一覧表示できる、というわけだ。 検索結果への移動(Quickfix) Quickfixリストウィンドウ内で、jkで上下移動して開きたい行でEnter コマンドで移動する場合 cn : 次の検索結果へ cp : 前の検索結果へ ccl : Quickfixを閉じる 参考 https://qiita.com/yuku_t/items/0c1aff03949cb1b8fe6b https://blog.onk164.net/archives/517.html","link":"/2021/05/22/%E3%80%90Vim%E3%80%91%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E6%A4%9C%E7%B4%A2/"},{"title":"【PHP】CGI版とCLI版の違いについて","text":"目次 CGI版 モジュール版とCGI版の違い CLI版 主な違い 今実行しているPHPがどっち版なのかを確認する CGI版CGIとはCommon Geteway Interfaceの略で、Webサーバー経由で実行される方式 CGI版とは別に、Webサーバーにビルドインされているモジュール版というものもある。 モジュール版とCGI版の違い CGI版:php.exeのような実行形式ファイルを実行しているイメージ(XAMPP,MAMP) php.iniファイルなどでディレクトリによって実行するPHPのバージョンを切り替える事ができる 実行速度がモジュール版に比べて遅くなる モジュール版:Apach内部のプロセスとしてPHPを実行する(Apach内部から呼び出す) 内部で処理できるので、処理がモジュール版と比べて高速 実行するPHPのバージョンをディレクトリによって切り替えることはできない CLI版CLIとはCommand Line Interfaceの略で、OSコマンドとして実行できる方式 以下のように、phpコマンドの引数にファイルを渡すことで実行結果が表示される 1php test.php 主な違い出力結果が主な違いとして挙げられます。 以下のようなPHPファイルを実行したときに 12&lt;?echo &quot;test&quot;; CGI ヘッダー情報が自動で付与される1234X-Powered-By: PHP/8.0.0Content-type: text/htmltest CLI 1test 今実行しているPHPがどっち版なのかを確認するコマンドラインで、以下のコマンドを実行するとCLIなのかCGIなのか確認できる((cli)の部分) この実行結果の場合、CLI版 123456$ php -vPHP 8.0.0 (cli) (built: Jun 7 2021 02:19:47) ( NTS )Copyright (c) The PHP GroupZend Engine v4.0.0-dev, Copyright (c) Zend Technologies with Zend OPcache v8.0.0, Copyright (c), by Zend Technologies with Xdebug v3.0.4, Copyright (c) 2002-2021, by Derick Rethans","link":"/2021/05/24/%E3%80%90PHP%E3%80%91CGI%E7%89%88%E3%81%A8CLI%E7%89%88%E3%81%AE%E9%81%95%E3%81%84%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【PHP】ヒアドキュメントの使い方","text":"目次 ヒアドキュメントとは 実行サンプル ヒアドキュメントとは長い文章を書くときに、改行(\\n)やタブ文字(\\t)などのエスケープシーケンスを使用せずに書くことができる機能。改行やタブ文字などを表示されているまま、出力する事ができ、変数の展開もできる 実行サンプル&lt;&lt;&lt;のあとに続く文字列(今回の場合EOL)を終端文字として扱う 1234567891011$id = 12345;$message = &lt;&lt;&lt; EOLお問い合わせありがとうございます。{$id}様。.........EOL;echo $message; 出力 12345お問い合わせありがとうございます。12345様。.........","link":"/2021/05/25/%E3%80%90PHP%E3%80%91%E3%83%92%E3%82%A2%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/"},{"title":"【Laravel】Laravelサーバーを起動する","text":"目次 注意 サーバー起動手順 終了する phpのテスト用サーバーではだめなのか 注意Laravelサーバーはテストを円滑にするために使用する目的で作られています。よって、本番環境で使用しないようにしてください。 サーバー起動手順artisanコマンドを使用するので、コンソールでLaravelアプリのカレントディレクトリに移動します カレントディレクトリで以下のコマンドを実行します 1php artisan serve コマンドを実行すると、以下のような画面になりコンソールが待機状態になると思います。 12Starting Laravel development server: http://127.0.0.1:8000[Mon Jun 28 17:40:54 2021] PHP 8.0.0 Development Server (http://127.0.0.1:8000) started この状態で、ブラウザでhttp://127.0.0.1:8000にアクセスするとページを開くことができます。 終了するコンソールを選択してCtrl + cでサーバーを終了できます。 phpのテスト用サーバーではだめなのかLaravelのサーバー機能はPHPのサーバー機能を使用しているので、根本的には同じことができます。 phpにビルドインされているサーバー機能で、php artisan serveと同じことをしたい場合、publicフォルダをカレントディレクトリにしてから、php -S localhost:8000で同じ挙動ができると思います。","link":"/2021/05/26/%E3%80%90Laravel%E3%80%91Laravel%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B/"},{"title":"【PHP】マジック定数まとめ","text":"目次 マジック定数とは マジック定数一覧 マジック定数とはPHPにあらかじめ定義された定数 マジック定数一覧 定数名 内容 LINE __LINE__が呼び出されたされた行番号 FILE 絶対パスで表現されたカレントファイル名 DIR 絶対パスで表現されたカレントファイルが含まれるディレクトリ名 FUNCTION __FUNCTION__が呼び出された関数名 CLASS __CLASS__が呼び出されたクラス名 TRAIT __TRAIT__が呼び出されたトレイト名 METHOD __METHOD__が呼び出されたメソッド名 NAMESPACE __NAMESPACE__が呼び出された名前空間","link":"/2021/05/29/%E3%80%90PHP%E3%80%91%E3%83%9E%E3%82%B8%E3%83%83%E3%82%AF%E5%AE%9A%E6%95%B0%E3%81%BE%E3%81%A8%E3%82%81/"},{"title":"【PHP】小数から整数への変換","text":"目次 キャスト 関数記法と型キャスト記法どちらがいいのか 四捨五入 切り上げ 切り捨て キャストfloat型をint型にキャストすると、キャストされた数値の小数以下は切り捨てられる intval関数記法: intval(float型変数) (int)型キャスト記法 : (int)float型変数12345$f = 999.9;$i = intval($f);$ii = (int)$f;echo $i; // 999echo $ii; // 999 関数記法と型キャスト記法どちらがいいのか型キャストは高速に動作するが、関数記法のほうが可読性は高いので、シーンに合わせて使い分けるのがいい 四捨五入round関数を使用する 123$f = 999.9;$i = round($f);echo $i; // 1000 切り上げceil関数を使用する 123$f = 999.1;$i = ceil($f);echo $i; // 1000 切り捨てfloor関数を使用する 123$f = 999.9;$i = floor($f);echo $i; // 999","link":"/2021/05/28/%E3%80%90PHP%E3%80%91%E5%B0%8F%E6%95%B0%E3%81%8B%E3%82%89%E6%95%B4%E6%95%B0%E3%81%B8%E3%81%AE%E5%A4%89%E6%8F%9B/"},{"title":"【Laravel】artisanコマンド一覧","text":"目次 この記事のLaravelバージョン コマンド一覧を表示するコマンド 使用方法 コマンド Auth cache config db event key make migrate otifications optimize package queue route sail schedule schema session storage stub vendor view オプション この記事のLaravelバージョン12$ php artisan -VLaravel Framework 8.46.0 コマンド一覧を表示するコマンド自作コマンドもこのコマンドで一緒に表示されます。 1php artisan list 使用方法1php artisan コマンド オプション 引数 コマンド コマンド 説明 clear-compiled コンパイル済みクラスファイルの削除 db 新規データベースCLIセッションの開始 down アプリケーションをメンテナンス／デモモードにする env 現在のフレームワーク環境を表示 help コマンドのヘルプを表示する inspire 感動的な言葉を表示する(ジョーク機能) list コマンドリストを表示する migrate データベースマイグレーションの実行 optimize フレームワークのブートストラップファイルのキャッシュ test アプリケーション・テストの実行 tinker アプリケーションを操作する up アプリケーションのメンテナンス・モードの解除 Auth コマンド(ショート,フル) 説明 auth:clear-resets 期限切れのパスワード・リセット・トークンのフラッシュ cache コマンド 説明 cache:clear アプリケーションのキャッシュを消去する cache:forget キャッシュからアイテムを削除する cache:table キャッシュデータベーステーブルのマイグレーションの作成 config コマンド 説明 config:cache 設定の読み込みを高速化するためのキャッシュファイルの作成 config:clear 設定キャッシュファイルの削除 db コマンド 説明 db:seed データベースにレコードを格納する db:wipe すべてのテーブル、ビュー、およびタイプを削除する event コマンド 説明 event:cache アプリケーションのイベントとリスナーの検出とキャッシュ event:clear キャッシュされたイベントとリスナーをすべて消去する event:generate 登録に基づいて不足しているイベントとリスナーを生成する event:list アプリケーションのイベントとリスナーをリストアップする key コマンド 説明 key:generate アプリケーションキーの設定 make コマンド 説明 make:cast 新しいカスタムEloquentキャストクラスの作成 make:channel 新しいチャンネルクラスの作成 make:command Artisanコマンドの新規作成 make:component 新しいビューコンポーネントクラスを作成します make:controller 新しいコントローラクラスの作成 make:event 新しいイベントクラスの作成 make:exception 新しいカスタム例外クラスの作成 make:factory 新しいモデルファクトリの作成 make:job 新しいジョブクラスの作成 make:listener 新しいイベントリスナークラスの作成 make:mail 新しいEメールクラスの作成 make:middleware 新しいミドルウェアクラスの作成 make:migration 新しいマイグレーションファイルの作成 make:model 新しいEloquentモデルクラスの作成 make:notification 新しい通知クラスの作成 make:observer 新しいオブザーバークラスの作成 make:policy 新しいポリシークラスの作成 make:provider 新しいサービスプロバイダクラスの作成 make:request 新しいフォームリクエストクラスの作成 make:resource 新しいリソースの作成 make:rule 新しい検証ルールの作成 make:seeder 新しいシーダークラスの作成 make:test 新しいテストクラスの作成 migrate コマンド 説明 migrate:fresh すべてのテーブルを削除し、すべてのマイグレーションを再実行する migrate:install 移行リポジトリの作成 migrate:refresh すべての移行のリセットと再実行 migrate:reset すべてのデータベース移行のロールバック migrate:rollback 最後のデータベース移行のロールバック migrate:status 各移行のステータスの表示 otifications コマンド 説明 notifications:table 通知テーブルのマイグレーションを作成する optimize コマンド 説明 optimize:clear キャッシュされたブートストラップ・ファイルを削除する package コマンド 説明 package:discover キャッシュされたパッケージマニフェストを再構築する queue コマンド 説明 queue:batches-table batchesデータベーステーブルのマイグレーションを作成する queue:clear 指定されたキューからすべてのジョブを削除する queue:failed 失敗したキューのジョブをすべてリストアップする queue:failed-table 失敗したキューのジョブ・データベース・テーブルのマイグレーションを作成する queue:flush 失敗したキューのジョブをすべてフラッシュする queue:forget 失敗したキューのジョブを削除する queue:listen 指定されたキューをリッスンする queue:prune-batches バッチ・データベースから古いエントリを削除する queue:prune-failed 失敗したジョブ・テーブルから古いエントリを削除する queue:restart 現在のジョブの後にキューワーカーデーモンを再起動する queue:retry 失敗したキューのジョブを再試行する queue:retry-batch バッチの失敗したジョブを再試行する queue:table キューのジョブ・データベース・テーブルのマイグレーションを作成する queue:work デーモンとしてキューのジョブ処理を開始する route コマンド 説明 route:cache ルート登録を高速化するためのルートキャッシュファイルの作成 route:clear ルートキャッシュファイルの削除 route:list 登録されているすべてのルートを一覧表示する sail コマンド 説明 sail:install Laravel SailのデフォルトのDocker Composeファイルのインストール sail:publish Laravel SailのDockerファイルを公開する schedule コマンド 説明 schedule:list スケジュールされたコマンドの一覧表示 schedule:run スケジュールされたコマンドの実行 schedule:test スケジュールされたコマンドの実行 schedule:work スケジュールワーカーの起動 schema コマンド 説明 schema:dump 与えられたデータベーススキーマをダンプする session コマンド 説明 session:table セッションデータベーステーブルのマイグレーションの作成 storage コマンド 説明 storage:link アプリケーション用に設定されたシンボリックリンクの作成 stub コマンド 説明 stub:publish カスタマイズ可能なすべてのスタブの公開 vendor コマンド 説明 vendor:publish ベンダー・パッケージからパブリッシュ可能なアセットをすべてパブリッシュする view コマンド 説明 view:cache アプリケーションのすべてのBladeテンプレートをコンパイルする。 view:clear コンパイルされたすべてのビュー・ファイルの消去 serve PHP開発用サーバーでアプリケーションを動作させる オプション コマンド(ショート,フル) 説明 -h, –help 指定されたコマンドのヘルプを表示します。コマンドが指定されていない場合は、コマンドリストのヘルプを表示します -q, –quiet メッセージを出力しない -V, –version このアプリケーションのバージョンを表示する –ansi –no-ansi -n, –no-interaction インタラクティブな質問をしないこと –env[=ENV] コマンドを実行するための環境 1:-v,2:-vv,3:-vvv, –verbose メッセージの冗長性を高めます。1:通常のログ、2:冗長度が高い出力、3:デバッグレベルの出力","link":"/2021/05/27/%E3%80%90Laravel%E3%80%91artisan%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E4%B8%80%E8%A6%A7/"},{"title":"【PHP】入力フォームの必須項目のチェックに使う判定","text":"目次 判定方法 解説 判定方法12345if(is_null($getValue) || $getValue === ''){ // 未入力}else{ // 入力されている} 解説 is_null関数は、変数が未定義 or 値がnullのときにtrueを返します。 === ''は、厳格な比較を行い変数が空の場合にtrueを返します。","link":"/2021/05/31/%E3%80%90PHP%E3%80%91%E5%85%A5%E5%8A%9B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%AE%E5%BF%85%E9%A0%88%E9%A0%85%E7%9B%AE%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%81%AB%E4%BD%BF%E3%81%86%E5%88%A4%E5%AE%9A/"},{"title":"【PHP】比較演算子「&#x3D;&#x3D;&#x3D;」と「&#x3D;&#x3D;」の違い","text":"目次 「==」について 「===」について どちらを使えばいいのか 「==」について他のプログラム言語、C#やJavaなどでの使い方だと以下のような比較はエラーになります。 123if(1 == &quot;1&quot;){ // 処理} エラーになる原因は、数値型の1と文字列型の1を型が違うまま比較してしまっているからです。 しかし、PHPの==では、右辺と左辺の値を相互に型変換することで、データ型の違いに対して寛容な比較をすることができます。よって、以下のようなコードでは問題なくif内の処理が動きます。 123if(1 == &quot;1&quot;){ // 処理} 「===」について他のプログラム言語、C#やJavaなどでの使い方と同じように、型を自動で変換せずに厳格に比較することができます。 ==の例のプログラムを===に置き換えてして実行すると、実行エラーになるはずです。 123if(1 === &quot;1&quot;){ // 処理} どちらを使えばいいのかデータ型に対して寛容な比較をする==を使用するとデータ型の違いによるバグが起こる可能性があるため、特別な理由がない限りは、厳格な比較のできる===を使用するのが一般的です。","link":"/2021/05/30/%E3%80%90PHP%E3%80%91%E6%AF%94%E8%BC%83%E6%BC%94%E7%AE%97%E5%AD%90%E3%80%8C-%E3%80%8D%E3%81%A8%E3%80%8C-%E3%80%8D%E3%81%AE%E9%81%95%E3%81%84/"},{"title":"【PHP】プログラムを強制終了させる","text":"目次 exitかdieメソッドを使用する exit使用例 終了ステータスコードとは dieメソッド使用例 参考 exitかdieメソッドを使用する メソッド名 動作 exit 終了コードを返さないかステータスコードを返して終了する die エラーメッセージを画面に表示して終了する exitは言語構造なので、正確にはメソッドではありません。 - 言語構造なので、`()`を末尾に付けずに呼び出せます。 exit使用例終了コードを返さずに終了する 1exit; 終了ステータスコードを返して終了する 1exit(ステータスコード); 終了ステータスコードとはint型で0~254までの数字の必要がある。255はPHPに予約されているため使用できません。 終了ステータスコードは、CLIプログラムに使用されるため、Webサーバーとしてのレスポンスとしてのステータスコードではありません。 Webサーバーのレスポンスステータスコードを返す場合、http_response_codeメソッドを使用します。 dieメソッド使用例エラーメッセージを画面に表示して終了する 1die('エラーメッセージ'); 参考 https://www.fixes.pub/program/174929.html https://www.php.net/manual/ja/function.exit.php","link":"/2021/06/01/%E3%80%90PHP%E3%80%91%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%82%92%E5%BC%B7%E5%88%B6%E7%B5%82%E4%BA%86%E3%81%95%E3%81%9B%E3%82%8B/"},{"title":"【PHP】厳密な型チェックを有効にする","text":"目次 strict_typesを有効化する 注意 strict_typesを有効化するPHPではデフォルトの状態だと、型宣言を関数で行っていても、関数を使用するときには、期待しないデータ型を渡すことができてしまいます。 以下のコードは、暗黙的にstring型がint型に変換されてしまう。 12345function test(int value){ // 処理}test(&quot;1234&quot;); このような、暗黙的な型変換を防ぐには、declare命令を使用します。 先ほどのコードを以下のように書き換えると、実行時エラーになります。 1234567declare(strict_type=1);function test(int value){ // 処理}test(&quot;1234&quot;); 注意 declare命令はコードの冒頭に書く必要があります。プログラムの途中に書くと、エラーになります。 declare命令は1ファイルごとに書く必要があります。","link":"/2021/06/02/%E3%80%90PHP%E3%80%91%E5%8E%B3%E5%AF%86%E3%81%AA%E5%9E%8B%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B/"},{"title":"【PHP】別のPHPファイルを読み込む","text":"目次 include命令かrequire命令を使用する includeとrequireの用途の違い include命令の使い時 require命令の使い時 使用例 include命令かrequire命令を使用する メソッド名 動作 require 外部ファイルを読み込み、読み込めない場合処理を中止する require_once 外部ファイルがすでに読み込まれていない場合のみ、require命令を実行する include 外部ファイルを読み込み、読み込めなくても処理を続行する include_once 外部ファイルがすでに読み込まれていない場合のみ、include命令を実行する includeとrequireの用途の違いinclude命令の使い時include命令は指定されたファイルが読み込めない場合、処理を中断します。正常に読み込めないということはPHPファイルに記述されているロジックが正常に動作しないということなので、PHPのファイルを読み込む場合はinclude命令を使用することが多いです。 require命令の使い時require命令は指定されたファイルが読み込めない場合でも、処理を続行します。なので、読み込みが失敗しても処理を継続したいHTMLファイルなどのレイアウトや表示のためのファイル読み込みなどで使用されることが多いです。もちろん、読み込まれないと困るようなHTMLファイルなどの読み込みは、require命令を使用するのが良いです。 使用例 include命令とrequire命令は言語構造なので、()で呼び出す必要は必要はありません。 ファイルを指定方法は、なるべく絶対パスをハードコードしないように、PHPに用意されているdirname関数と__FILE__定数を使用してファイルを指定します。 dirname関数 : ファイルパスからディレクトリ名の部分までを抽出する __FILE__定数 : 現在のファイルの絶対パスを取得する 12345&lt;?php// 同じディレクトリにあるtest1.phpを呼び出すrequire dirname(__FILE__) . '/test1.php';// 1つ上のディレクトリにあるtest2.phpを呼び出すinclude dirname(__FILE__) . '../test2.php';","link":"/2021/06/03/%E3%80%90PHP%E3%80%91%E5%88%A5%E3%81%AEPHP%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80/"},{"title":"【PHP】PHPのみのファイルの場合はタグを閉じないほうがいい","text":"目次 なぜタグを閉じないほうがいいのか 意図しない表示不具合になる例 なぜタグを閉じないほうがいいのか前提条件として、そのファイルにはPHPの処理のみが書いてある必要があります。 PHPは開始タグ&lt;?phpから、終了タグ?&gt;までがphpのコードとして認識されます。PHPファイルにはHTMLを記述することができるので、開始タグと終了タグに囲まれていない部分はHTMLとして認識されます。 ロジックのみを記述しているPHPファイルの場合、HTMLの記述はないはずなので、終了タグを記述してしまうと、require_oneなどで外部から呼ばれたときに終了タグのあとに空白や改行が混じっていた場合、表示されていまいます。 このような意図しない表示が起こらないように、ロジックのみのPHPファイルでは終了タグは記述しないほうがいいというわけです。 意図しない表示不具合になる例以下のように、ファイルを記述してしまった場合、タブと改行が読み込んだファイルに表示されてしまいます。 1234&lt;?php// 処理?&gt;[タブ][改行] これを終了タグ無しに書き換えると、改行やタブはphpのインデントとしてHTML出力はされません。 1234&lt;?php// 処理[タブ][改行]","link":"/2021/06/04/%E3%80%90PHP%E3%80%91PHP%E3%81%AE%E3%81%BF%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E5%90%88%E3%81%AF%E3%82%BF%E3%82%B0%E3%82%92%E9%96%89%E3%81%98%E3%81%AA%E3%81%84%E3%81%BB%E3%81%86%E3%81%8C%E3%81%84%E3%81%84/"},{"title":"【PHP】クラスのマジックメソッド一覧","text":"目次 一覧 使用例 一覧使うことが多いのは、__construct,__toStringあたり 関数名 呼ばれるタイミング __construct インスタンスの生成時 __destruct インスタンスが破棄される or exit命令が呼ばれたとき __call アクセス不能メソッドが呼び出されたとき __callStatic アクセス不能静的メソッドが呼び出されたとき __get アクセス不能プロパティにアクセスされたとき __set アクセス不能プロパティに値を代入されたとき __isset アクセス不能プロパティがisset関数またはempty関数の引数に渡されたとき __unset アクセス不能プロパティがunset関数の引数で指定されたとき __sleep,__serialize serializeの実行前 __wakeup,__unserialize serializeの実行後 __toString インスタンスの出力時 __invoke インスタンスを関数として呼び出したとき __set_state インスタンスがvar_export関数の引数に指定されたとき __clone cloneキーワードでインスタンスのクローンを作成するとき __debugInfo インスタンスがvar_dump関数の引数に指定されたとき 使用例コンストラクタとechoで呼ばれた場合の処理を実装したクラスTestを作成 123456789101112131415&lt;?phpclass Test{ public function __construct() { // コンストラクタ } public function __toString() { // echo Testインスタンス; // が呼ばれたときに呼ばれる // return 文字列 }}","link":"/2021/06/05/%E3%80%90PHP%E3%80%91%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%83%9E%E3%82%B8%E3%83%83%E3%82%AF%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E4%B8%80%E8%A6%A7/"},{"title":"【PHP】基本的な構文","text":"目次 この記事の目的 変数,定数 変数 定数 配列 構文 if文 for文 foreach文 switch文 関数関係 関数 クロージャー(無名関数) クロージャーを関数の引数に渡す クラス関係 アクセス修飾子 クラスの定義 プロパティ(メンバ変数) メソッドの定義 オブジェクト定数の定義 インスタンス化 インスタンスの要素へのアクセス 抽象クラス インターフェース この記事の目的別の言語を触っていて、PHPに戻ってくるとクラスやメソッド、変数などの定義の仕方を忘れているときがあるのでメモとして、見返すことのできるように残しておく 変数,定数変数PHPでは型宣言は必要ないので、リテラルの値によって変数の型が変化する 1234&lt;?php$data = &quot;AAA&quot;;echo $data; // AAA 定数 定数名は大文字で定義する 呼び出すときに変数のように$は必要ない12345&lt;?phpdefine('TAX',0.08);// 呼び出しecho TAX; // 0.08 配列 PHPの配列は連想配列と同じ キーの部分を定義していない場合、0から数値の連番の値が入る12345678910111213141516171819202122232425&lt;?php// 空の配列を定義する$emptyArray = [];// 要素のみを登録して定義$array = ['a','b','c'];// 要素の追加$array[] = 'd';// キーを指定して、連想配列っぽく定義$dicArray = ['a'=&gt;10,'b'=&gt;20,'c'=&gt;30];// キーを指定して要素を追加$dicArray['d'] = 40;// 配列をわかりやすいように表示print_r($dicArray);// Array// (// [a] =&gt; 10// [b] =&gt; 20// [c] =&gt; 30// ) 構文if文1234567891011&lt;?php$data = &quot;a&quot;;if($data === &quot;a&quot;){ // 処理}else if($data === &quot;b&quot;){ // 処理}else{ // どの処理にも当てはまりませんでした} for文1234&lt;?phpfor($i =0;i&lt;100;i++){ echo $i;} foreach文 C#とは違い、配列 as 各要素になる(C#とは順番が逆) 1234567891011121314&lt;?php$array = ['a','b','c'];// 通常の配列foreach($array as $data){ echo $data; // abc}// 連想配列のキーも取得したい場合foreach($array as $key=&gt;$data){ echo $key; // 123 echo $data; // abc} switch文1234567891011121314151617&lt;?php$data = &quot;a&quot;;switch($data){ case &quot;a&quot;: // $dataがaのときの処理 break; case &quot;b&quot;: // $dataがbのときの処理 break; case &quot;c&quot;: // $dataがcのときの処理 break; default: // 上のどのケースにも当てはまらないときの処理} 関数関係関数 関数名は小文字 基本は引数の型宣言や戻り地の型宣言をしたほうがいい12345678910111213141516&lt;?php// 一番ベーシックな書き方// 0を返すfunction test($data){ return $data * 2;}// 引数と戻り値の型を定義したバージョン(こっちを使ったほうがわかりやすい)function test2(int $data):int{ return $data * 2;}// 呼び出し$value = test2(1);echo $value; クロージャー(無名関数) 関数を変数として扱う123456789&lt;?php// 一番ベーシックな書き方$func = function (int $data){ return $data * 2;}// 呼び出す$func(4); クロージャーを関数の引数に渡すcallable型を引数にすることで関数を関数に引き渡せる1234567&lt;?phpfunction test(callable $endFunc):void{ // 処理 // 処理の終わりにクロージャーの処理をする $endFunc();} クラス関係 アクセス修飾子 punlic private protected クラスの定義 アッパーキャメル記法で定義する12345&lt;?phpclass Test{ // プロパティやメソッドを記述} プロパティ(メンバ変数) ローワーキャメル記法で定義する PHP7.2以降から、データ型の指定ができる 同じクラス内で呼び出す場合$this-&gt;プロパティ名で呼び出す1234567891011121314151617&lt;?phpclass Test{ // 7.2以前までの定義 public $data1; // 7.2以降に使える定義 public int $data2; // 初期値を定義する public int $data3 = 1; // クラス内のプロパティを呼び出す public function printFunc():void{ echo $this-&gt;data; }} メソッドの定義 アクセス修飾子がついている以外は、関数と同じ アッパーキャメル記法で定義する1234567&lt;?phpclass Test{ public function printFunc(int $value):void{ echo $value; }} オブジェクト定数の定義 オブジェクト内固有の定数 同じクラス内で呼び出す場合、self::を付けて呼び出す12345678910&lt;?phpclass Test{ public const TAX = 0.08; // 同じクラス内での呼び出し例 public function printConst(int $value):void{ echo self::TAX; }} インスタンス化 $インスタンス名 = new クラス名()でインスタンス化する1234567&lt;?phpclass Test{ // 処理}$instanceTest = new Test(); インスタンスの要素へのアクセス プロパティ : インスタンス名-&gt;プロパティ名 オブジェクト定数 : インスタンス名::オブジェクト定数 メソッド : インスタンス名-&gt;メソッド名(); 12345678910111213141516171819202122&lt;?phpclass Test{ public const TAX = 0.08; public int $data = 1; public function printFunc():void{ echo $this-&gt;data; }}// インスタンス化$instanceTest = new Test();// dataに10を代入$instanceTest-&gt;data = 10;// 定数を出力echo $instanceTest::TAX;// メソッドを呼び出す$instanceTest-&gt;printFunc(); 抽象クラス 定義 : abstract class 抽象クラス名 抽象メソッドの定義にもabstractをつける 抽象メソッドは中身を持たない 継承 : class クラス名 extends 抽象クラス名 12345678910111213141516171819&lt;?php// 抽象クラスの定義abstract class Parent{ // 抽象メソッドの定義 abstract public test():void; // クラスの定義 public test1():void { // 処理 }}// 抽象クラスの継承class Test extends Parent{} インターフェース 定義 : interface インターフェース名 実装 : class クラス名 implements インターフェース名 12345678910111213141516&lt;?php// 定義interface TestInterface{ public function test():void;}// 実装class Test implements TestInterface{ // インターフェースにより実装を強制される public function test():void { // 処理 }}","link":"/2021/05/06/%E3%80%90PHP%E3%80%91%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E6%A7%8B%E6%96%87/"}],"tags":[{"name":"Vim","slug":"Vim","link":"/tags/Vim/"},{"name":"AppleScript","slug":"AppleScript","link":"/tags/AppleScript/"},{"name":"自動化","slug":"自動化","link":"/tags/%E8%87%AA%E5%8B%95%E5%8C%96/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"HTML","slug":"HTML","link":"/tags/HTML/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"Swift","slug":"Swift","link":"/tags/Swift/"},{"name":"Xcode","slug":"Xcode","link":"/tags/Xcode/"},{"name":"XCode","slug":"XCode","link":"/tags/XCode/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"Android Studio","slug":"Android-Studio","link":"/tags/Android-Studio/"},{"name":"Kotlin","slug":"Kotlin","link":"/tags/Kotlin/"},{"name":"zsh","slug":"zsh","link":"/tags/zsh/"},{"name":"alias","slug":"alias","link":"/tags/alias/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Android","slug":"Android","link":"/tags/Android/"},{"name":"Mac","slug":"Mac","link":"/tags/Mac/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Linuxコマンド","slug":"Linuxコマンド","link":"/tags/Linux%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/"},{"name":"Shell","slug":"Shell","link":"/tags/Shell/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"Unity","slug":"Unity","link":"/tags/Unity/"},{"name":"Visual Studio","slug":"Visual-Studio","link":"/tags/Visual-Studio/"},{"name":"VSCode","slug":"VSCode","link":"/tags/VSCode/"},{"name":"Vimプラグイン","slug":"Vimプラグイン","link":"/tags/Vim%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"Windows API","slug":"Windows-API","link":"/tags/Windows-API/"},{"name":"Zsh","slug":"Zsh","link":"/tags/Zsh/"},{"name":"VimPlugin","slug":"VimPlugin","link":"/tags/VimPlugin/"},{"name":"PowerShell","slug":"PowerShell","link":"/tags/PowerShell/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"Laravel","slug":"Laravel","link":"/tags/Laravel/"},{"name":"ネットワーク","slug":"ネットワーク","link":"/tags/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"},{"name":"Blade","slug":"Blade","link":"/tags/Blade/"},{"name":"PHPDocumenter","slug":"PHPDocumenter","link":"/tags/PHPDocumenter/"},{"name":"iTerm2","slug":"iTerm2","link":"/tags/iTerm2/"},{"name":"PHPUnit","slug":"PHPUnit","link":"/tags/PHPUnit/"},{"name":"anyenv","slug":"anyenv","link":"/tags/anyenv/"},{"name":"Composer","slug":"Composer","link":"/tags/Composer/"},{"name":"vim","slug":"vim","link":"/tags/vim/"},{"name":"NERDTree","slug":"NERDTree","link":"/tags/NERDTree/"}],"categories":[{"name":"Blog","slug":"Blog","link":"/categories/Blog/"}]}