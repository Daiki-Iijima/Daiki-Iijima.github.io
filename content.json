{"pages":[{"title":"","text":"google-site-verification: google54e17a966e7cdc95.html","link":"/google54e17a966e7cdc95.html"}],"posts":[{"title":"GitHubでブログを作成する(Hexo)","text":"環境 Macbook Air 2020 M1 Big Sur 11.0.1 前準備 node.jsをインストールする Hexoをインストールする 1. node.jsをインストールする123git clone https://github.com/creationix/nvm ~/.nvmsource ~/.nvm/nvm.shnvm install 10.16.3 2. Hexoをインストールするnode.jsに付属してくる、nmpを使用する 1npm install -g hexo 3. HexoにGit操作用ツールを追加hexoでdeployするときにgitを使用する 1npm install hexo-deployer-git --save GitHubでブログ用のリポジトリを作成するリポジトリ名はなんでも良いわけではなく、特定の記述規則に従う必要がある 123username.github.iousername = GitHubのユーザー名 作成したリポジトリをCloneして移動12git clone [リポジトリ]cd [リポジトリ] Hexoでプロジェクトを作成ここで作成するプロジェクトは後で消去するので（必要なのは作成されるフォルダの中のファイル)、適当でOK 1hexo init [プロジェクト名] ファイル名の中身をCloneしたリポジトリに移動させる123mv ./&lt;任意のプロジェクト名&gt;/* ./mv ./&lt;任意のプロジェクト名&gt;/.* ./rm -r &lt;任意のプロジェクト名&gt; Hexoプロジェクトの設定を書き換える書き換え対象ファイル1_config.yml 書き換える設定 language: -&gt; language: ja url: -&gt; url: https://.github.io/ 「deploy:」 以下を書き換え&amp;追記 書き換え前12deploy: type: '' 書き換え後12345deploy: type: git repo: https://github.com/&lt;username&gt;/&lt;username&gt;.github.io branch: master message: コミット時のメッセージ","link":"/2021/01/25/GitHub%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/"},{"title":"XCodeでSwiftの練習","text":"1. AppStoreでXCodeをダウンロード AppStoreの検索欄に「XCode」と入力して検索 2. インストールしたXCodeを起動3. Playgroundファイルを作成 File -&gt; New -&gt; Playground… 以前のバージョンのXCodeではトップウィンドウにPlaygourndファイルの作成ボタンがあったが、今はなくなっている 4. 特別な理由が無い限りは、デフォルトの設定のまま作成 Mac -&gt; Blank で作成 再生ボタンの意味 下の再生ボタンは記述してあるコード全てを再生する 今青いカーソルがある部分まで再生される","link":"/2021/01/25/XCode%E3%81%A7Swift%E3%81%AE%E7%B7%B4%E7%BF%92/"},{"title":"【Notion】文字サイズ変更ショートカット","text":"文字サイズ拡大、縮小方法Windows拡大 : Ctrl + 縮小 : Ctrl - Mac拡大 : Cmd ^ 縮小 : Cmd -","link":"/2021/01/26/%E3%80%90Notion%E3%80%91%E6%96%87%E5%AD%97%E3%82%B5%E3%82%A4%E3%82%BA%E5%A4%89%E6%9B%B4%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88/"},{"title":"HTMLの概要","text":"HTMLの特徴全てのコードはタグで囲まれている 123&lt;body&gt; &lt;title&gt;タイトル&lt;/title&gt;&lt;/body&gt; HTMLのサンプルサイトサンプルサイト タグ基本1- &lt;html&gt;&lt;/html&gt; : HTMLの内容 文章関係12345- &lt;body&gt;&lt;/body&gt; : 文章の本文- &lt;div&gt;&lt;/div&gt; : division(領域)画面上の領域を分ける- &lt;h~&gt;&lt;/h~&gt; : Header(タイトル)~部分は数字が入り、数字によってタイトルのサイズが変わる- &lt;p&gt;&lt;/p&gt; : Paragraf(段落)- &lt;a href=&quot;xxx&quot;&gt;&lt;/a&gt; : リンク レイアウト関係1234567- &lt;head&gt;&lt;/head&gt; : レイアウトの記述- &lt;title&gt;&lt;/title&gt; : ブラウザのタブに表示される名前- &lt;style&gt;&lt;/style&gt; : 文字やレイアウトの装飾を指定する部分 - body{} : &lt;body&gt;&lt;/body&gt;に対するレイアウト設定 - div{} : &lt;div&gt;&lt;/div&gt;に対するレイアウト設定 - a:link,a:visited : リンクに対する書式設定 - @media : メディアクエリー（デバイスによって切り替える)レスポンシブデザインのための記述 メタ123- &lt;meta charset=&quot;&quot;/&gt; : 文字コードの指定- &lt;meta http-equiv=&quot;&quot; content=&quot;&quot;/&gt; : ページの種類の指定 - &lt;meta name=&quot;&quot;content=&quot;&quot;/&gt; :","link":"/2021/02/05/HTML%E3%81%AE%E6%A6%82%E8%A6%81/"},{"title":"テキストレイアウトについて","text":"参考URLw3schools.com strong(太文字) &lt;b&gt;&lt;/b&gt;で表現をすることもできるが、HTML5からは、&lt;strong&gt;&lt;/strong&gt;タグが推奨されている 人が目視で確認する時に、&lt;strong&gt;&lt;/strong&gt;の方が読みやすいから 1これは&lt;strong&gt;太文字&lt;/strong&gt;だよ em(イタリック)タグ &lt;i&gt;&lt;/i&gt;で表現することもできるが、HTML5からは、&lt;em&gt;&lt;/em&gt;タグが推奨されている em = Enphasize 1これは&lt;em&gt;イタリック文字&lt;/em&gt;だよ ins(下線)タグ &lt;u&gt;&lt;/u&gt;で表現でこともできるが、HTML5からは、&lt;ins&gt;&lt;/ins&gt;タグが推奨されている ins = insert 1&lt;p&gt;これは&lt;ins&gt;下線&lt;/ins&gt;だよ&lt;/p&gt; sup(上付き文字)タグ sup = Superscript1&lt;p&gt;これは&lt;sup&gt;上付き文字&lt;/sup&gt;だよ&lt;/p&gt; sub(下付き文字)タグ sub = Subscript1&lt;p&gt;これは&lt;sub&gt;下付き文字&lt;/sub&gt;だよ&lt;/p&gt; del(打ち消し)タグ del = delete1&lt;p&gt;これは&lt;del&gt;打ち消し&lt;/del&gt;だよ&lt;/p&gt; hr(区切り線)タグ 自己完結型(&lt;/hr&gt;がいらない) 勝手に改行が入る hr = Horizontal Rule1ここから下に区切り線が入る&lt;hr&gt;ここから上に区切り線が入る mark(ハイライト)タグ mark = marking 1&lt;p&gt;これは&lt;mark&gt;ハイライト&lt;/mark&gt;だよ&lt;/p&gt;","link":"/2021/02/05/%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"リストについて","text":"ul(番号なしリスト)タグ ul = Unorderd List &lt;ul&gt;&lt;/ul&gt;で指定するのはリストのタイトル li(項目)タグ li = List Item &lt;li&gt;&lt;/li&gt;リスト内の項目を記述する 1234567&lt;ul&gt;曜日 &lt;li&gt;月&lt;/li&gt; &lt;li&gt;火&lt;/li&gt; &lt;li&gt;水&lt;/li&gt; &lt;li&gt;木&lt;/li&gt; &lt;li&gt;金&lt;/li&gt;&lt;/ul&gt; ol(番号付きリスト)タグ ol = Ordered List 基本はul(番号なしリスト)と同じだが、オプションをつけることができる オプション複数のオプションを同時に指定も可能 &lt;ol start=&quot;番号&quot;&gt; : 振られる番号のスタート数字を変更する &lt;ol reversed&gt; : 番号を逆順にする &lt;ol type=&quot;&quot;&gt; : 番号の表現を変える 1,A,l,a,i li(項目)タグ li = List Item &lt;li&gt;&lt;/li&gt;リスト内の項目を記述する 1234567&lt;ol start=&quot;4&quot; reversed&gt;曜日 &lt;li&gt;月&lt;/li&gt; &lt;li&gt;火&lt;/li&gt; &lt;li&gt;水&lt;/li&gt; &lt;li&gt;木&lt;/li&gt; &lt;li&gt;金&lt;/li&gt;&lt;/ol&gt;","link":"/2021/02/06/%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"段落と改行について","text":"p(Paragraf)タグ段落を表現するためのタグ 12&lt;p&gt;これは１つ目の段落です&lt;/p&gt;&lt;p&gt;これは２つ目の段落です&lt;/p&gt; br(Line Break)タグ改行を表現するためのタグ 1改行したい場合&lt;br&gt;を入れる 使用例コード123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;タイトル&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;これは１つ目の段落です。好きな食べ物はラーメンです。&lt;br&gt;ここには改行が入ることが望ましいです&lt;/p&gt; &lt;p&gt;これは2つ目の段落です。嫌いな食べ物はカマキリです。&lt;/p&gt; 何も指定指定ない１ 何も指定指定ない2 何も指定指定ない3 何も指定指定ない4 &lt;p&gt;あ&lt;br&gt;い&lt;br&gt;う&lt;br&gt;え&lt;br&gt;お&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 結果123456789101112これは１つ目の段落です。好きな食べ物はラーメンです。ここには改行が入ることが望ましいですこれは2つ目の段落です。嫌いな食べ物はカマキリです。何も指定指定ない１ 何も指定指定ない2 何も指定指定ない3 何も指定指定ない4あいうえお","link":"/2021/02/07/%E6%AE%B5%E8%90%BD%E3%81%A8%E6%94%B9%E8%A1%8C%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"画像を扱う","text":"img(画像)タグ 自己完結型のタグ 画像へのパスはホットリンクを使うこともできる ホットリンク = 動的に他のウェブ上の画像をリンクする 1&lt;img src=&quot;画像へのパス&quot;&gt; サイズ変更(ピクセル数を指定) width=&quot;&quot; : 幅を指定 height=&quot;&quot; : 高さを指定 小ネタ 上下でイメージを配置したい場合、&lt;p&gt;&lt;/p&gt;を使うといい 12&lt;p&gt;&lt;img src=&quot;image.png&quot; width=&quot;100&quot; height=&quot;40&quot;&gt;&lt;/p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-QNMuJ-k-bYU/X68bIi2gjjI/AAAAAAABcUs/39kmQwXcZPM3w4s8O1vrcIswGqd2r6EWgCNcBGAsYHQ/s400/fantasy_unicorn_rainbow.png&quot;&gt;","link":"/2021/02/08/%E7%94%BB%E5%83%8F%E3%82%92%E6%89%B1%E3%81%86/"},{"title":"リンクについて","text":"a hrefを使用してリンクする a = Anker href = hiper reference hrefにURL or パス リンクの種類href属性にURLを指定する 絶対リンク 相対リンク タグを使うことでリンクさせる アンカーリンク 絶対リンク ホームディレクトリからのパスorhttp://xxxに移動する1&lt;a href=&quot;http://www.wikipedia.org&quot;&gt; 相対リンク 今のディレクトリからの相対的なリンクに移動する1&lt;a href=&quot;table.html&quot;&gt;table.htmlへのリンク&lt;/a&gt; アンカーリンク ページ内で移動する(スクロール位置を移動する) aタグのhrefに任意の識別子を指定 pタグのid属性にaタグで指定した識別子と同じ識別子を指定12345678910&lt;p id=&quot;top&quot;&gt;&lt;a href=&quot;http://www.google.com&quot;&gt;google検索&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;table.html&quot;&gt;テーブル.htmlへのリンク&lt;/a&gt;&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;スペース&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;#top&quot;&gt;トップへ戻る&lt;/a&gt;&lt;/p&gt; 画像にリンクを設置する imgタグを&lt;a href=&quot;&quot;&gt;で囲む123&lt;a href=&quot;http://www.google.com&quot;&gt; &lt;img src=&quot;image.png&quot;&gt;&lt;/a&gt;","link":"/2021/02/10/%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"テーブルについて","text":"table(テーブル)を生成する方法 &lt;table&gt;&lt;/table&gt;タグを使用して、テーブルセクションを作成する123&lt;table&gt; テーブルの内容の記述&lt;/table&gt; テーブルの内容を追加する行とデータを別々に記述する必要がある &lt;tr&gt;&lt;/tr&gt;タグで行を生成 tr = table row &lt;td&gt;&lt;/td&gt;タグで行内の要素指定 td = table data 12345678910111213141516171819ラーメン値段表 &lt;!--タイトルのつもり--&gt;&lt;table&gt; &lt;tr&gt; &lt;td&gt;塩ラーメン&lt;/td&gt; &lt;td&gt;299&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;豚骨ラーメン&lt;/td&gt; &lt;td&gt;399&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;醤油ラーメン&lt;/td&gt; &lt;td&gt;499&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;味噌ラーメン&lt;/td&gt; &lt;td&gt;599&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; もう少しリッチな表現を入れる枠線をつける &lt;table&gt;タグにborder属性を記述する12345678910111213141516171819ラーメン値段表 &lt;!--タイトルのつもり--&gt;&lt;table border&gt; &lt;tr&gt; &lt;td&gt;塩ラーメン&lt;/td&gt; &lt;td&gt;299&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;豚骨ラーメン&lt;/td&gt; &lt;td&gt;399&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;醤油ラーメン&lt;/td&gt; &lt;td&gt;499&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;味噌ラーメン&lt;/td&gt; &lt;td&gt;599&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 見出しをつける &lt;thead&gt;&lt;/thead&gt;タグでヘッダーセクションを生成する thead = table head &lt;tr&gt;&lt;/tr&gt;タグで行セクションを生成する &lt;th&gt;&lt;/th&gt;タグでヘッダー情報を記述する ヘッダーと本文を区別するために本文部分は&lt;tbody&gt;&lt;/tbody&gt;セクションで囲む 12345678910111213141516171819202122232425262728ラーメン値段表 &lt;!--タイトルのつもり--&gt;&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;ラーメン名&lt;/th&gt; &lt;th&gt;価格&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;塩ラーメン&lt;/td&gt; &lt;td&gt;299&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;豚骨ラーメン&lt;/td&gt; &lt;td&gt;399&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;醤油ラーメン&lt;/td&gt; &lt;td&gt;499&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;味噌ラーメン&lt;/td&gt; &lt;td&gt;599&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;","link":"/2021/02/10/%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"formについて","text":"参考基本的なフォーム form(入力・送信フォーム)タグ どこに、どうやって送信するかを記述するタグ このタグセクションの中には、何を送信するかを示す 1&lt;form&gt;&lt;/form&gt; input(入力)タグ formタグの「何を」送信するかを記述するためのタグ formタグで囲む必要があるのは、入力した値を送信したい場合 必ずformタグに記述する必要はない type属性を指定することで、入力インターフェイスを変更できる type属性の種類type属性の値 type=”hidden” 画面上は表示されない隠しデータを指定する type=”text” 一行テキストボックスを作成する（初期値） type=”search” 検索テキストの入力欄を作成するHTML5から追加 type=”tel” 電話番号の入力欄を作成するHTML5から追加 type=”url” URLの入力欄を作成するHTML5から追加 type=”email” メールアドレスの入力欄を作成するHTML5から追加 type=”password” パスワード入力欄を作成する type=”datetime” UTC（協定世界時）による日時の入力欄を作成するHTML5から追加 type=”date” 日付の入力欄を作成するHTML5から追加 type=”month” 月の入力欄を作成するHTML5から追加 type=”week” 週の入力欄を作成するHTML5から追加 type=”time” 時間の入力欄を作成するHTML5から追加 type=”datetime-local” UTC（協定世界時）によらないローカル日時の入力欄を作成するHTML5から追加 type=”number” 数値の入力欄を作成するHTML5から追加 type=”range” レンジの入力欄を作成するHTML5から追加 type=”color” 色の入力欄を作成するHTML5から追加 type=”checkbox” チェックボックスを作成する type=”radio” ラジオボタンを作成する type=”file” サーバーへファイルを送信する type=”submit” 送信ボタンを作成する type=”image” 画像ボタンを作成する type=”reset” リセットボタンを作成する type=”button” 汎用ボタンを作成する 123&lt;form&gt; &lt;input type=&quot;text&quot;&gt;&lt;/form&gt; ボタンにアクションを設定する action属性を設定することで、ボタンを押した時の挙動を指定できる この例の場合、ボタンを押すとactionで指定しているURLを開く 123&lt;form action=&quot;http://www.google.co.jp&quot;&gt; &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt; テキストをデフォルトで設定しておく 入力された状態でデフォルト設定 valueタグを使用する1&lt;input type=&quot;text&quot; value=&quot;デフォルト&quot;&gt; ガイドラインとして表示する placeholderタグを使用する1&lt;input type=&quot;text&quot; placeholder=&quot;デフォルト&quot;&gt; チェックボックスをデフォルトでチェックした状態にする checked属性を使う1&lt;input type=&quot;checkbox&quot; checked&gt; ボタンの表示名を変える value属性を設定する 1&lt;input type=&quot;button&quot; value=&quot;これはボタンです&quot;&gt; 複数のラジオボタンの連携 name属性をつけることで、グルーピングができる 1231&lt;input type=&quot;radio&quot; name=&quot;test&quot;&gt;2&lt;input type=&quot;radio&quot; name=&quot;test&quot;&gt;3&lt;input type=&quot;radio&quot; name=&quot;test&quot;&gt; ラジオボタンをデフォルトでチェックした状態にする checked属性を使う1&lt;input type=&quot;checkbox&quot; checked&gt; ドロップダウンを生成する &lt;select&gt;&lt;/select&gt;タグを使用して、その中のセクションに&lt;option&gt;&lt;/option&gt;タグで項目を記述する123456&lt;select&gt; &lt;option&gt;塩ラーメン&lt;/option&gt; &lt;option&gt;味噌ラーメン&lt;/option&gt; &lt;option&gt;醤油ラーメン&lt;/option&gt; &lt;option&gt;豚骨ラーメン&lt;/option&gt;&lt;/select&gt; ドロップダウンのデフォルト選択項目を指定する デフォルトで選択させた状態にしたい&lt;option&gt;タグに、selected属性を付与する 123456&lt;select&gt; &lt;option&gt;塩ラーメン&lt;/option&gt; &lt;option&gt;味噌ラーメン&lt;/option&gt; &lt;option selected&gt;醤油ラーメン&lt;/option&gt; &lt;option&gt;豚骨ラーメン&lt;/option&gt;&lt;/select&gt;","link":"/2021/02/10/form%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"iframeについて","text":"ページ上に複数のページから読み込んだページを表示するiframeタグを使用する iframe = Inline Frame(行内フレーム)1&lt;iframe src=&quot;table.html&quot;&gt;&lt;/iframe&gt; Youtubeの動画を埋め込む youtubeで埋め込みたい動画を選択 動画の再生画面から、埋め込みコードを取得 埋め込みコードはiframeで記述してあるので、そのままコピペする 取得した埋め込みコード例 1&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/y4noU6qgJlc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;","link":"/2021/02/11/iframe%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"iframeのaline属性について","text":"alineとは iframe(インラインフレーム)に並ぶテキスト位置を指定できる iframe(インラインフレーム)をフロートさせられる フロート : 左右どちらかに寄せて、後続のテキストを回り込ませる 指定可能文字列 left : 左に配置して、後続の内容を右側に回り込ませる right: 右に配置して、後続の内容を左側に回り込ませる1&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DrDm7uO4Fu0&quot; align =&quot;right&quot;&gt;&lt;/iframe&gt;","link":"/2021/02/12/iframe%E3%81%AEaline%E5%B1%9E%E6%80%A7%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"Markdownで改行を入れる","text":"改行の入れ方3パターン1. 半角空白を２つ入れて改行する この改行の入れ方の場合、ブロックは別れない HTMLで言うところの、&lt;br&gt;タグと同じ123123 2. 改行を１つ入れる ブロックが別れる HTMLで言うところの、&lt;p&gt;タグと同じ12345123 3. &lt;br&gt;タグを入れる HTMLのタグと同じ11&lt;br&gt;2&lt;br&gt;3&lt;br&gt;","link":"/2021/02/14/Markdown%E3%81%A7%E6%94%B9%E8%A1%8C%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B/"},{"title":"Ctrl+cとEscの違い","text":"Ctrl+cはEscと同じ挙動をしない場合がある例えば、矩形選択モードctrl + vでマルチカーソル処理を行おうとした時に、入力内容を確定するために、インサートモードを抜けるが、その時の挙動がCtrl + cとEscでは、違ったものになる Ctrl + c : 最初の１行しか入力内容が反映されない Esc : 期待通りの選択している全ての行に入力値が反映される 対策 キーマップを書き換えてCtrl + cをEscと同じ扱いにする 1imap &lt;C-c&gt; &lt;Esc&gt; Ctrl + [を使う 素直にEscを使用する","link":"/2021/02/14/Ctrl-c%E3%81%A8Esc%E3%81%AE%E9%81%95%E3%81%84/"},{"title":"zshとaliasについて","text":"zshとは 読み方: ズィーシェル シェルの一種でbashの進化版 https://ja.wikipedia.org/wiki/Z_Shell シェルとは カーネルと対話するためのインターフェイス シェルの名前の由来は、カーネルを包み込んでいることに由来する カーネルの中に入力機能を入れない理由 シェル(ロジック)とカーネル(インターフェイス)を分けることでインターフェイスを他のカーネルでも使いまわすことができるようになる インターフェイスのエラーでカーネルをクラッシュする可能性を排除できる https://recruit.cct-inc.co.jp/tecblog/os/shell/ aliasとは シェル上で、長いコマンドや一連のコマンドをまとめて、ひとまとめにすることのできる機能 使い方(zshの場合) ~/.zshrcに記述する 1alias 別名='本来のコマンド' 保存して.zshrcLの再読み込みをする 1source ~/.zshrc 別名で指定したコマンドを打って期待通り動けばOK 使用例 長いパスのフォルダに移動cdしたい場合 このコマンドbcを打つだけで記述したcdコマンドが実行される1alias bc='cd /Users/daiki/Desktop/Blog/Daiki-Iijima.github.io/source/_posts' 複数のコマンドを1つのaliasにまとめる 各コマンドを;で区切ることで連続したコマンドを記述できる 1alias 別名='コマンド1;コマンド2' 使用例 デスクトップへ移動して、testフォルダを生成する 1alias cdmk='cd /Users/daiki/Desktop;mkdir test' 引数を渡す $+数字を本来の引数があるはずの位置に記述することで、引数を渡すことができる 1alias 別名='mkdir $1' 使用する場合 1別名 引数 複数の引数を渡したい場合は、$の後の数字を繰り上げていく 1alias 別名='mkdir $1;mkdir $2' 使用する場合 1別名 引数 引数 使用例 メモをとるためにディレクトリとディレクトリの中にディレクトリと同名の.mdファイルをvimで編集する1alias memo='(){cd /Users/daiki/Desktop/memo;mkdir $1;vim $1.md}' 参照リンク シェルの設定ファイルを再読み込み bashで複数のコマンドエイリアス zsh環境で引数を持ったコマンドを作る 【時短】zshでエイリアスを設定する方法","link":"/2021/02/16/zsh%E3%81%A8alias%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"VimにPluginマネージャー「Vundle」を入れる","text":"環境 Mac MacBook Air (M1, 2020) OS Big Sur v11.0.1 VIM - Vi IMproved 8.2 (2019 Dec 12, compiled Oct 29 2020 23:33:57) 手順1. ホームディレクトリにフォルダを作る1mkdir -p ~/.vim/bundle/Vundle.vim 2. GitHubからダウンロード1git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim 3. .vimrcにの先頭に設定を記述123456789101112131415set nocompatiblefiletype offset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()Plugin 'VundleVim/Vundle.vim'&quot; 導入したいプラグインを以下に列挙&quot; Plugin '[Github Author]/[Github repo]' の形式で記入Plugin 'airblade/vim-gitgutter'call vundle#end()filetype plugin indent on&quot; その他のカスタム設定を以下に書く 4. vimを開いた状態でコマンドを打ってインストール1:PluginInstall","link":"/2021/02/17/Vim%E3%81%ABPlugin%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A3%E3%83%BC%E3%80%8CVundle%E3%80%8D%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B/"},{"title":"入力補完プラグイン「Deoplete」の導入方法","text":"vimにdeopleteを入れるインストールに前提条件の多いPluginなので詰まるところが多かった 環境 M1 Mac macOS Big Sur(11.2) vim 8.2 公式の手順 Shougo/deoplete 日本語訳最初に注意: deoplete はVimで使用する場合でも Neovim (最新のものを推奨) が必要Vimを使用する場合Vimバージョン8.1以上 で Python 3.6.1以上 とtimersが有効になっている必要がある。 注意: deopleteはmsgpackパッケージ1.0.0+を必要とします。pipでmsgpackパッケージをインストール/アップグレードしてください。msgpack/msgpack-python 注意: どうしても古い msgpack を使う必要がある場合は、代わりに deoplete ver.5.2 を使ってください。Shougo/deoplete.vim 要件 neovimをインストールしておく 1pip3 install --user pyvim neovimでpython3が有効かを確認 nvimを起動して以下のコマンドで1が出るか確認1:echo has(&quot;python3&quot;) .vimrcに記述 今回はプラグイン管理ツールのVundleを使用する 123Plugin 'Shougo/deoplete.nvim'Plugin 'roxma/nvim-yarp'Plugin 'roxma/vim-hug-neovim-rpc' 12&quot; deopleteをVim起動時に有効にするlet g:deoplete#enable_at_startup = 1 :PluginInstallでインストール トラブル対応ファイルを開くとエラーが表示される1[deoplete] deoplete failed to load. Try the :UpdateRemotePlugins command and restart Neovim. See also :checkhealth. 参考サイトdeoplete.nvimのエラー解消","link":"/2021/02/18/%E5%85%A5%E5%8A%9B%E8%A3%9C%E5%AE%8C%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%80%8CDeoplete%E3%80%8D%E3%81%AE%E5%B0%8E%E5%85%A5%E6%96%B9%E6%B3%95/"},{"title":"Swiftで迷路を解く","text":"目的 Swiftの勉強 制作時間 4時間 コードimport UIKitvar targetMaze = [ [&quot;#&quot;,&quot;S&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot; &quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot;#&quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot; &quot;,&quot;#&quot;,&quot; &quot;,&quot;#&quot;,&quot;#&quot;], [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;G&quot;,&quot;#&quot;,&quot;#&quot;]]enum MapType:String{ case Start = &quot;S&quot; case Goal = &quot;G&quot; case Wall = &quot;#&quot; case Root = &quot;+&quot;}struct Vec2:Equatable{ var X:Int = 0 var Y:Int = 0}struct Direction{ var Now:Vec2 var Up:Vec2? var Down:Vec2? var Right:Vec2? var Left:Vec2?}func CheckRoad(maze:[[String]],pos:Vec2?,beforPos:Vec2,maxPos:Vec2,checkType:MapType)-&gt; Direction?{ if(pos == nil) { return nil } // 上,右,下,左 var retPos:Direction = Direction(Now:pos!,Up:nil,Down: nil,Right: nil,Left: nil) // 上下左右の座標を取得 let minusY = retPos.Now.Y - 1 let plusY = retPos.Now.Y + 1 let minusX = retPos.Now.X - 1 let plusX = retPos.Now.X + 1 // マップ内かチェック if(minusY &gt;= 0){ retPos.Down = Vec2() } if(plusY &lt; maxPos.Y){ retPos.Up = Vec2() } if(minusX &gt;= 0){ retPos.Left = Vec2() } if(plusX &lt; maxPos.X){ retPos.Right = Vec2() } // 壁があるかチェック if(retPos.Down == Vec2() &amp;&amp; (maze[minusY][retPos.Now.X] != checkType.rawValue) &amp;&amp; beforPos != Vec2(X: retPos.Now.X, Y: minusY)) { retPos.Down = Vec2(X:retPos.Now.X,Y:minusY) } else{ retPos.Down = nil } if(retPos.Up == Vec2() &amp;&amp; (maze[plusY][retPos.Now.X] != checkType.rawValue) &amp;&amp; beforPos != Vec2(X: retPos.Now.X, Y: plusY)) { retPos.Up = Vec2(X:retPos.Now.X,Y:plusY) }else{ retPos.Up = nil } if(retPos.Left == Vec2() &amp;&amp; (maze[retPos.Now.Y][minusX] != checkType.rawValue) &amp;&amp; beforPos != Vec2(X: minusX, Y: retPos.Now.Y)) { retPos.Left = Vec2(X:minusX,Y:retPos.Now.Y) }else{ retPos.Left = nil } if(retPos.Right == Vec2() &amp;&amp; (maze[retPos.Now.Y][plusX] != checkType.rawValue) &amp;&amp; beforPos != Vec2(X: plusX, Y: retPos.Now.Y)) { retPos.Right = Vec2(X:plusX,Y:retPos.Now.Y) }else{ retPos.Right = nil } return retPos}// 指定したターゲットの位置を返す// 見つからなかった場合は、nilが返えってくるfunc serchTargetPoint(maze:[[String]],targetMapType:MapType)-&gt;Vec2?{ var retPos:Vec2? = nil let mazeYCount = maze.count - 1 let mazeXCount = maze[0].count - 1 for Y in 0...mazeYCount { for X in 0...mazeXCount{ let checkValue = maze[Y][X] if(checkValue == targetMapType.rawValue) { retPos = Vec2(X:X,Y:Y) } } } return retPos}func printMaze(maze:[[String]]){ let mazeYCount = maze.count - 1 let mazeXCount = maze[0].count - 1 for Y in 0...mazeYCount { print(&quot;\\n&quot;) for X in 0...mazeXCount{ print(maze[Y][X], terminator: &quot;&quot;) } } print(&quot;\\n&quot;)}printMaze(maze:targetMaze)let SPos = serchTargetPoint(maze:targetMaze,targetMapType:MapType.Start)let GPos = serchTargetPoint(maze:targetMaze,targetMapType:MapType.Goal)print(SPos ?? &quot;スタートなし&quot;)print(GPos ?? &quot;ゴールなし&quot;)let mazeYCount = targetMaze.count - 1let mazeXCount = targetMaze[0].count - 1let maxPos = Vec2(X: mazeYCount, Y: mazeXCount)var RootList:Array&lt;Direction&gt; = Array&lt;Direction&gt;()RootList.append (CheckRoad(maze:targetMaze,pos: SPos,beforPos: Vec2(X: 0,Y: 0),maxPos: maxPos,checkType: MapType.Wall)!)var BlackList:Array&lt;Vec2&gt; = Array&lt;Vec2&gt;()while true { let direction = CheckRoad(maze:targetMaze,pos: RootList.last?.Up ?? nil,beforPos: RootList.last?.Now ?? Vec2(),maxPos: maxPos,checkType: MapType.Wall) var checkFlag:Bool = false for black in BlackList { if(black == direction?.Now ?? Vec2()) { checkFlag = true } } if(GPos == direction?.Now ?? Vec2()) { break } if(direction != nil &amp;&amp; !checkFlag) { RootList.append(direction!) }else { let direction = CheckRoad(maze:targetMaze,pos: RootList.last?.Right ?? nil,beforPos: RootList.last?.Now ?? Vec2(),maxPos: maxPos,checkType: MapType.Wall) var checkFlag:Bool = false for black in BlackList { if(black == direction?.Now ?? Vec2()) { checkFlag = true } } if(GPos == direction?.Now ?? Vec2()) { break } if(direction != nil &amp;&amp; !checkFlag) { RootList.append(direction!) }else { let direction = CheckRoad(maze:targetMaze,pos: RootList.last?.Down ?? nil,beforPos: RootList.last?.Now ?? Vec2(),maxPos: maxPos,checkType: MapType.Wall) var checkFlag:Bool = false for black in BlackList { if(black == direction?.Now ?? Vec2()) { checkFlag = true } } if(GPos == direction?.Now ?? Vec2()) { break } if(direction != nil &amp;&amp; !checkFlag) { RootList.append(direction!) }else { let direction = CheckRoad(maze:targetMaze,pos: RootList.last?.Left ?? nil,beforPos: RootList.last?.Now ?? Vec2(),maxPos: maxPos,checkType: MapType.Wall) var checkFlag:Bool = false for black in BlackList { if(black == direction?.Now ?? Vec2()) { checkFlag = true } } if(GPos == direction?.Now ?? Vec2()) { break } if(direction != nil &amp;&amp; !checkFlag) { RootList.append(direction!) }else { BlackList.append(RootList.last?.Now ?? Vec2()) if(RootList.count &gt; 0) { RootList.removeLast() }else { break } } } } }}for root in RootList{ print(root.Now) targetMaze[root.Now.Y][root.Now.X] = MapType.Root.rawValue}printMaze(maze:targetMaze) 感想 Enumのコードに値をセットできるので、コードが読みやすい ちょこちょこ出てくる制約に最初はイライラするが、書いているとなれる 制約があるおかげで、コードに統一感が出る","link":"/2021/02/20/Swift%E3%81%A7%E8%BF%B7%E8%B7%AF%E3%82%92%E8%A7%A3%E3%81%8F/"},{"title":"AppleScriptでVimの保存時のファイル更新を取得してブラウザを更新する","text":"概要Vimでファイルを保存した時にファイルをブラウザで開いている場合(HTMLを書いている場合など)、いちいちブラウザにフォーカスを当てて、ブラウザ再読み込みを行うのは面倒くさいので、 ブラウザにフォーカスを当てる command + rイベントを発行 フォーカスをターミナルに戻す の動作を自動化する Vimで使用するコマンドを実装する /Users/daiki/.vim/pluginにchrome.vimを配置 ディレクトリがない場合は作成する 以下のコードをchrome.vimに書き込んで保存 chrome.vim 123command! -bar ChromeReload silent !osascript $HOME/bin/chrome_reload.scpt &amp;&amp; osascript $HOME/bin/terminal_focus.scptcommand! -bar ChromeStartObserve ChromeStopObserve | autocmd BufWritePost &lt;buffer&gt; ChromeReloadcommand! -bar ChromeStopObserve autocmd! BufWritePost &lt;buffer&gt; ブラウザにフォーカスを当ててリロードするコマンドを実装 /Users/daiki/binにchrome_reload.scptを配置 ディレクトリがない場合は作成する 以下のコードをchrome_reload.scptに書き込んで保存カスタマイズ 1行目:tell application &quot;safari&quot; to activateのsafariの部分を別のブラウザの名前に変更すると開くブラウザを変更できる chrome_reload.scpt 12tell application &quot;safari&quot; to activatetell application &quot;System Events&quot; to keystroke &quot;r&quot; using {command down} ターミナルにフォーカスを戻すコマンド /Users/daiki/binにterminal_focus.scptを配置 ディレクトリがない場合は作成する 以下のコードをterminal_focus.scptに書き込んで保存カスタマイズ &quot;Terminal&quot;の部分を書き換えると別アプリにフォーカスを当てられる terminal_focus.scpt 1tell application &quot;Terminal&quot; to activate Vimで使用するにはvimを開いて、ブラウザで更新したいファイルに対して以下のコマンドを打つ :ChromeReload:１回ブラウザをリロードする :ChromeStartObserve:Vimで保存するたびにブラウザをリロードする :ChromeStopObserve:ChromeStartObserveの保存時の自動リロードを停止する 参考https://lukesilvia.hatenablog.com/entry/20101023/p2","link":"/2021/02/21/AppleScript%E3%81%A7Vim%E3%81%AE%E4%BF%9D%E5%AD%98%E6%99%82%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%9B%B4%E6%96%B0%E3%82%92%E5%8F%96%E5%BE%97%E3%81%97%E3%81%A6%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B/"},{"title":"vimのカレントファイルをブラウザで開く","text":"openコマンドを使う vimでは%でカレントファイルのパスを取得できる !はOS用のコマンド(echoやpwdなど)の先頭につけることでvimエディタ上からOS用コマンドを実行することができる openはファイルのデフォルトで開くソフトに設定されているソフトで開かれる 1:!open % 入力の手間を減らす これまでのコマンドをショートカットキーで呼び出せるように.vimrcに追記する 12345&quot; スペースキーをショートカットのトリガーとして認識するように設定let mapleader = &quot;\\&lt;Space&gt;&quot; &quot; スペースキー + o で実行できるnnoremap &lt;Leader&gt;o :!open %&lt;CR&gt; フォーカスを戻す(Mac) openコマンドを使うとフォーカスがブラウザになってしまうので、AppleScriptを使ってフォーカスをVim(iTerm)に戻す terminal_focusの対象アプリを変更すればiTerm以外のソフトにも対応可能 ~/.vim/plugin/BrowserOpen.vim 1command! -bar BrowserOpen !open % | osascript $HOME/bin/terminal_focus.scpt ~/bin/terminal_focus.scpt 1tell application &quot;iTerm&quot; to activate ~/.vimrc 12345&quot; スペースキーをショートカットのトリガーとして認識するように設定let mapleader = &quot;\\&lt;Space&gt;&quot; &quot; スペースキー + o で実行できるnnoremap &lt;Leader&gt;o :BrowserOpen&lt;CR&gt;","link":"/2021/02/22/vim%E3%81%AE%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7%E9%96%8B%E3%81%8F/"},{"title":"div属性について","text":"dev(devision)要素について dev要素は、複数のブロックに対して、レイアウトを適応させることができる \\&lt;dev\\&gt;\\&lt;/dev\\&gt;で囲んだブロック全体にレイアウトが適応させる 基本的な概念は内部CSSのclassやidと同じ 1234567891011121314151617181920212223242526&lt;html&gt; &lt;head&gt; &lt;style&gt; .A{ background:pink; } #B{ background:yellow; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!--classを使用--&gt; &lt;div class=&quot;A&quot;&gt; &lt;h1&gt;これは見出しです&lt;/p&gt; &lt;p&gt;これは見出しに対する本文です&lt;/p&gt; &lt;/div&gt; &lt;!--idを使用--&gt; &lt;div id=&quot;B&quot;&gt; &lt;h1&gt;これは見出し2です&lt;/p&gt; &lt;p&gt;これは見出し2に対する本文です&lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;","link":"/2021/02/23/div%E5%B1%9E%E6%80%A7%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"自作ソート【Swift】","text":"目的 ソートアルゴリズムの基本を身につける Swiftになれる 要件 数字をソートアルゴリズムを使ってソートする(Swiftのソート関数は使わない) 日本語ひらがな、アルファベット小文字の1文字をソートする インプットは数字の場合と、文字の場合がある (ただし、文字と数字の組み合わせはない、どちらか1種類のみの羅列が入力される) 最後に昇順 or 降順の指定がある ユーザーは決まった手順を守るとは限らないので、その場合の例外の対応方法の組み込み (無理矢理処理しても、エラーを返してもいい)k コード123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194import UIKitlet testValue1:String = &quot;24,6723,23,111,43,1,昇順&quot;let testValue2:String = &quot;え,い,う,か,と,昇順&quot;let testValue3:String = &quot;-2,-22347999,あ,2,い,3,-1,ああ,昇順&quot;enum OrderType:String{ case none = &quot;例外&quot; case ascending = &quot;昇順&quot; case descending = &quot;降順&quot;}enum ValueType:String{ case Iregular = &quot;例外&quot; case Number = &quot;数字&quot; case Charactor = &quot;ローマ字&quot; case Japanese = &quot;日本語&quot;}// ============= メイン処理 ==============// 入力された文字列を分割var inputValueList = testValue3.split(separator: &quot;,&quot;)// ソートタイプのチェックvar orderType:OrderType = OrderType(rawValue: String(inputValueList.last ?? &quot;&quot;)) ?? OrderType.noneif(orderType == OrderType.none){ print(&quot;ソート方法を指定してください&quot;) print(&quot;指定がないため、昇順ソートを行います&quot;) orderType = OrderType.ascending}else{ // ソート指定は邪魔なので取り除く inputValueList.removeLast()}// 入力文字列のタイプを判定let valueType = CheckValueType(targetValueList: inputValueList)// ソート処理var sortedNumberList:Array&lt;Substring&gt; = Array&lt;Substring&gt;()sortedNumberList = Sort(targetNumberList:inputValueList)// 何をソートしたか表示switch valueType {case .Number: print(ValueType.Number.rawValue + &quot;ソート完了&quot;)case .Charactor: print(ValueType.Charactor.rawValue + &quot;ソート完了&quot;)case .Japanese: print(ValueType.Japanese.rawValue + &quot;ソート完了&quot;)case .Iregular: print(ValueType.Iregular.rawValue + &quot;ソート完了&quot;)}// ソートタイプによって出力を切り替えswitch orderType {case .ascending: print(sortedNumberList)case .descending: print(Array(sortedNumberList.reversed()))case .none: print(&quot;ソート失敗&quot;)}// =====================================// ============== メソッド ===============// 値のタイプを判定func CheckValueType(targetValueList:Array&lt;Substring&gt;)-&gt; ValueType{ var retVal : ValueType = ValueType.Iregular let targetValueCount = targetValueList.count var numberCount = 0 var charCount = 0 var japaneseCount = 0 // 数字の並びかチェック for i in 0...inputValueList.count - 1{ let str:Int = Int(inputValueList[i].cString(using: .shiftJIS)!.first!) if(str &gt;= 48 &amp;&amp; str &lt;= 57){ // 数字 numberCount += 1 }else if(str &gt;= 97 &amp;&amp; str &lt;= 122){ // 小文字 charCount += 1 }else if(str &gt;= 65 &amp;&amp; str &lt;= 90){ // 大文字 charCount += 1 }else if(str == -125){ // ひらがな japaneseCount += 1 }else if(str == -126){ // カタカナ japaneseCount += 1 } } if(numberCount == targetValueCount){ retVal = ValueType.Number }else if(charCount == targetValueCount){ retVal = ValueType.Charactor }else if(japaneseCount == targetValueCount){ retVal = ValueType.Japanese }else{ retVal = ValueType.Iregular } return retVal}// ソート処理func Sort(targetNumberList:Array&lt;Substring&gt;)-&gt;Array&lt;Substring&gt;{ var sortList = targetNumberList var isChange = false for index in 0...sortList.count - 1{ if(index + 1 == sortList.count) { break } let firstList = sortList[index].cString(using: .shiftJIS)! var firstSign = 1 var firstJapaneseSign = 0 let firstCheckValue = firstList.first! if(firstCheckValue == 45 ) // マイナス符号 { firstSign = -1 } if(firstCheckValue == -125 || // ひらがな firstCheckValue == -126) // カタカナ { firstJapaneseSign = Int(firstCheckValue) * -1 } var first:Int = 0 for fc in firstList{ first += Int(fc) * firstSign } if(firstJapaneseSign != 0){ first *= firstJapaneseSign } let secondList = sortList[index+1].cString(using: .shiftJIS)! var secondSign = 1 var secondJapaneseCheckSign = 0 let secondCheckValue = secondList.first! if(secondCheckValue == 45) // マイナス符号 { secondSign = -1 } if(secondCheckValue == -125 || // ひらがな secondCheckValue == -126) // カタカナ { secondJapaneseCheckSign = Int(secondCheckValue) * -1 } var second:Int = 0 for sc in secondList{ second += Int(sc) * secondSign } if(secondJapaneseCheckSign != 0){ second *= secondJapaneseCheckSign } let firstValue = sortList[index] let secondValue = sortList[index+1] if(first &gt; second) { isChange = true sortList[index] = secondValue sortList[index + 1] = firstValue } } if(isChange){ sortList = Sort(targetNumberList: sortList) } return sortList}// ======================================= 備考（感想） 文字コード変換する時に全てShiftJISのコードで変換されてしまった(未解決) 今回使ったソートアルゴリズムは「バブルソート」 小数に対応していない","link":"/2021/02/24/%E8%87%AA%E4%BD%9C%E3%82%BD%E3%83%BC%E3%83%88%E3%80%90Swift%E3%80%91/"},{"title":"【Gitエラー】「fatal: Out of memory, malloc failed (tried to allocate xxxxxxxxxxx bytes)」の解決方法","text":"原因ファイル容量の大きいGitリポジトリをチェックアウトしようとしたら起きたので、Gitの解凍処理でメモリが食い尽くされているのが原因らいしい 解決策解凍処理を小分けにする ~/.gitconfigに以下を追記する 12345678[core]packedGitLimit = 128mpackedGitWindowSize = 128m[pack]deltaCacheSize = 128mpackSizeLimit = 128mwindowMemory = 128m","link":"/2021/02/25/%E3%80%90Git%E3%82%A8%E3%83%A9%E3%83%BC%E3%80%91%E3%80%8Cfatal-Out-of-memory-malloc-failed-tried-to-allocate-xxxxxxxxxxx-bytes-%E3%80%8D%E3%81%AE%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95/"},{"title":"【Vim】バックスペースが効かなくなった場合の対処方","text":"参考https://qiita.com/omega999/items/23aec6a7f6d6735d033f 対処方法 .vimrcに以下を記述する1set backspace=indent,eol,start","link":"/2021/02/26/%E3%80%90Vim%E3%80%91%E3%83%90%E3%83%83%E3%82%AF%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/"},{"title":"Floatレイアウトについて","text":"","link":"/2021/02/26/Float%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【Vimプラグイン】囲う記述を楽にする「vim-surround」","text":"環境 MacBook Air M1 Big Sur v11.2 zsh vim-surroundとは？文字列を記述する時の&quot;&quot;や括弧() []などのさまざまな、囲い（surround）を編集する際に役立つプラグイン GitHubリポジトリ : https://github.com/tpope/vim-surround インストール方法(Vundle使用)以下記述を~/.vimrcに追加 1Plugin 'tpope/vim-surround' 使い方囲う ノーマルモード コマンド : ysiw + 囲みたい文字 ヴィジュアルモード コマンド : ヴィジュアルモードで選択 + S + 囲みたい文字 囲い解除(ノーマルモード)囲いを解除 コマンド : ds + 解除したい囲み文字 タグが対象の場合 : dst 囲いの中身を消去 コマンド : di + 中身を消去したい囲み文字 タグが対象の場合 : dit 囲いの変更(ノーマルモードi)囲いを変更 コマンド : cs + 変更したい囲み文字 + 変更したい囲み文字 囲いの中身を変更 コマンド : ci + 中身を変更したい囲み文字","link":"/2021/02/27/%E3%80%90Vim%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%80%91%E5%9B%B2%E3%81%86%E8%A8%98%E8%BF%B0%E3%82%92%E6%A5%BD%E3%81%AB%E3%81%99%E3%82%8B%E3%80%8Cvim-surround%E3%80%8D/"},{"title":"【Linuxコマンド】よく使うlsコマンドオプション","text":"目次 隠しファイル.ファイルまで表示させる ファイル詳細を表示させる １列１ファイルで表示させる カンマ区切りで表示させる 普通にlsを使った場合12% lsMemo_App Memo_App.xcodeproj README.md 1. 隠しファイル.ファイルまで表示させるオプション-aをつける 1ls -a 実行例123%ls -a. .DS_Store .gitignore Memo_App.xcodeproj.. .git Memo_App README.md 2. ファイル詳細を表示させるlsコマンドのオプションに-lをつける 1ls -l 実行例12345% ls -ltotal 8drwxr-xr-x 12 daiki staff 384 2 28 01:39 Memo_Appdrwxr-xr-x@ 5 daiki staff 160 2 28 02:03 Memo_App.xcodeproj-rw-r--r-- 1 daiki staff 10 2 27 22:39 README.md 3. １列１ファイルで表示させるlsコマンドのオプションに-1をつける 1ls -1 実行例1234% ls -1Memo_AppMemo_App.xcodeprojREADME.md 4. カンマ区切りで表示させるlsコマンドのオプションに-mをつける 1ls -m 実行例12% ls -mMemo_App, Memo_App.xcodeproj, README.md","link":"/2021/02/28/%E3%80%90Linux%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%80%91%E3%82%88%E3%81%8F%E4%BD%BF%E3%81%86ls%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3/"},{"title":"XcodeでVimキーバインドを使う「XVim2」","text":"目次 証明書の発行 XVim2のインストール XcodeにXVim2を読み込ませる .xvimrcでカスタマイズ 参考 1. 証明書の発行 アプリケーションのKeychain Access(キーチェーンアクセス)を起動 Keychain Accessウィンドウの左側のデフォルトチェーン内のログインを選択 画面上部のメニューバーから、キーチェーンアクセス-&gt;証明書アシスタント-&gt;証明書を作成を選択 以下と同じ情報を設定して、作成ボタンを押下 名前 : XcodeSigner 固有名のタイプ : 自己署名ルート 証明書のタイプ : コード署名 作成時の警告が出るが、続けるを選択 以下の画像のような画面が表示されれば証明書の発行は成功 2. XVim2のインストールこの作業では、任意の場所にリポジトリをクローンして作業を行ますが、今回はDesktopで作業することとして解説します。 Xcodeのパスの確認インストール作業を行う前に、Xcodeが配置されているファイルパスの確認をします。 以下のコマンドで、/Applications/Xcode.app/Contents/Developerというパスが表示されればOKです。それ以外のパスが表示されてしまった場合は、以下コマンドで、パスを設定してください。 1xcode-select -p それ以外のパスが表示されてしまった場合は、以下コマンドで、パスを設定してください。 1xcode-select -s /Applications/Xcode.app/Contents/Developer インストール注意 : この作業を行うときは、Xcodeを完全に落として(タスクキル)から行ってください ディレクトリを移動 1cd ~/Desktop リポジトリをクローン 1git clone https://github.com/XVimProject/XVim2.git クローンしてきたリポジトリのディレクトリに移動 1cd XVim2/ makeコマンドでプラグインをビルド 1make 出力がたくさん流れたあと、に以下のような文字が表示されれば成功 1** BUILD SUCCEEDED ** 3. XcodeにXVim2を読み込ませる Xcodeを起動すると、以下の画像のようなウィンドウが表示されるので、Load Bundleを選択する 上部メニューバーのEditメニューの一番下にXVimが表示されて入れば導入成功 間違えて、Skip Bundleを選択してしまった場合一度XCodeを閉じて(タスクキル)して、以下コマンドをターミナルで実行してから再度XCodeを実行するとまた確認ウィンドウが表示さる X.X = 自分が使っているXcodeのバージョン 1defaults delete com.apple.dt.Xcode DVTPlugInManagerNonApplePlugIns-Xcod-X.X 4. .xvimrcでカスタマイズホームディレクトリ直下に.xvimrcファイルを作成して、.vimrcと同じように記述していく 1vim ~/.xvimrc 5. 参考 https://github.com/XVimProject/XVim2 https://zenn.dev/ryo_kawamata/articles/intoroduce-xvim2 https://qiita.com/ks-cap/items/91fb8578bbb930141a60","link":"/2021/02/28/Xcode%E3%81%A7Vim%E3%82%AD%E3%83%BC%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86%E3%80%8CXVim2%E3%80%8D/"},{"title":"【Xcode】EntryPointを変更する方法","text":"もくじ 環境 Entry Pointとは StoryBordから変更する コードから変更する [おまけ]初回起動時のみ特定の画面を表示させる 0. 環境 MacBook Air M1 Xcode 12.4 1. Entry Pointとは プログラムの開始される位置 この記事では開始される画面の位置も含まれる画面上で見ると以下の画像の矢印部分がEntry Pointを表している アシスタントエディタで確認すると以下赤枠部分 2. StoryBordから変更するドラックアンドドロップで矢印を移動させる Utilites areaから移動させるAttributes inspector内のIs Initial View Controllerにチェクを入れる 3. コードから変更する1. Main.storybordの遷移させたいViewControllerにStoryboad IDを設定する Identity Inspector 内のSotryboard IDを設定 今回はこのように設定 1画面目 : FirstView 2画面目 : SecondView 2. SceneDelegate.swift 何も変更していないデフォルトの状態だとこのようなコードになっていると思います 1234567891011121314151617181920212223242526272829303132333435363738394041424344import UIKitclass SceneDelegate: UIResponder, UIWindowSceneDelegate { var window: UIWindow? func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) { // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`. // If using a storyboard, the `window` property will automatically be initialized and attached to the scene. // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead). guard let _ = (scene as? UIWindowScene) else { return } } func sceneDidDisconnect(_ scene: UIScene) { // Called as the scene is being released by the system. // This occurs shortly after the scene enters the background, or when its session is discarded. // Release any resources associated with this scene that can be re-created the next time the scene connects. // The scene may re-connect later, as its session was not necessarily discarded (see `application:didDiscardSceneSessions` instead). } func sceneDidBecomeActive(_ scene: UIScene) { // Called when the scene has moved from an inactive state to an active state. // Use this method to restart any tasks that were paused (or not yet started) when the scene was inactive. } func sceneWillResignActive(_ scene: UIScene) { // Called when the scene will move from an active state to an inactive state. // This may occur due to temporary interruptions (ex. an incoming phone call). } func sceneWillEnterForeground(_ scene: UIScene) { // Called as the scene transitions from the background to the foreground. // Use this method to undo the changes made on entering the background. } func sceneDidEnterBackground(_ scene: UIScene) { // Called as the scene transitions from the foreground to the background. // Use this method to save data, release shared resources, and store enough scene-specific state information // to restore the scene back to its current state. }} sceneメソッド内に以下のコードのコードを追記します この時、guard let _ =の_の部分をwindowに変更しています。 12345678910111213141516171819func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) { // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`. // If using a storyboard, the `window` property will automatically be initialized and attached to the scene. // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead). guard let windowScene = (scene as? UIWindowScene) else { return } window = UIWindow(windowScene: windowScene) let storybard = UIStoryboard(name: &quot;Main&quot;,bundle: nil) // 初めて起動しているか if(lanchIsFIrstTme()){ window?.rootViewController = storybard.instantiateViewController(identifier: &quot;FirstView&quot;) firstLanch() }else{ window?.rootViewController = storybard.instantiateViewController(identifier: &quot;SecondView&quot;) } window?.makeKeyAndVisible()} 4. [おまけ]初回起動時のみ特定の画面を表示させる一つ前で実装した切り替え処理とユーザーデフォルト機能を組み合わせて、初回起動かどうかを判定する 確認用メソッドと登録用メソッドを作成 123456789private let STORED_KEY = &quot;lanched&quot;func firstLanch(){ return UserDefaults.standard.set(true,forKey: STORED_KEY)}func lanchIsFIrstTme() -&gt; Bool{ return !UserDefaults.standard.bool(forKey: STORED_KEY)} 一つ前で実装したコードを改変 12345678910111213141516171819func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) { // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`. // If using a storyboard, the `window` property will automatically be initialized and attached to the scene. // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead). guard let windowScene = (scene as? UIWindowScene) else { return } window = UIWindow(windowScene: windowScene) let storybard = UIStoryboard(name: &quot;Main&quot;,bundle: nil) // 初めて起動しているか if(lanchIsFIrstTme()){ window?.rootViewController = storybard.instantiateViewController(identifier: &quot;FirstView&quot;) firstLanch() }else{ window?.rootViewController = storybard.instantiateViewController(identifier: &quot;SecondView&quot;) } window?.makeKeyAndVisible()} こんな感じになればOK参考https://stackoverflow.com/questions/10428629/programmatically-set-the-initial-view-controller-using-storyboards/47691073","link":"/2021/03/01/%E3%80%90Xcode%E3%80%91EntryPoint%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/"},{"title":"【Swift】Array内の要素を指定して消去する","text":"もくじ removeAllを使用する 短くかける for文を使用する ちょっと冗長 その他の参考 注意この方法の場合、比較する要素に一致するデータは全て配列から消去されます 1.removeAllを使用するremoveAll(where:)メソッドを使用し、要素を比較して一致している値全てを消去する 123456789// 配列定義var testArray :Array&lt;String&gt; = Array&lt;String&gt;()// 要素追加testArray.append(&quot;test&quot;)testArray.append(&quot;kemono&quot;)// testと一致する要素を全て消去testArray.removeAll(where: {$0 == &quot;test&quot;}) 2.for文を使用するfor文を使用して配列内の要素を列挙して、要素を比較した結果一致している配列内要素を全て消去する 1234567891011121314151617// 配列定義var testArray :Array&lt;String&gt; = Array&lt;String&gt;()// 要素追加testArray.append(&quot;test&quot;)testArray.append(&quot;test&quot;)testArray.append(&quot;kemono&quot;)// 要素を操作するのでコピーを作成して、それをfor文で列挙するlet copyArray = testArray// 一致する要素を消去for i in 0...copyArray.count - 1{ if(copyArray[i] == &quot;test&quot;){ testArray.remove(at: i) }} 3.その他の参考 https://qiita.com/fuziki/items/e8b1bb5b2dc8c8f43041","link":"/2021/03/01/%E3%80%90Swift%E3%80%91Array%E5%86%85%E3%81%AE%E8%A6%81%E7%B4%A0%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E6%B6%88%E5%8E%BB%E3%81%99%E3%82%8B/"},{"title":"cssにつて","text":"CSSとは何か 正式名称 : Cascading Syle Sheets(カスケーディングスタイルシート) ページレイアウトを形成するためのスタイルシート HTML = マークアップ,CSS = レイアウト 記述方法の種類 インラインCSS : body内の各種タグの中に記述する インラインスタイルシートと呼ぶ場合もある 内部CSS : headタグの中に記述 内部スタイルシートと呼ぶ場合もある 外部ファイル(.css) 外部スタイルシートと呼ぶ場合もある コンテンツとデザインの分離ができるので、外部ファイルに記述するのが基本 1.インラインCSS : body内の各種タグの中に記述する 一つ一つのタグに設定する必要がある インラインCSSと呼ばれる書き方で、直接タグの中でstyle属性を指定する 1style=属性:&quot;属性値&quot; color属性で色を変える例 1&lt;p style=&quot;color:blue&quot;&gt;今回は、新しくリリースするプロダクトの紹介をします&lt;/p&gt; 複数の属性指定したい場合、;を入力することで指定できる 1&lt;p style=&quot;color:blue;font-size:300%&quot;&gt;今回は、新しくリリースするプロダクトの紹介をします&lt;/p&gt; 2.内部CSS : headタグ内に記述する headタグの内部に記述するCSS 具体的にはheadブロック内にstyleブロックを作成し、そこにスタイルを記述する12345678910&lt;html&gt; &lt;head&gt; &lt;style&gt; &lt;!--ここにスタイルを記述する--&gt; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; スタイルの記述には２通りの方法がある タグ全体に適応する 指定した領域のみに適応する 1. タグ全体に適応する styleブロック内にタグ名のブロックを作り、そこにスタイルを記述する 複数のスタイルを記述する場合、;で区切る1234567&lt;style&gt;&lt;!--pタグ内の全てのテキストにここに記述したレイアウトが適応される--&gt; p{ color:blue; font-size:150%; }&lt;/style&gt; 2. 指定した領域のみに適応する class属性を使用する 複数のタグに適応できる id属性を使用する １つのタグのみに適応できる span属性を使用する 特定の文字列適応する 1. class属性を使用する class属性にクラス名を指定し、styleブロックに.クラス名でスタイルを記述する 同一のクラス名を他のタグにも割り当てることができる123456789101112131415&lt;html&gt; &lt;head&gt; &lt;style&gt; .A{ color:blue; font-size:150%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class=&quot;A&quot;&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p class=&quot;A&quot;&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p&gt; クラス名を指定していません&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 2. id属性を使用する id属性を定義してid名を指定して、styleブロックに#id名でスタイルを記述する 1つのタグにしか適応できない123456789101112131415&lt;html&gt; &lt;head&gt; &lt;style&gt; #B{ color:blue; font-size:150%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 id=&quot;B&quot;&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p&gt;&lt;クラス名を指定していません/p&gt; &lt;p&gt; クラス名を指定していません&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 3. span属性を使用する spanタグ(&lt;span&gt;&lt;/span&gt;)を定義してclass属性にクラス名を指定して、styleブロックに.クラス名でスタイルを記述する class idとの違いは、タグに対するレイアウトではなく、文字列に対するレイアウトである点123456789101112131415&lt;html&gt; &lt;head&gt; &lt;style&gt; .C{ color:blue; font-size:150%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p&gt;クラス名を&lt;span class=&quot;C&quot;&gt;指定&lt;/span&gt;していません&lt;/p&gt; &lt;p&gt;クラス名を指定していません&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;","link":"/2021/03/02/CSS%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"インラインCSSと内部CSSいついて","text":"1.インラインCSS : body内の各種タグの中に記述する 一つ一つのタグに設定する必要がある インラインCSSと呼ばれる書き方で、直接タグの中でstyle属性を指定する 1style=属性:&quot;属性値&quot; color属性で色を変える例 1&lt;p style=&quot;color:blue&quot;&gt;今回は、新しくリリースするプロダクトの紹介をします&lt;/p&gt; 複数の属性指定したい場合、;を入力することで指定できる 1&lt;p style=&quot;color:blue;font-size:300%&quot;&gt;今回は、新しくリリースするプロダクトの紹介をします&lt;/p&gt; 2.内部CSS : headタグ内に記述する headタグの内部に記述するCSS 具体的にはheadブロック内にstyleブロックを作成し、そこにスタイルを記述する12345678910&lt;html&gt; &lt;head&gt; &lt;style&gt; &lt;!--ここにスタイルを記述する--&gt; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; スタイルの記述には２通りの方法がある タグ全体に適応する 指定した領域のみに適応する 1. タグ全体に適応する styleブロック内にタグ名のブロックを作り、そこにスタイルを記述する 複数のスタイルを記述する場合、;で区切る1234567&lt;style&gt;&lt;!--pタグ内の全てのテキストにここに記述したレイアウトが適応される--&gt; p{ color:blue; font-size:150%; }&lt;/style&gt; 2. 指定した領域のみに適応する class属性を使用する 複数のタグに適応できる id属性を使用する １つのタグのみに適応できる span属性を使用する 特定の文字列適応する 1. class属性を使用する class属性にクラス名を指定し、styleブロックに.クラス名でスタイルを記述する 同一のクラス名を他のタグにも割り当てることができる123456789101112131415&lt;html&gt; &lt;head&gt; &lt;style&gt; .A{ color:blue; font-size:150%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class=&quot;A&quot;&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p class=&quot;A&quot;&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p&gt; クラス名を指定していません&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 2. id属性を使用する id属性を定義してid名を指定して、styleブロックに#id名でスタイルを記述する 1つのタグにしか適応できない123456789101112131415&lt;html&gt; &lt;head&gt; &lt;style&gt; #B{ color:blue; font-size:150%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 id=&quot;B&quot;&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p&gt;&lt;クラス名を指定していません/p&gt; &lt;p&gt; クラス名を指定していません&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 3. span属性を使用する spanタグ(&lt;span&gt;&lt;/span&gt;)を定義してclass属性にクラス名を指定して、styleブロックに.クラス名でスタイルを記述する class idとの違いは、タグに対するレイアウトではなく、文字列に対するレイアウトである点123456789101112131415&lt;html&gt; &lt;head&gt; &lt;style&gt; .C{ color:blue; font-size:150%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;クラスでスタイルを指定しています&lt;/p&gt; &lt;p&gt;クラス名を&lt;span class=&quot;C&quot;&gt;指定&lt;/span&gt;していません&lt;/p&gt; &lt;p&gt;クラス名を指定していません&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;","link":"/2021/03/03/%E3%82%A4%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3CSS%E3%81%A8%E5%86%85%E9%83%A8CSS%E3%81%84%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【Shell】出力をそのままクリップボードにコピーする","text":"出力をクリップボードにコピーする|(パイプ)+pbcopy pbとはpast boardの略 使用例カレンとディレクトリのパスをクリップボードにコピーする1pwd | pbcopy ファイルの内容をクリップボードにコピー1cat ファイル名 | pbcopy 追記2021/3/6zshには、aliasでpbcが設定されているらしく、こっちの方が短くかける 動作的には、aliasなのでpbcopyと同じ1cat ファイル名 | pbc","link":"/2021/03/04/%E3%80%90Shell%E3%80%91%E5%87%BA%E5%8A%9B%E3%82%92%E3%81%9D%E3%81%AE%E3%81%BE%E3%81%BE%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97%E3%83%9C%E3%83%BC%E3%83%89%E3%81%AB%E3%82%B3%E3%83%94%E3%83%BC%E3%81%99%E3%82%8B/"},{"title":"【CSS】positionプロパティについて","text":"postion属性とは 要素の位置を指定するための属性 指定する方法の種類 relative : 相対位置への配置 その要素が本来配置される位置からの相対位置 absolute : 絶対位置への配置 画面上の座標 fixed : 絶対位置への配置 + スクロールされても位置が固定 指定方法 まずは位置の指定方法を記述する1position: relative; どちらの方向にどれだけ動かすかを指定する1top: 200px; まとめると1234.test{ position: relative; top: 200px;} relativeとabsoluteの違いイメージコード12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;position&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .first-section{ background: lightgreen; width: 100px; height: 100px; position:relative; left:200px; top:200px; } .second-section{ background: pink; width: 100px; height: 100px; position:absolute; left:200px; top:200px; } .third-section{ background: red; width: 100px; height: 100px; position:fixed; left:400px; top:400px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;a&lt;/p&gt; &lt;p&gt;a&lt;/p&gt; &lt;p&gt;a&lt;/p&gt; &lt;p&gt;a&lt;/p&gt; &lt;p&gt;a&lt;/p&gt; &lt;div class=&quot;first-section&quot;&gt; &lt;p&gt;1&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;second-section&quot;&gt; &lt;p&gt;2&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;third-section&quot;&gt; &lt;p&gt;3&lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 便利な属性奥行きの指定z-index属性を使って指定する - 大きい値を設定したスタイルを適応した要素が上に描画される 1234567891011.test{ position: relative; top: 200px; z-index: 1;}.test2{ &lt;!--こっちが上に表示させる--&gt; position: relative; top: 200px; z-index: 2;} 透明度の指定 opacity属性を使って0~1までの間で指定する12345.test{ position: relative; top: 200px; opasity: 0.5; &lt;!--透明度を指定--&gt;}","link":"/2021/03/05/%E3%80%90CSS%E3%80%91position%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【CSS】マージン・パディング・ボーダーについて","text":"マージンについて マージンとは日本語で余白 要素の一番外側に位置する領域を意味する background-colorを設定している場合、色の領域は広がらないマージンとマージンは相殺するmargin-bottom:20pxとmargin-top:30pxが上下に並んでいる場合、2つの要素の距離は２つの値を足した50pxにはならず、重なった部分のマージンは重なったままになるので、結果は30pxのマージンが取られた状態になる 記述する値によって設定できるマージンが変わる 1つの値を設定する 上下左右のマージンが同じだけ設定される12&lt;!-- 上下左右全て100px分のマージンが設定される --&gt;margin: 100px; 2つの値を設定する 上下、左右のマージンが別々に設定される12&lt;!-- 上下:100px,左右:50pxのマージンが設定させる --&gt;margin: 100px 50px; 3つの値を設定する 上、左右、下のマージンが別々に設定される12&lt;!-- 上:100px,左右:50px,下200pxのマージンが設定される --&gt;margin: 100px 50px 200px; 個別に値を設定する 上の３つとは少し記述の仕方が変わっる12345&lt;!-- 明示的に設定する --&gt;margin-top: 100px;margin-right: 100px;margin-bottom: 50px;margin-left: 100px; パディングについて マージンの１つ内側の余白を設定する background-colorを設定している場合、色の領域も広がる width属性とpadding-width属性はpaddingのピクセル数に対する値ではなく、画面に対する値を設定している - なので、paddingを広げても文字は広く表示されない 記述する値によって設定できるパディングが変わる 1つの値を設定する 上下左右のパディングが同じだけ設定される12&lt;!-- 上下左右全て100px分のパディングが設定される --&gt;padding: 100px; 2つの値を設定する 上下、左右のパディングが別々に設定される12&lt;!-- 上下:100px,左右:50pxのパディングが設定させる --&gt;padding: 100px 50px; 3つの値を設定する 上、左右、下のパディングが別々に設定される12&lt;!-- 上:100px,左右:50px,下200pxのパディングが設定される --&gt;padding: 100px 50px 200px; 個別に値を設定する 上の３つとは少し記述の仕方が変わっる12345&lt;!-- 明示的に設定する --&gt;padding-top: 100px;padding-right: 100px;padding-bottom: 50px;padding-left: 100px; ボーダーについて マージンとパディングの境界線の設定ができる 記述する値によって設定できるボーダーが変わる 3つの値を設定する 線の太さ、線の色、線の種類を設定する12&lt;!-- 線の太さ:1px,線の色:黒,線の種類:実線--&gt;border: 1px black solid; 各要素を別々にかつ、上下左右を変えて設定できる 設定方法が細かくあるので、参考リンクだけを紹介する w3schools border-style ブラウザのデフォルトのマージンやパディングを無効にする12345&lt;!-- bodyタグに対して設定する --&gt;bodu{ margin: 0; padding: 0;}","link":"/2021/03/06/%E3%80%90CSS%E3%80%91%E3%83%9E%E3%83%BC%E3%82%B8%E3%83%B3%E3%83%BB%E3%83%91%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%83%BB%E3%83%9C%E3%83%BC%E3%83%80%E3%83%BC%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【Git】管理されているファイル情報をみる","text":"リポジトリで「管理されている」ファイルのリストを取得するls-filesコマンドの-cオプションを使用する ls-filesはデフォルトで-cオプションがついている -c, –cached Show cached files in the output (default) 実行結果例123456% git ls-files 1234aaa リポジトリで「管理されていない」ファイルのリストを取得するls-filesコマンドの-oオプションを使用する -o, –others Show other (i.e. untracked) files in the output 実行結果例123% git ls-files -o5bbb","link":"/2021/03/07/%E3%80%90Git%E3%80%91%E7%AE%A1%E7%90%86%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%83%85%E5%A0%B1%E3%82%92%E3%81%BF%E3%82%8B/"},{"title":"【Git】コマンドラインの構文","text":"コマンドラインの構文の概要 git : 必須 [スイッチ] : オプション &lt;コマンド&gt; : オプション &lt;引数&gt;: オプション1git [スイッチ]&lt;コマンド&gt;&lt;引数&gt; ヘルプにも同じような構文の記述がされている12345usage: git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;] [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare] [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;] &lt;command&gt; [&lt;args&gt;] コマンド 説明 参考 –version バージョン確認 –help 概要と最も一般的に使用されるコマンドのリストを出力 -C カレントディレクトリではなくに指定したディレクトリでGit実行する -c = 設定ファイルのに指定した項目の値をで設定した値を上書きする –exec-path[=] Gitのコアファイルのパスを出力する。パスを設定することもできる。 –html-path ドキュメントファイルの補完されているパスを出力する –man-path Gitのmanファイルが格納されているパスを出力する –info-path Gitのドキュメントを文書かしたファイルがあるパスを出力する(私の環境ではパスは表示されたが、パスが存在しなかった) -P | –paginate ページャーに出力をパイプする -p | –no-paginate ページャーに出力をパイプしないようにする –no-replace-objects Gitオブジェクトを置換しない https://git-scm.com/docs/git-replace –bare ベアリポジトリとして扱う https://qiita.com/devzooiiooz/items/56a02342d9d65d79f6c3https://cpplover.blogspot.com/2015/04/git10linus-torvals.html –git-dir= リポジトリへのパスを設定する(環境変数 GIT_DIR を設定するのと同じ) –work-tree= 作業ツリーへのパスを設定する(環境変数 GIT_WORK_TREE や設定変数 core.worktree を設定するのと同じ) –namespace= Gitの名前空間を設定する(環境変数 git_namespace を設定するのと同じ) ダッシュ(-)1個とダッシュ(–)の使い分け 1つ(-) : １文字のスイッチ(省略型) 2つ(–) : 略さずに完全に記述する長いスイッチ","link":"/2021/03/08/%E3%80%90Git%E3%80%91%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%AE%E6%A7%8B%E6%96%87/"},{"title":"【Zsh】Zsh拡張フレームワーク「Prezto」","text":"参考 https://github.com/sorin-ionescu/prezto https://qiita.com/s_of_p/items/33c9b18f0dc47ce29024 https://qiita.com/yasudanaoya/items/8b928cfadbf702108ba3 インストール方法1. Zshを起動する1$ zsh 2. リポジトリをクローンする ${ZDOTDIR:-$HOME}とは？ $ZDOTDIR : .zshrcの保存場所を設定する環境変数 $HOME : ホームディレクトリ :- : 左辺の値が設定されていor空文字列であれば、右辺に設定されてる値が使用される1$ git clone --recursive https://github.com/sorin-ionescu/prezto.git &quot;${ZDOTDIR:-$HOME}/.zprezto&quot; 3. 今まで使っていた設定ファイルを移動させる1$ mkdir zsh_orig &amp;&amp; mv zshmv .zlogin .zlogout .zprofile .zshenv .zshrc zsh_orig 4. 各コンフィグファイルへのシンボリックリンクを作成する1234$ setopt EXTENDED_GLOBfor rcfile in &quot;${ZDOTDIR:-$HOME}&quot;/.zprezto/runcoms/^README.md(.N); do ln -s &quot;$rcfile&quot; &quot;${ZDOTDIR:-$HOME}/.${rcfile:t}&quot;done 5. zshをデフォルトシェルに設定 chsh : ログインシェルを変更する1$ chsh -s /bin/zsh テーマの設定テーマ一覧を見てみる1$ prompt -s テーマを設定する1$ prompt -s テーマ名 Macの場合prompt -sだと、そのセッションではテーマが変更されるが、再起動ログインし直すとデフォルトのテーマになってしまうので、設定~/.zshrcに追記しておく必要がある1234567$ prompt -s powerlineSet and save not yet implemented. Please ensure your ~/.zshrccontains something similar to the following: autoload -Uz promptinit promptinit prompt powerline powerlineを使用する場合、特殊なフォントが必要 以下GitHubのリポジトリをダウンロードhttps://github.com/powerline/fonts 適当なディレクトリに移動後 1git clone https://github.com/powerline/fonts.git install.shを叩く 12$ cd fonts$ ./install.sh 使用しているターミナルでフォントを設定 文字列にPowerlineが入っていれば使えるはず","link":"/2021/03/09/%E3%80%90Zsh%E3%80%91Zsh%E6%8B%A1%E5%BC%B5%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%80%8CPrezto%E3%80%8D/"},{"title":"【Shell】コマンドラインのカーソル移動","text":"矢印キーを使用しないカーソルの移動 □が現在カーソルのある位置 コマンド 動作解説 動作前 動作後 Ctrl + a 行の先頭にカーソルを移動 cd ~/Deskctop□/test/ □cd ~/Deskctop/test/ Ctrl + e 行の末にカーソルを移動 cd ~/Deskctop□/test/ cd ~/Deskctop/test/□ Ctrl + k カーソルの右側を全て消去 cd ~/Deskctop□/test/ cd ~/Deskctop□ Ctrl + h カーソルの左側にある文字を消去 cd ~/Deskctop□/test/ cd ~/Deskcto□/test/ Ctrl + d カーソルの右側にある文字を消去 cd ~/Deskctop□/test/ cd ~/Deskctop□test/ Ctrl + u コマンドラインの文字を全て消去 cd ~/Deskctop□/test/ Ctrl + y Ctrl + kで消去した文字列を貼り付け コマンドの履歴を使用する 矢印キーの上下(↑,↓)で一つ前のコマンド、一つ後のコマンドを呼び出せる。 履歴を見たい場合は、historyコマンドでみることのできる 履歴番号 コマンド1234567$ history 679 ls 680 vim ~/.zshrc 681 source ~/.zshrc 682 ZDOTDIR 683 $ZDOTDIR 684 echo $ZDOTDIR 行番号を指定して実行する !履歴番号 行番号のコマンドがコマンドラインに入力される123$ !679$ ls","link":"/2021/03/10/%E3%80%90Shell%E3%80%91%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%AE%E3%82%AB%E3%83%BC%E3%82%BD%E3%83%AB%E7%A7%BB%E5%8B%95/"},{"title":"【VSCode】開いたテキストが文字化けするときの対処法方","text":"設定の「自動文字コード識別設定」をONにする1. Settings画面を開くCode -&gt; Preferences -&gt; Settingsの順でSettings画面を開く - Cmd + ,(カンマ)でも開ける 2. 自動文字コード識別設定を探す検索欄から、「autoGuessEncoding」を検索 3.「Files:Auto Guess Encoding」にチェックを入れる再度ファイルを開き直せば、文字化けが解消されているはず","link":"/2021/03/10/%E3%80%90VSCode%E3%80%91%E9%96%8B%E3%81%84%E3%81%9F%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%8C%E6%96%87%E5%AD%97%E5%8C%96%E3%81%91%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95%E6%96%B9/"},{"title":"【Ubuntu】キーボードの初期設定","text":"Ubuntu Serverで使用するキーボードレイアウトを日本語配列に変更する sudo dpkg-reconfigure keyboard-configurationを入力 1$ sudo dpkg-reconfigure keyboard-configuration dpkg-reconfigure : 指定したDebianパッケージがdebconfを採用している場合に、パッケージの再設定をすることができるコマンド debconfに対応しているリストはls /var/lib/dpkg/info/*.configでみることができる keyboard-configuration : キーボードのレイアウト設定ファイル ここからは矢印キーとEnterキーで操作する(GUI風になる) Generic 105-key (Intl)PCを選択 Japaneseを選択 Japaneseを選択 /etc/default/keyboardの設定を書き換えている場合表示される キーボードオプションを維持する場合はYesを選択、初期化していい場合はNoを選択 「The default for the keyboard layout」を選択 「No compose key」を選択するとコンソール画面に戻る コンソール画面が表示され必要んな情報を生成してくれるので少し待つ(ネットワークが必要?) 1234567Your console font configuration will be updated the next time your systemboots. If you want to update it now, run 'setupcon' from a virtual console.update-initramfs: deferring update (trigger activated)Processing triggers for initramfs-tools (0.137ubuntu12) ...update-initramfs: Generating /boot/initrd.img-5.8.0-1006-raspi.... 入力待機画面に戻れば成功 「Caps Lock」を「Ctrl」に変更する/etc/default/keyboardのXKBOPTIONSに以下を書き加える デフォルト1XKBOPTIONS=&quot;&quot; 書き換え後1XKBOPTIONS=&quot;ctrl:nocaps&quot;","link":"/2021/03/11/%E3%80%90Ubuntu%E3%80%91%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/"},{"title":"【Git】タグの扱い方","text":"タグはなんのためにあるのかコミットを指定するためにSHA 1IDを使用するが、毎回選択するのは面倒くさいし間違える可能性があるので、よく使う可能性のあるコミットに命名することで、いちいちSHA 1IDを指定しなくてよくできる コミットにタグを追加するタグをつける1git tag タグ名 タグをつけたいSHA1 タグをつけるときは、-mスイッチを使用すればメッセージをつけることもできる1git tag タグ名 -m &quot;コメント&quot; タグをつけたいSHA1 タグを消去する1git tag -d タグ名 これが表示されれば成功 1Deleted tag 'タグ名' (was SHA1) タグの一覧を表示する1git tag","link":"/2021/03/13/%E3%80%90Git%E3%80%91%E3%82%BF%E3%82%B0%E3%81%AE%E6%89%B1%E3%81%84%E6%96%B9/"},{"title":"【Kotlin】View内のコンポーネントの取得方法","text":"Javaっぽく取得するデータバインディングというらしい？ 1234567override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) // コンポーネントに設定したID(textView)からTextViewを取得する val textView = findViewById(R.id.textView) as TextView} Kotlinっぽく取得する（Kotlin Android Extensions使用）Kotlin Android ExtensionsKotlinが公式で提供している、Androidアプリ開発をサポートしてくれる拡張機能https://archive-blog.yagi2.dev/2017/10/18/good-bye-findviewbyid.html 1234567891011// Inportする必要がある// &lt;layout&gt;には取得したいLayoutXMLの名前を指定import kotlinx.android.synthetic.main.&lt;layout&gt;.*override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) // 後はViewないで指定した、コンポーネントのIDから呼び出せる textView.text = &quot;テストだよ&quot;}","link":"/2021/03/12/%E3%80%90Kotlin%E3%80%91View%E5%86%85%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E5%8F%96%E5%BE%97%E6%96%B9%E6%B3%95/"},{"title":"【XCode】TableViewのCellをカスタマイズする","text":"環境 MacBook Air M1 OS : 11.2(20D64) XCode : 12.4 Swift : 5.3.2 参考 https://rara-world.com/ios-swift-tableview-custom-cell/ 1. 新規ファイル追加でCocoa Touch Classを選択 2. 作成時の設定 Class : 好きな名前(今回はCustomTableViewCell) Subclass of : UITableViewCell Also create XIB file : ON Language : Swift ２つの新規ファイルが生成されればOK 3. CustomTableViewCell.xibを編集Cellにラベルを追加 Rostoration IDの設定任意の文字列でいい(セル生成時に使用する) 4. CustomTableViewCell.swiftでラベルの参照を設定 5. Main.storyboardを編集Table Viewを追加 6. ViewController.swiftを編集Main.storyboardで指定した、Table Viewの参照を設定 参照時の変数名を今回はTableViewとする viewDidLoad()に追記 UITableViewに対して、delegateと使用するCellの情報を設定 TableView.register : 使用するカスタムセルの情報を登録 nibName = 作ったCellのクラス名 forCellReuseIdentifier = xibで指定したidentifier名 TableView.delegate : TableView.dataSorce : 12345678910override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. // ここから TableView.register(UINib(nibName: &quot;CustomTableViewCell&quot;, bundle: nil), forCellReuseIdentifier: &quot;CustomCell&quot;) TableView.delegate = self TableView.dataSource = self // ここまで } UITableViewDelegate,UITableViewDataSourceを継承 どちらのメソッドも、optionalなので、最低限のメソッドの定義をすれば、他のメソッドは定義しなくてもいい UITableViewDelegate : TableView内のデータが選択や生成、編集されたときに呼び出されるメソッドが定義されたプロトコル群 UITableViewDataSource : テーブルに表示させたいデータを設定するためのプロトコル群 123class ViewController: UIViewController,UITableViewDelegate,UITableViewDataSource { ...} 継承すると、エラーが出るはずなので、Fixをクリックしてメソッドを2つ自動生成してもらうと、以下のようなメソッドが自動生成されるはず 1234567891011// UITableViewDelegateの継承によって生成された// TableViewに生成するセル数を設定する(Int型を返す)func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { Code}// UITableViewDataSourceの継承によって生成された// TableViewに表示するセルのデータを設定する(UITableViewCellを返す)func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { Code} 今回は、生成するセルを10個、表示するデータを各セルを上から数えたときの番号にする 1234567891011func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return 10}func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCell(withIdentifier: &quot;CustomCell&quot;,for: indexPath) as! CustomTableViewCell cell.Label.text = String(indexPath.row) return cell} 実行した結果 ViewController.swiftの完成形123456789101112131415161718192021222324252627282930import UIKitclass ViewController: UIViewController,UITableViewDelegate,UITableViewDataSource { @IBOutlet weak var TableView: UITableView! func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return 10 } func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCell(withIdentifier: &quot;CustomCell&quot;,for: indexPath) as! CustomTableViewCell cell.Label.text = String(1) return cell } override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. TableView.register(UINib(nibName: &quot;CustomTableViewCell&quot;, bundle: nil), forCellReuseIdentifier: &quot;CustomCell&quot;) TableView.delegate = self TableView.dataSource = self }}","link":"/2021/03/14/%E3%80%90XCode%E3%80%91TableView%E3%81%AECell%E3%82%92%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%81%99%E3%82%8B/"},{"title":"【Winodws】コンソールのスクリーンバッファを複数枚作る","text":"スクリーンバッファとは? 実際の文字が書き込まれるバッファのことで、実際にコンソールに描画されるのはこのスクリーンバッファの内容 コンソールが作成された時点で既定で1つ作成されている(描画されから当たり前) 独自のスクリーンバッファを作成して出力を行うことも可能 CreateConsoleScreenBuffer1234567HANDLE WINAPI CreateConsoleScreenBuffer( DWORD dwDesiredAccess, DWORD dwShareMode, const SECURITY_ATTRIBUTES *lpSecurityAttributes, DWORD dwFlags, LPVOID lpScreenBufferData); 引数型 解説 例 dwDesiredAccess スクリーンバッファへのアクセス権を指定 GENERIC_READ | GENERIC_WRITE dwShareMode スクリーンバッファを共有するための定数を指定(共有しない場合は0) 0 *lpSecurityAttributes SECURITY_ATTRIBUTES構造体のアドレスを指定するが普通はNULLを指定 NULL dwFlags CONSOLE_TEXTMODE_BUFFERを指定 CONSOLE_TEXTMODE_BUFFER lpScreenBufferData NULLを指定 NULL 戻り値 戻り値のスクリーンバッファハンドルはCloseHandleで閉じる SetConsoleActiveScreenBuffer スクリーンバッファをアクティブにしてコンソールに描画 123BOOL WINAPI SetConsoleActiveScreenBuffer( HANDLE hConsoleOutput); 引数型 解説 例 hConsoleOutput スクリーンバッファのハンドル(CreateConsoleScreenBufferの戻り値)を指定","link":"/2021/03/17/%E3%80%90Winodws%E3%80%91%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E3%82%92%E8%A4%87%E6%95%B0%E6%9E%9A%E4%BD%9C%E3%82%8B/"},{"title":"【Android Studio】Materila Designを使用して見た目をリッチにする","text":"参考資料 参考ドキュメントhttps://material.io/designhttps://github.com/material-components/material-components-android スタートガイドhttps://github.com/material-components/material-components-android/blob/master/docs/getting-started.md 手順 build.gradle(Project:プロジェクト名)にgoogle()が含まれているかチェック 12345allprojects { repositories { google() &lt;- これが記述してあればOK }} build.gradle(Module:app)にライブラリを記述 &lt;version&gt;の部分は以下のURLを参考にする - [https://mvnrepository.com/artifact/com.google.android.material/material](https://mvnrepository.com/artifact/com.google.android.material/material) 12345dependencies { ... implementation 'com.google.android.material:material:&lt;version&gt;' ...} 一度ビルドする styles.xmlを書き換えてみる 生成したての状態 12345678910&lt;resources&gt; &lt;!-- Base application theme. --&gt; &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt; &lt;!-- Customize your theme here. --&gt; &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt; &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt; &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt; &lt;/style&gt;&lt;/resources&gt; これの&lt;style&gt;ブロックのparentパラメーターを書き換えることで、テーマを変更できる 1&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.MaterialComponents.DayNight.NoActionBar&quot;&gt; このテーマを書き換えることで、&lt;Button&gt; と &lt;AutoCompleteTextView&gt;の XML コンポーネントをそれぞれ &lt;MaterialButton&gt; と &lt;MaterialAutoCompleteTextView&gt; に置き換えます。 他のコンポーネントのテーマを変えるには、XMLに直接記述する必要がある","link":"/2021/03/16/%E3%80%90Android-Studio%E3%80%91Materila-Design%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E8%A6%8B%E3%81%9F%E7%9B%AE%E3%82%92%E3%83%AA%E3%83%83%E3%83%81%E3%81%AB%E3%81%99%E3%82%8B/"},{"title":"【Android Studio】build.Gradleが２つあるのはなぜなのか","text":"AndroidStudioでプロジェクトを生成すると、「build.Gradle」というファイルが2つ生成される ルート直下の「build.gradle」(Project:プロジェクト名)このファイルは、すべてのサブプロジェクトとモジュールに共通する設定項目を追加することができる最上位のビルドファイル 【例】 : サブプロジェクトにインストールしたいライブラリが含まれているリポジトリ appファイル直下の「build.gradle」(Module : app)サブプロジェクトごとに必要な依存関係やビルド設定を記述する 【例】 : 使用したいライブラリのURI","link":"/2021/03/15/%E3%80%90Android-Studio%E3%80%91build-Gradle%E3%81%8C%EF%BC%92%E3%81%A4%E3%81%82%E3%82%8B%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%9C%E3%81%AA%E3%81%AE%E3%81%8B/"},{"title":"【Git】git logの色々な表示のさせ方","text":"目次 はじめに この記事で紹介するスイッチ 普通に「git log」 表示される内容 短く表示させる「git log –oneline」 表示される内容 変更されたファイルを表示する「git log –stat」 表示される内容 短く表示させつつ、変更されたファイルを表示する「git log –oneline –stat」 表示される内容 視覚的にわかりやすく表示する「git log –graph」 表示される内容 短く視覚的に表示する「git log –oneline –graph」 表示される内容 すべてのブランチを見る「git log –all」 表示される内容 短く視覚的に表示する「git log –oneline –all」 表示される内容 はじめにここで紹介しているスイッチ(–から始まる文節)はすべて組み合わせて使用する事ができるので、適時用途にあった表示のさせ方で組み合わせるといいと思います。 この記事で紹介するスイッチ --oneline : 短く表示する --stat : 変更のあったファイル名と、ファイル数を表示する --graph : 視覚的に表示する --all : すべてのブランチを表示する 普通に「git log」表示される内容 SHA1 ブランチのHEADの場合、ブランチの情報 コミットしたユーザー名``メールアドレス コミットした日付 コミットメッセージ全文 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566$ git log commit c7cfec983e47d507b89726b1fcb8550ea71eee95 (HEAD -&gt; master, beginning/master, beginning/HEAD)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 23:20:18 2021 +0900 A small update to readme.commit 895ded5c28bfa9848f647eff1339dcc763f910d1Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 20:20:18 2021 +0900 Adding printf. This is to make the output a little more human readable. printf is part of BASH, and it works just like C's printf() function.commit 5ab2e41e28507359a1774e39be287406707d3ec8Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 09:20:18 2021 +0900 Adding two numbers.commit 004e3a3d1f942361d81ec6599e6bff0f6c0d7be9 (beginning/another_fix_branch)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 08:20:18 2021 +0900 Renaming c and d.commit fd3bb1d565b69ca19832f8892030a40d6961076cAuthor: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 07:20:18 2021 +0900 Removed a and b.commit 6e0d6f43f601fac104439dd778160aeef0ab9910Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Thu Mar 11 09:20:18 2021 +0900 Adding readme.txtcommit a343843ff5496451e855e4064a4c138cc7b3105e (tag: four_files_galore)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Tue Mar 9 09:20:18 2021 +0900 Adding four empty files.commit 834601bc8cfa381dbb3ffc4a30245646194b297bAuthor: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Tue Mar 9 08:20:18 2021 +0900 Adding b variable.commit 68d38c6348b0cf53655e01ef9c8238457b709c71Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Tue Mar 9 07:20:18 2021 +0900 This is the second commit.commit d314c772bb58ed3d959bf658265986b7c50bcd61Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Tue Mar 9 05:20:18 2021 +0900 This is the first commit. 短く表示させる「git log –oneline」表示される内容 ７桁に短縮されたSHA1 ブランチのHEADの場合、ブランチの情報 コミットコメント(１行目のみ) 123456789101112$ git log --onelinec7cfec9 (HEAD -&gt; master, beginning/master, beginning/HEAD) A small update to readme.895ded5 Adding printf.5ab2e41 Adding two numbers.004e3a3 (beginning/another_fix_branch) Renaming c and d.fd3bb1d Removed a and b.6e0d6f4 Adding readme.txta343843 (tag: four_files_galore) Adding four empty files.834601b Adding b variable.68d38c6 This is the second commit.d314c77 This is the first commit. 変更されたファイルを表示する「git log –stat」表示される内容 git logを使用したときに表示される情報 変更されたファイル名とカウント 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273$ git log --statcommit c7cfec983e47d507b89726b1fcb8550ea71eee95 (HEAD -&gt; master, beginning/master, beginning/HEAD)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 23:20:18 2021 +0900 A small update to readme. readme.txt | 1 + 1 file changed, 1 insertion(+)commit 895ded5c28bfa9848f647eff1339dcc763f910d1Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 20:20:18 2021 +0900 Adding printf. This is to make the output a little more human readable. printf is part of BASH, and it works just like C's printf() function. math.sh | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)commit 5ab2e41e28507359a1774e39be287406707d3ec8Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 09:20:18 2021 +0900 Adding two numbers. math.sh | 4 +++- 1 file changed, 3 insertions(+), 1 deletion(-)commit 004e3a3d1f942361d81ec6599e6bff0f6c0d7be9 (beginning/another_fix_branch)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 08:20:18 2021 +0900 Renaming c and d. c =&gt; another_rename | 0 d =&gt; renamed_file | 0 2 files changed, 0 insertions(+), 0 deletions(-)commit fd3bb1d565b69ca19832f8892030a40d6961076cAuthor: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 07:20:18 2021 +0900 Removed a and b. a | 0 b | 0 2 files changed, 0 insertions(+), 0 deletions(-)commit 6e0d6f43f601fac104439dd778160aeef0ab9910Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Thu Mar 11 09:20:18 2021 +0900 Adding readme.txt readme.txt | 1 + 1 file changed, 1 insertion(+)commit a343843ff5496451e855e4064a4c138cc7b3105e (tag: four_files_galore)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Tue Mar 9 09:20:18 2021 +0900 Adding four empty files. a | 0 b | 0... 短く表示させつつ、変更されたファイルを表示する「git log –oneline –stat」表示される内容 git log --onelineを使用したときに表示される情報 変更されたファイル名とカウント 12345678910111213141516171819202122232425262728293031323334353637$ git log --oneline --statc7cfec9 (HEAD -&gt; master, beginning/master, beginning/HEAD) A small update to readme. readme.txt | 1 + 1 file changed, 1 insertion(+)895ded5 Adding printf. math.sh | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)5ab2e41 Adding two numbers. math.sh | 4 +++- 1 file changed, 3 insertions(+), 1 deletion(-)004e3a3 (beginning/another_fix_branch) Renaming c and d. c =&gt; another_rename | 0 d =&gt; renamed_file | 0 2 files changed, 0 insertions(+), 0 deletions(-)fd3bb1d Removed a and b. a | 0 b | 0 2 files changed, 0 insertions(+), 0 deletions(-)6e0d6f4 Adding readme.txt readme.txt | 1 + 1 file changed, 1 insertion(+)a343843 (tag: four_files_galore) Adding four empty files. a | 0 b | 0 c | 0 d | 0 4 files changed, 0 insertions(+), 0 deletions(-)834601b Adding b variable. math.sh | 1 + 1 file changed, 1 insertion(+)68d38c6 This is the second commit. math.sh | 1 + 1 file changed, 1 insertion(+)d314c77 This is the first commit. math.sh | 1 + 1 file changed, 1 insertion(+) 視覚的にわかりやすく表示する「git log –graph」表示される内容 git logを使用したときに表示される情報 コミットやブランチの流れをASCII文字で表現する 12345678910111213141516171819202122232425262728293031323334353637383940414243$ git log --graph* commit c7cfec983e47d507b89726b1fcb8550ea71eee95 (HEAD -&gt; master, beginning/master, beginning/HEAD)| Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;| Date: Fri Mar 12 23:20:18 2021 +0900|| A small update to readme.|* commit 895ded5c28bfa9848f647eff1339dcc763f910d1| Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;| Date: Fri Mar 12 20:20:18 2021 +0900|| Adding printf.|| This is to make the output a little more human readable.|| printf is part of BASH, and it works just like C's printf()| function.|* commit 5ab2e41e28507359a1774e39be287406707d3ec8| Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;| Date: Fri Mar 12 09:20:18 2021 +0900|| Adding two numbers.|* commit 004e3a3d1f942361d81ec6599e6bff0f6c0d7be9 (beginning/another_fix_branch)| Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;| Date: Fri Mar 12 08:20:18 2021 +0900|| Renaming c and d.|* commit fd3bb1d565b69ca19832f8892030a40d6961076c| Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;| Date: Fri Mar 12 07:20:18 2021 +0900|| Removed a and b.|* commit 6e0d6f43f601fac104439dd778160aeef0ab9910| Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;| Date: Thu Mar 11 09:20:18 2021 +0900|| Adding readme.txt|... 短く視覚的に表示する「git log –oneline –graph」表示される内容 git log --onelineを使用したときに表示される情報 コミットやブランチの流れをASCII文字で表現する 123456789101112$ git log --oneline --graph* c7cfec9 (HEAD -&gt; master, beginning/master, beginning/HEAD) A small update to readme.* 895ded5 Adding printf.* 5ab2e41 Adding two numbers.* 004e3a3 (beginning/another_fix_branch) Renaming c and d.* fd3bb1d Removed a and b.* 6e0d6f4 Adding readme.txt* a343843 (tag: four_files_galore) Adding four empty files.* 834601b Adding b variable.* 68d38c6 This is the second commit.* d314c77 This is the first commit. すべてのブランチを見る「git log –all」表示される内容 git logを使用したときに表示される情報 カレントブランチ以外のブランチのlogを一緒に表示する 12345678910111213141516171819202122232425262728293031323334353637383940414243$ git log --oneline --graphcommit c7cfec983e47d507b89726b1fcb8550ea71eee95 (HEAD -&gt; master, beginning/master, beginning/HEAD)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 23:20:18 2021 +0900 A small update to readme.commit 91d6184f4c6da852bbcddf9d3c4155983a416d35 (beginning/new_feature)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 22:20:18 2021 +0900 Starting a second new filecommit af9aa8ef34be4a5f1c36eb06a560638cc730c814Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 21:20:18 2021 +0900 Adding a new file to a new branchcommit 895ded5c28bfa9848f647eff1339dcc763f910d1Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 20:20:18 2021 +0900 Adding printf. This is to make the output a little more human readable. printf is part of BASH, and it works just like C's printf() function.commit 5ab2e41e28507359a1774e39be287406707d3ec8Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 09:20:18 2021 +0900 Adding two numbers.commit 004e3a3d1f942361d81ec6599e6bff0f6c0d7be9 (beginning/another_fix_branch)Author: Daiki-Iijima &lt;daiki.applecreate@gmail.com&gt;Date: Fri Mar 12 08:20:18 2021 +0900 Renaming c and d.... 短く視覚的に表示する「git log –oneline –all」表示される内容 git log --onelineを使用したときに表示される情報 カレントブランチ以外のブランチのlogを一緒に表示する 1234567891011121314$ git log --oneline --allc7cfec9 (HEAD -&gt; master, beginning/master, beginning/HEAD) A small update to readme.91d6184 (beginning/new_feature) Starting a second new fileaf9aa8e Adding a new file to a new branch895ded5 Adding printf.5ab2e41 Adding two numbers.004e3a3 (beginning/another_fix_branch) Renaming c and d.fd3bb1d Removed a and b.6e0d6f4 Adding readme.txta343843 (tag: four_files_galore) Adding four empty files.834601b Adding b variable.68d38c6 This is the second commit.d314c77 This is the first commit.","link":"/2021/03/26/%E3%80%90Git%E3%80%91git-log%E3%81%AE%E8%89%B2%E3%80%85%E3%81%AA%E8%A1%A8%E7%A4%BA%E3%81%AE%E3%81%95%E3%81%9B%E6%96%B9/"},{"title":"【Git】ベアリポジトリとはなにか","text":"目次 ベアリポジトリとは ベア(bare)とは つまり 作成時の注意点 ベアリポジトリとはベア(bare)とは露出した、本来あるべき物が無いという意味がある。 つまりこれをGitのシステムとして解釈すると、「本来あるべき物が無い」＝「ワーキングディレクトリがない」という意味になる。更新履歴のみを持っているリポジトリということになる リモートサーバー上に「ベアリポジトリ」を作成して、ローカルで編集したリポジトリを管理するために使う(GitHubと同じ動作をする) 作成時の注意点 ベアリポジトリを作る場合のファイル名は末尾に.gitをつける必要がある","link":"/2021/03/18/%E3%80%90Git%E3%80%91%E3%83%99%E3%82%A2%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%A8%E3%81%AF%E3%81%AA%E3%81%AB%E3%81%8B/"},{"title":"【Git】「waring&#x2F; LF will be replaced by CRLF in XXX」が出た時の対処法","text":"目次 この警告はなにか LF改行コードとCRLF改行コードとはなにか 解決策 参考 この警告はなにか GitがLF改行コードをCRLF改行コードに自動変換したことによる警告 WindowsでGitを使用している場合、git addしたときに表示されることがある LF改行コードとCRLF改行コードとはなにか LF改行コード LF = Line Feed(改行) カーソルを新しい行に移動させる Unix,Linux,macOS(9以降)などのOSで使用される改行コード CRLF改行コード CRLF = CR + LF カーソルを左端の位置に戻し、新しい行に移動すること WindowsOSで使用されている改行コード CR改行コード CR = Carriage Return(復帰) カーソルを左側に戻す macOS(9以前)で使用されている改行コード 解決策windows と widnowsのやり取りしかしない場合は、以下のコードでwaringを出さないような設定にできるが、CRLF改行コードを使っていないOSとのやり取りがある場合、行末で問題が発生する可能性を検知できなくなる gitのconfigの改行コード自動変換プロパティをオフにする 1git config --global core.autoCRLF false 参考 LFをCRLFに置き換えてもいいのか 改行コードについて LF will be reqlacedについて","link":"/2021/03/19/%E3%80%90Git%E3%80%91%E3%80%8Cwaring-LF-will-be-replaced-by-CRLF-in-XXX%E3%80%8D%E3%81%8C%E5%87%BA%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/"},{"title":"【Shell】コマンドラインから中身のあるファイルを作成する","text":"目次 中身のないファイルの作り方 中身に文字列を挿入してファイルを作る作り方 すでにあるファイルの末尾に文字列を追加する 中身のないファイルの作り方 touch ファイル名を使用して中身がからのファイルを作成できる 1$ touch testfile 中身に文字列を挿入してファイルを作る作り方 echo &quot;挿入したい文字列&quot; &gt; ファイル名を使用して中身に文字列を挿入しつつファイルを作成する 1234$ echo &quot;この文字列が入っていればOK&quot; &gt; testfile$ cat testfileこの文字列が入っていればOK すでにあるファイルの末尾に文字列を追加する echo &quot;挿入したい文字列&quot; &gt;&gt; ファイル名を使用してすでにあるファイルの末尾に1行追加する 12345678$ cat testfile この文字列が入っていればOK$ echo &quot;追加文字列&quot; &gt;&gt; testfile$ cat testfileこの文字列が入っていればOK追加文字列","link":"/2021/03/20/%E3%80%90Shell%E3%80%91%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%8B%E3%82%89%E4%B8%AD%E8%BA%AB%E3%81%AE%E3%81%82%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/"},{"title":"【Git】HEAD^を指定したときに「no matches found&#x2F; HEAD^」が出る時の対処法","text":"目次 原因 setopt extended_globとはなにか 解決策 エスケープシーケンスを使用する 原因zshの設定が問題らしく、設定ファイル(.zshrc)にsetopt extended_globを記述している場合に起こる。 setopt extended_globとはなにか除外パターン、大文字小文字同一視などの、拡張表記が可能になる。詳しくは以下リンク先のサイトがわかりやすかった。 https://gihyo.jp/dev/serial/01/zsh-book/0004 解決策エスケープシーケンスを使用する1git checkout HEAD\\^","link":"/2021/03/21/%E3%80%90Git%E3%80%91HEAD-%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E3%80%8Cno-matches-found-HEAD-%E3%80%8D%E3%81%8C%E5%87%BA%E3%82%8B%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/"},{"title":"【Git】add(staging)の必要性について","text":"目次 何も意識せずに、Gitを使っているとすごい面倒くさい「git add」 なぜ、git addはなぜ必要なのか Gitの思想 バージョン管理の容易さ 何も意識せずに、Gitを使っているとすごい面倒くさい「git add」Gitはバージョン管理ができるツールとして知っているが、初めてGitをプロジェクトに導入したとき、ただのちょっと機能が付属されたファイル共有ツールに成り下がってしまうケースがあったので、Gitの使う上で一番何故あるのか理解しづらい、git addの重要性について再度考え直すために、色々調べてまとめてみました。 なぜ、git addはなぜ必要なのかGitの思想 更新したファイルすべてをgit addして、それをcommit時のコメントで、細かく何を変更したかを書いていましたが、それは本来のgitの思想と乖離しています。 バージョン管理の容易さ Gitはバージョン管理ツールなので、バージョンの変更を簡単にできます。しかし、変更をまとめてコミットしてしまうと、コミットを探して変更した箇所を更に探す必要が出てきてしまうので、せっかくのバージョン管理の恩恵が薄くなってしまいます。 前述の理由から、git add はファイル変更点を１変更１コミットにできるように、複数変更点があった場合の変更点の一時待機場所として、１つの変更だけをキャッシュするための場所として使用するためにあります。","link":"/2021/03/22/%E3%80%90Git%E3%80%91add-staging-%E3%81%AE%E5%BF%85%E8%A6%81%E6%80%A7%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【Git】git-flowとGitHub-flowの違いについて","text":"目次 git-flow 最初はからのコミットか始める すべての機能の開発はdevelopブランチからの分岐によって開始する developブランチがリリースできる段階のクオリティになったらreleaseブランチにマージする リリース後の後始末 リリース後に見つかったバグの修正はmasterブランチから分岐する git-flow masterとdevelopブランチは消去されることがない masterブランチに含まれるのは、製品としてリリースしたコード developブランチに含まれるのは、今後リリースされる予定のコード 開発途中ではあるが、単体の機能としてある程度完成されていたり、製品として組み込む予定ので完成している機能が組み込まれたブランチ 最初はからのコミットか始める --allow-emptyスイッチを使用して、ファイルの無いコミットをする。 git-flowのmasterとdevelopブランチの始点になるコミットになる すべての機能の開発はdevelopブランチからの分岐によって開始する 新機能開発時は新しいブランチをdevelopから分岐させて作成する コードの組み込み準備が完了したら、develpにマージする マージ時はfast-forward mergeを行わないように--no-ffスイッチをつける developへのマージ後は使用していた新機能開発ブランチを消去する developブランチがリリースできる段階のクオリティになったらreleaseブランチにマージする developブランチで単体テストや簡易的な結合テストが完了したら、developブランチをreleaseブランチを作成してそこにマージする releaseブランチでは、最終テストやその他のバグの修正でコミットを追加することができる 本格的なテストのバグ修正はreleaseブランチで行うことになる すべてのコードの修正が終わり次第、masterにマージする masterブランチで表示されるコミットは、リリースしたコードのみ(修正コミットは入っていない) マージ時はfast-forward mergeを行わないように--no-ffスイッチをつける masterブランチのリリースコミットにはタグをつけることが規約で決まっている リリース後の後始末 releaseブランチには、修正コミットが入っている可能性があるので、developブランチへのコミットをdevelopブランチへマージする マージ時はfast-forward mergeを行わないように--no-ffスイッチをつける masterブランチ,developブランチにマージが完了した、releaseブランチは消去する リリース後に見つかったバグの修正はmasterブランチから分岐する リリースしたコードを修正したい場合、masterブランチのリリースコミットから分岐したブランチを作成する この時のブランチの名前はhotfix-xxxにするという規約がある 修正後は、masterブランチ,developブランチにマージを行い、hotfix-xxxブランチは消去する","link":"/2021/03/23/%E3%80%90Git%E3%80%91git-flow%E3%81%A8GitHub-flow%E3%81%AE%E9%81%95%E3%81%84%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【Mac】ツールのバージョンのチェック方法","text":"目次 Swiftバージョン確認 OSバージョン確認 XCodeバージョン確認 色々バージョン確認 Swiftバージョン確認 swift -version 1234$ swift -versionApple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)Target: x86_64-apple-darwin20.3.0 OSバージョン確認 sw_vers 12345$ sw_versProductName: macOSProductVersion: 11.2BuildVersion: 20D64 XCodeバージョン確認 xcodebuild -version 1234$ xcodebuild -versionXcode 12.4Build version 12D4e 色々バージョン確認 system_profiler &gt; ファイル名.txt かなり待つ必要がある 1$ system_profiler &gt; ver.txt","link":"/2021/03/25/%E3%80%90Mac%E3%80%91%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E6%96%B9%E6%B3%95/"},{"title":"【Git】gitが認識しているファイルを自動でステージングしながらコミットする","text":"目次 git commit 時に-aスイッチを使う git commit 時に-aスイッチを使うgit addをするのが面倒くさいときは、commitと同時にステージンをするためのコマンドが用意されている - -aスイッチで、自動ステージングされるのは、すでにGitが認識している(新規追加ではない)ファイルのみを自動でステージングする 1$ git commit -a -m &quot;自動ステージングコミット&quot;","link":"/2021/03/24/%E3%80%90Git%E3%80%91git%E3%81%8C%E8%AA%8D%E8%AD%98%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E8%87%AA%E5%8B%95%E3%81%A7%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0%E3%81%97%E3%81%AA%E3%81%8C%E3%82%89%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%99%E3%82%8B/"},{"title":"【Unity】URPを導入する","text":"目次 導入方法 1. プロジェクト作成時に選択する 注意 手順 2. 既存のプロジェクトに追加する 1. Package Managerを開く 2. RPを選択してInstall 設定方法 1. Pipeline Assetを作成する 2. セットする ピンクマテリアルになるときの対処法 手順 導入方法1. プロジェクト作成時に選択する注意Unity2019.3以上のバージョンから使用できます。正確には、2019.2以前にはLightweight Render Pipeline(LWRP)というものが名称が違うだけで存在はしています。細かい仕様が違う可能性があるので、本記事は、Unity2019.3以上の環境のプロジェクト向けになります。 手順新規プロジェクト作成時にUniversal Render Piplineを選択する 2. 既存のプロジェクトに追加する1. Package Managerを開くWidnow → Package Managerを選択 2. RPを選択してInstall表示されるパッケージの設定をUnity Registryに変更しておく 検索窓にRPと入力してUniversal RPを検索する Universal RPを選択後、Installをクリックで導入完了 設定方法1. Pipeline Assetを作成するCreate → Rendering → Universal Render Pipeline → Pipline Asset(Forward Rendeer)の順で選択して、作成 2. セットするEdit → Project Settings…で、Project Setting Windowを開く 先ほど作成したPipeline AssetをGraphics内のScriptable Render Pipeline Settingsにセットする ピンクマテリアルになるときの対処法既存のプロジェクトに、URPを導入すると、モデルがピンク色になるときがあります。 これは、新しく導入したレンダリングシステムに既存のレンダリングシステム向けに作ったマテリアルが対応できていないことが原因で起こります。 解決するには、URP用のマテリアルに変換してあげる必要があります。 手順Edit → Render Pipeline → Universal Render Pipeline → Upgrade Project Materials to UniversalRP Materials の順で選択してあげれば、自動で変換をしてくれます。","link":"/2021/03/27/%E3%80%90Unity%E3%80%91URP%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B/"},{"title":"【Unity】ディレクティブを使用しているときに発生するwarning対策","text":"目次 ディレクティブとはなにか 参考リンク なぜwarningが発生するのか 例 対策方法 1. エディタ用のダミー処理を作る 2. 1つのスクリプト内だけ特定のwarningを発生させない 3. プロジェクト全体に対して発生させたくないwarningを指定する .rspとは 設定手順 設定例 ディレクティブとはなにかUnityはプラットフォーム依存コンパイルという機能を持っています。これは、Unityで作成したゲームやアプリを複数のプラットフォームで動かしたい場合に、各プラットフォームに依存したコード(ファイルの保存領域、Bluetoothの使用)を１つのスクリプト内で書けるようにする仕組みです。 参考リンクUnityドキュメント なぜwarningが発生するのか原因はプラットフォームに依存(ディレクティブ指定)しているコードは、Unity Editor上のコンパイルでは無視されることにあります。 無視されるということは、宣言した変数をEditor上で実行するときは使用していないと見られるケースが発生します。 例この例では、スマホ用OS向けにビルドすることを考えてディレクティブを設定しています。記述上はNumberを使用してしますが、UnityEditorから見ると、Numberは使用されていない変数になります。 1234567891011121314151617// この変数はUityEditor上では使用していないことになるのでwaringが発生するint Number = 9; private void test(){ // ここはAndroid用にビルドしたときに初めて有効になる#if UNITY_ANDROID Number = 100;#endif // ここはiOS用にビルドしたときに初めて有効になる#if UNITY_iOS Number = 300;#endif...} 対策方法1. エディタ用のダミー処理を作る上の例はEditor用の処理が書いてありませんでした。何かしらのダミー処理で変数を使うようにすればwarningの発生を抑える事ができます。それと同時にテストを書くときのことを考えても、内部処理はダミーでも実装しておいたほうがいいかと思います。 1234567891011121314151617181920212223// ダミー処理で使っているのwarningは発生しないint Number = 9; private void test(){ // ここはAndroid用にビルドしたときに初めて有効になる#if UNITY_ANDROID Number = 100;#endif // ここはiOS用にビルドしたときに初めて有効になる#if UNITY_iOS Number = 300;#endif // Unity Editor用のダミー処理#if UNITY_EDITOR Number = 0;#endif...} 2. 1つのスクリプト内だけ特定のwarningを発生させないプリプロセス命令をファイルの先頭に書くことによってコンパイル時の処理を指定する方法です。 以下のようなwarning表示が表示された場合、これを解決するにはCS0149というwarningを発生させないプリプロセス命令が必要になります。 1test.cs(59,48): warning CS0149: xxxx CS0149のwarningを発生させないようにするための記述は以下のようになります。 1#pragma warning disable 0149 3. プロジェクト全体に対して発生させたくないwarningを指定するこの方法を取ると、指定したすべての条件に一致するものが表示されなくなってしまうので、設定する場合は慎重に行ってください。 .rspとはMSBuild.exeのコマンドラインスイッチを含むテキストファイル。詳しくは以下リンクを参照。 MSBuild応答ファイル 設定手順 Assetsフォルダ下にcsc.rspというファイルを作成してください。(Assets/csc.rsp) UnityEditorでファイルを作成すると見た目上は、csc.rspに見えますが、拡張子がcsになってしまうので、エクスプローラーから作成する csc.rsp内に-nowarn:xxxxと記述する xxxの部分は`warning時に表示される数字の部分です。 複数指定したい場合は、記述した部分の下に追記してく 設定例1234// warning CS0149: xxxxの場合-nowarn:0149// warning CS0031: yyyyの場合-nowarn:0031","link":"/2021/03/28/%E3%80%90Unity%E3%80%91%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AB%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8Bwarning%E5%AF%BE%E7%AD%96/"},{"title":"【Unity】2018.4以前バージョンから、2019.xへの更新時に「NetworkBehaviour is not found」が出た時の対処法","text":"目次 原因 手順 1. PackageManagerを開く 2. Unity Registryを選択してから、「Multiplayer HLAPI」「XR Legacy InputHelpers」をインストール 原因2019.1から非推奨になったことが原因で、デフォルトでUnity内のライブラリには存在しなくなってしまいました。 非推奨なので、別の手段でネットワーク機能を実装したほうがいいのですが、とりあえず今はUNetを使いたいという方向けの対処法になります。 Evolving multiplayer games beyound UNet 手順1. PackageManagerを開くWindow -&gt; Package Manager 2. Unity Registryを選択してから、「Multiplayer HLAPI」「XR Legacy InputHelpers」をインストールウィンドウ左上のプルダウンをUnity Registryに設定 検索窓から、「Multiplayer HLAPI」「XR Legacy InputHelpers」を検索してインストールする","link":"/2021/03/29/%E3%80%90Unity%E3%80%912018-4%E4%BB%A5%E5%89%8D%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%8B%E3%82%89%E3%80%812019-x%E3%81%B8%E3%81%AE%E6%9B%B4%E6%96%B0%E6%99%82%E3%81%AB%E3%80%8CNetworkBehaviour-is-not-found%E3%80%8D%E3%81%8C%E5%87%BA%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/"},{"title":"【Git】ファイルの巻き戻し方法","text":"目次 ステージングエリアの変更を取り消す ファイルを最後に変更(commit)した状態に戻す ステージングエリアの変更を取り消すgit addの反対のことをする必要があるので、git resetを使用する。ステージングの取り消しなので、作業ディレクトリのファイルは変化しない。 git reset を使ってファイルのステージングを取り消す 12$ git add test.txt$ git reset test.txt ファイルを最後に変更(commit)した状態に戻すgit commitしたということは、ファイルの状態を保存してあるので、git checkoutを使えば戻すことができる。 git checkout を使用して、ファイルの中身を最後に変更した状態に戻す 1$ git checkout ファイル名 作業エリアすべてのファイルを最後のコミットの状態に戻す 1$ git checkout .","link":"/2021/03/30/%E3%80%90Git%E3%80%91%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%B7%BB%E3%81%8D%E6%88%BB%E3%81%97%E6%96%B9%E6%B3%95/"},{"title":"【Git】Git独自のaliasを設定して長いコマンドを短くする","text":"目次 設定方法 1. コマンドから設定する 2. configファイルを編集する 設定方法1. コマンドから設定するコマンドラインから、git configを使用して設定する方法 1git config --global alias.設定したいコマンド名 &quot;短くしたいコマンド&quot; 今回は、コミット履歴(log)をグラフ表示(–graph)しながら、一行(–oneline)ですべてのブランチ(–all)のコミットを表示するコマンドをlogaとして登録します。 1$ git config --global alias.loga &quot;log --graph --oneline --all&quot; 2. configファイルを編集する設定ファイルを開くこまどで.gitconfigを開きます。 1$ git config --global --edit [alias]という記述がなければ一緒に追記してください。 12[alias] loga = log --graph --oneline --all","link":"/2021/03/31/%E3%80%90Git%E3%80%91Git%E7%8B%AC%E8%87%AA%E3%81%AEalias%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%A6%E9%95%B7%E3%81%84%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E7%9F%AD%E3%81%8F%E3%81%99%E3%82%8B/"},{"title":"【Blog】GoogleSerchConsoleにブログを認識させる","text":"目次 サイトからHTMLファイルをダウンロードする (hexo)ダウンロードしたファイルを配置する ファイルをアップロードする google serch consoleで認識する サイトからHTMLファイルをダウンロードするGoogle Serch Console URLプレフィックスを選択して、入力欄に自分のブログを入力 所有権の確認ウィンドウが表示されるので、htmlファイル内のファイルをダウンロードで表示されているファイルをダウンロードする (hexo)ダウンロードしたファイルを配置するhexoの場合は、以下ディレクトリに配置する 1リポジトリ/public/ダウンロードした.html ファイルをアップロードするブログを更新するのと同じ用に、デプロイする google serch consoleで認識するもう一度、Google Serch Consoleに戻り、確認ボタンを押して、確認が取れました画面が出ればOK","link":"/2021/04/01/%E3%80%90Blog%E3%80%91GoogleSerchConsole%E3%81%AB%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E8%AA%8D%E8%AD%98%E3%81%95%E3%81%9B%E3%82%8B/"},{"title":"【Git】pullは何をしているのか","text":"目次 pullとは fetchとmerge pullは内部で何をしているのか pullとはpullとは、ローカルリポジトリとリモートリポジトリを同期させる行為です。 git push とgit pull は対になっているコマンドに感じますが、実際に内部で行っている処理は、git pullのほうが複雑です。 git pushはクリーン(fast-forward)マージを強制されます。しかし、git pullの場合はクリーンマージができないケースがあります。(内部でコミットしている場合) fetchとmerge fetch : リモートリポジトリのリファレンス(ブランチやタグ)をローカルリポジトリのリモート追跡ブランチ(FETCH_HEADの位置)を更新します。 merge : 今いるブランチへ他のブランチを取り込みます。 pullは内部で何をしているのかgit pullでは、git fetchからgit merge FETCH_HEADの順で処理をしています。 なぜ、mergeが発生するのかというと、gitではリモートの状態をローカル環境でリモート追跡ブランチとして、管理しています。このリモート管理ブランチの先頭をFETCH_HEADとして定義しています。 つまり、リモート追跡ブランチを今いるブランチへマージすることで、リモートリポジトリのFETCH_HEAD`の次のコミットを作ることで、ブランチを同期させています。","link":"/2021/04/02/%E3%80%90Git%E3%80%91pull%E3%81%AF%E4%BD%95%E3%82%92%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B/"},{"title":"【Git】コミットを探す","text":"目次 コミットメッセージから探す コミットした人物から探す 実行例 コミットメッセージから探す--grepスイッチを使用して=に指定した文字列と一致するコミットメッセージのコミットを表示することができます。 1$ git log --grep=test コミットした人物から探すshortlogでそのリポジトリにコミットした人ごとのコミットを表示して、その後--atherスイッチで人物を指定して指定した人物のコミットだけを表示させる shortlogでメールアドレスを表示させるには-eスイッチをつける 実行例ユーザーごとにコミットが表示される 1234567891011$ git shortlogDaiki Iijima(10) .... .... ....Kojima Yui(21) ... ... ... 個人を指定して表示させる 1$ git log --author=&quot;Daiki Iijima&quot;","link":"/2021/04/03/%E3%80%90Git%E3%80%91%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%82%92%E6%8E%A2%E3%81%99/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"Xcode","slug":"Xcode","link":"/tags/Xcode/"},{"name":"HTML","slug":"HTML","link":"/tags/HTML/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"Vim","slug":"Vim","link":"/tags/Vim/"},{"name":"Swift","slug":"Swift","link":"/tags/Swift/"},{"name":"AppleScript","slug":"AppleScript","link":"/tags/AppleScript/"},{"name":"自動化","slug":"自動化","link":"/tags/%E8%87%AA%E5%8B%95%E5%8C%96/"},{"name":"zsh","slug":"zsh","link":"/tags/zsh/"},{"name":"alias","slug":"alias","link":"/tags/alias/"},{"name":"VimPlugin","slug":"VimPlugin","link":"/tags/VimPlugin/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"Vimプラグイン","slug":"Vimプラグイン","link":"/tags/Vim%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Linuxコマンド","slug":"Linuxコマンド","link":"/tags/Linux%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/"},{"name":"XCode","slug":"XCode","link":"/tags/XCode/"},{"name":"Shell","slug":"Shell","link":"/tags/Shell/"},{"name":"Zsh","slug":"Zsh","link":"/tags/Zsh/"},{"name":"VSCode","slug":"VSCode","link":"/tags/VSCode/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"Android","slug":"Android","link":"/tags/Android/"},{"name":"Android Studio","slug":"Android-Studio","link":"/tags/Android-Studio/"},{"name":"Kotlin","slug":"Kotlin","link":"/tags/Kotlin/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"Windows API","slug":"Windows-API","link":"/tags/Windows-API/"},{"name":"Mac","slug":"Mac","link":"/tags/Mac/"},{"name":"Unity","slug":"Unity","link":"/tags/Unity/"},{"name":"Visual Studio","slug":"Visual-Studio","link":"/tags/Visual-Studio/"}],"categories":[{"name":"Blog","slug":"Blog","link":"/categories/Blog/"}]}